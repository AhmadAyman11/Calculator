
project3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003822  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00003822  00003896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021f0  00000000  00000000  000039c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c42  00000000  00000000  00005bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  000067f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000020e  00000000  00000000  000069b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000268b  00000000  00000000  00006bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d1  00000000  00000000  0000924f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ab  00000000  00000000  0000a720  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000b9cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fb  00000000  00000000  0000bbac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0a  00000000  00000000  0000bea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000c8b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       8:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
       c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      10:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      14:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      18:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      1c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      20:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      24:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      28:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      2c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      30:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      34:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      38:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      3c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      40:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      44:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      48:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      4c:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      50:	0c 94 bc 00 	jmp	0x178	; 0x178 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__ltsf2+0x1a>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x172>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1f8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <__bad_interrupt>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x3e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e2 e2       	ldi	r30, 0x22	; 34
     162:	f8 e3       	ldi	r31, 0x38	; 56
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	ac 38       	cpi	r26, 0x8C	; 140
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>
     170:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <main>
     174:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <_exit>

00000178 <__bad_interrupt>:
     178:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000017c <__fixunssfsi>:
     17c:	ef 92       	push	r14
     17e:	ff 92       	push	r15
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	7b 01       	movw	r14, r22
     186:	8c 01       	movw	r16, r24
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	5f e4       	ldi	r21, 0x4F	; 79
     190:	0e 94 9a 04 	call	0x934	; 0x934 <__gesf2>
     194:	88 23       	and	r24, r24
     196:	8c f0       	brlt	.+34     	; 0x1ba <__fixunssfsi+0x3e>
     198:	c8 01       	movw	r24, r16
     19a:	b7 01       	movw	r22, r14
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 36 02 	call	0x46c	; 0x46c <__subsf3>
     1a8:	0e 94 58 05 	call	0xab0	; 0xab0 <__fixsfsi>
     1ac:	9b 01       	movw	r18, r22
     1ae:	ac 01       	movw	r20, r24
     1b0:	20 50       	subi	r18, 0x00	; 0
     1b2:	30 40       	sbci	r19, 0x00	; 0
     1b4:	40 40       	sbci	r20, 0x00	; 0
     1b6:	50 48       	sbci	r21, 0x80	; 128
     1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <__fixunssfsi+0x4a>
     1ba:	c8 01       	movw	r24, r16
     1bc:	b7 01       	movw	r22, r14
     1be:	0e 94 58 05 	call	0xab0	; 0xab0 <__fixsfsi>
     1c2:	9b 01       	movw	r18, r22
     1c4:	ac 01       	movw	r20, r24
     1c6:	b9 01       	movw	r22, r18
     1c8:	ca 01       	movw	r24, r20
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	ff 90       	pop	r15
     1d0:	ef 90       	pop	r14
     1d2:	08 95       	ret

000001d4 <_fpadd_parts>:
     1d4:	a0 e0       	ldi	r26, 0x00	; 0
     1d6:	b0 e0       	ldi	r27, 0x00	; 0
     1d8:	e0 ef       	ldi	r30, 0xF0	; 240
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__prologue_saves__>
     1e0:	dc 01       	movw	r26, r24
     1e2:	2b 01       	movw	r4, r22
     1e4:	fa 01       	movw	r30, r20
     1e6:	9c 91       	ld	r25, X
     1e8:	92 30       	cpi	r25, 0x02	; 2
     1ea:	08 f4       	brcc	.+2      	; 0x1ee <_fpadd_parts+0x1a>
     1ec:	39 c1       	rjmp	.+626    	; 0x460 <__stack+0x1>
     1ee:	eb 01       	movw	r28, r22
     1f0:	88 81       	ld	r24, Y
     1f2:	82 30       	cpi	r24, 0x02	; 2
     1f4:	08 f4       	brcc	.+2      	; 0x1f8 <_fpadd_parts+0x24>
     1f6:	33 c1       	rjmp	.+614    	; 0x45e <_fpadd_parts+0x28a>
     1f8:	94 30       	cpi	r25, 0x04	; 4
     1fa:	69 f4       	brne	.+26     	; 0x216 <_fpadd_parts+0x42>
     1fc:	84 30       	cpi	r24, 0x04	; 4
     1fe:	09 f0       	breq	.+2      	; 0x202 <_fpadd_parts+0x2e>
     200:	2f c1       	rjmp	.+606    	; 0x460 <__stack+0x1>
     202:	11 96       	adiw	r26, 0x01	; 1
     204:	9c 91       	ld	r25, X
     206:	11 97       	sbiw	r26, 0x01	; 1
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	98 17       	cp	r25, r24
     20c:	09 f4       	brne	.+2      	; 0x210 <_fpadd_parts+0x3c>
     20e:	28 c1       	rjmp	.+592    	; 0x460 <__stack+0x1>
     210:	a3 e8       	ldi	r26, 0x83	; 131
     212:	b0 e0       	ldi	r27, 0x00	; 0
     214:	25 c1       	rjmp	.+586    	; 0x460 <__stack+0x1>
     216:	84 30       	cpi	r24, 0x04	; 4
     218:	09 f4       	brne	.+2      	; 0x21c <_fpadd_parts+0x48>
     21a:	21 c1       	rjmp	.+578    	; 0x45e <_fpadd_parts+0x28a>
     21c:	82 30       	cpi	r24, 0x02	; 2
     21e:	a9 f4       	brne	.+42     	; 0x24a <_fpadd_parts+0x76>
     220:	92 30       	cpi	r25, 0x02	; 2
     222:	09 f0       	breq	.+2      	; 0x226 <_fpadd_parts+0x52>
     224:	1d c1       	rjmp	.+570    	; 0x460 <__stack+0x1>
     226:	9a 01       	movw	r18, r20
     228:	ad 01       	movw	r20, r26
     22a:	88 e0       	ldi	r24, 0x08	; 8
     22c:	ea 01       	movw	r28, r20
     22e:	09 90       	ld	r0, Y+
     230:	ae 01       	movw	r20, r28
     232:	e9 01       	movw	r28, r18
     234:	09 92       	st	Y+, r0
     236:	9e 01       	movw	r18, r28
     238:	81 50       	subi	r24, 0x01	; 1
     23a:	c1 f7       	brne	.-16     	; 0x22c <_fpadd_parts+0x58>
     23c:	e2 01       	movw	r28, r4
     23e:	89 81       	ldd	r24, Y+1	; 0x01
     240:	11 96       	adiw	r26, 0x01	; 1
     242:	9c 91       	ld	r25, X
     244:	89 23       	and	r24, r25
     246:	81 83       	std	Z+1, r24	; 0x01
     248:	08 c1       	rjmp	.+528    	; 0x45a <_fpadd_parts+0x286>
     24a:	92 30       	cpi	r25, 0x02	; 2
     24c:	09 f4       	brne	.+2      	; 0x250 <_fpadd_parts+0x7c>
     24e:	07 c1       	rjmp	.+526    	; 0x45e <_fpadd_parts+0x28a>
     250:	12 96       	adiw	r26, 0x02	; 2
     252:	2d 90       	ld	r2, X+
     254:	3c 90       	ld	r3, X
     256:	13 97       	sbiw	r26, 0x03	; 3
     258:	eb 01       	movw	r28, r22
     25a:	8a 81       	ldd	r24, Y+2	; 0x02
     25c:	9b 81       	ldd	r25, Y+3	; 0x03
     25e:	14 96       	adiw	r26, 0x04	; 4
     260:	ad 90       	ld	r10, X+
     262:	bd 90       	ld	r11, X+
     264:	cd 90       	ld	r12, X+
     266:	dc 90       	ld	r13, X
     268:	17 97       	sbiw	r26, 0x07	; 7
     26a:	ec 80       	ldd	r14, Y+4	; 0x04
     26c:	fd 80       	ldd	r15, Y+5	; 0x05
     26e:	0e 81       	ldd	r16, Y+6	; 0x06
     270:	1f 81       	ldd	r17, Y+7	; 0x07
     272:	91 01       	movw	r18, r2
     274:	28 1b       	sub	r18, r24
     276:	39 0b       	sbc	r19, r25
     278:	b9 01       	movw	r22, r18
     27a:	37 ff       	sbrs	r19, 7
     27c:	04 c0       	rjmp	.+8      	; 0x286 <_fpadd_parts+0xb2>
     27e:	66 27       	eor	r22, r22
     280:	77 27       	eor	r23, r23
     282:	62 1b       	sub	r22, r18
     284:	73 0b       	sbc	r23, r19
     286:	60 32       	cpi	r22, 0x20	; 32
     288:	71 05       	cpc	r23, r1
     28a:	0c f0       	brlt	.+2      	; 0x28e <_fpadd_parts+0xba>
     28c:	61 c0       	rjmp	.+194    	; 0x350 <_fpadd_parts+0x17c>
     28e:	12 16       	cp	r1, r18
     290:	13 06       	cpc	r1, r19
     292:	6c f5       	brge	.+90     	; 0x2ee <_fpadd_parts+0x11a>
     294:	37 01       	movw	r6, r14
     296:	48 01       	movw	r8, r16
     298:	06 2e       	mov	r0, r22
     29a:	04 c0       	rjmp	.+8      	; 0x2a4 <_fpadd_parts+0xd0>
     29c:	96 94       	lsr	r9
     29e:	87 94       	ror	r8
     2a0:	77 94       	ror	r7
     2a2:	67 94       	ror	r6
     2a4:	0a 94       	dec	r0
     2a6:	d2 f7       	brpl	.-12     	; 0x29c <_fpadd_parts+0xc8>
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	04 c0       	rjmp	.+8      	; 0x2ba <_fpadd_parts+0xe6>
     2b2:	22 0f       	add	r18, r18
     2b4:	33 1f       	adc	r19, r19
     2b6:	44 1f       	adc	r20, r20
     2b8:	55 1f       	adc	r21, r21
     2ba:	6a 95       	dec	r22
     2bc:	d2 f7       	brpl	.-12     	; 0x2b2 <_fpadd_parts+0xde>
     2be:	21 50       	subi	r18, 0x01	; 1
     2c0:	30 40       	sbci	r19, 0x00	; 0
     2c2:	40 40       	sbci	r20, 0x00	; 0
     2c4:	50 40       	sbci	r21, 0x00	; 0
     2c6:	2e 21       	and	r18, r14
     2c8:	3f 21       	and	r19, r15
     2ca:	40 23       	and	r20, r16
     2cc:	51 23       	and	r21, r17
     2ce:	21 15       	cp	r18, r1
     2d0:	31 05       	cpc	r19, r1
     2d2:	41 05       	cpc	r20, r1
     2d4:	51 05       	cpc	r21, r1
     2d6:	21 f0       	breq	.+8      	; 0x2e0 <_fpadd_parts+0x10c>
     2d8:	21 e0       	ldi	r18, 0x01	; 1
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	50 e0       	ldi	r21, 0x00	; 0
     2e0:	79 01       	movw	r14, r18
     2e2:	8a 01       	movw	r16, r20
     2e4:	e6 28       	or	r14, r6
     2e6:	f7 28       	or	r15, r7
     2e8:	08 29       	or	r16, r8
     2ea:	19 29       	or	r17, r9
     2ec:	3c c0       	rjmp	.+120    	; 0x366 <_fpadd_parts+0x192>
     2ee:	23 2b       	or	r18, r19
     2f0:	d1 f1       	breq	.+116    	; 0x366 <_fpadd_parts+0x192>
     2f2:	26 0e       	add	r2, r22
     2f4:	37 1e       	adc	r3, r23
     2f6:	35 01       	movw	r6, r10
     2f8:	46 01       	movw	r8, r12
     2fa:	06 2e       	mov	r0, r22
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <_fpadd_parts+0x132>
     2fe:	96 94       	lsr	r9
     300:	87 94       	ror	r8
     302:	77 94       	ror	r7
     304:	67 94       	ror	r6
     306:	0a 94       	dec	r0
     308:	d2 f7       	brpl	.-12     	; 0x2fe <_fpadd_parts+0x12a>
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e0       	ldi	r20, 0x00	; 0
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	04 c0       	rjmp	.+8      	; 0x31c <_fpadd_parts+0x148>
     314:	22 0f       	add	r18, r18
     316:	33 1f       	adc	r19, r19
     318:	44 1f       	adc	r20, r20
     31a:	55 1f       	adc	r21, r21
     31c:	6a 95       	dec	r22
     31e:	d2 f7       	brpl	.-12     	; 0x314 <_fpadd_parts+0x140>
     320:	21 50       	subi	r18, 0x01	; 1
     322:	30 40       	sbci	r19, 0x00	; 0
     324:	40 40       	sbci	r20, 0x00	; 0
     326:	50 40       	sbci	r21, 0x00	; 0
     328:	2a 21       	and	r18, r10
     32a:	3b 21       	and	r19, r11
     32c:	4c 21       	and	r20, r12
     32e:	5d 21       	and	r21, r13
     330:	21 15       	cp	r18, r1
     332:	31 05       	cpc	r19, r1
     334:	41 05       	cpc	r20, r1
     336:	51 05       	cpc	r21, r1
     338:	21 f0       	breq	.+8      	; 0x342 <_fpadd_parts+0x16e>
     33a:	21 e0       	ldi	r18, 0x01	; 1
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	59 01       	movw	r10, r18
     344:	6a 01       	movw	r12, r20
     346:	a6 28       	or	r10, r6
     348:	b7 28       	or	r11, r7
     34a:	c8 28       	or	r12, r8
     34c:	d9 28       	or	r13, r9
     34e:	0b c0       	rjmp	.+22     	; 0x366 <_fpadd_parts+0x192>
     350:	82 15       	cp	r24, r2
     352:	93 05       	cpc	r25, r3
     354:	2c f0       	brlt	.+10     	; 0x360 <_fpadd_parts+0x18c>
     356:	1c 01       	movw	r2, r24
     358:	aa 24       	eor	r10, r10
     35a:	bb 24       	eor	r11, r11
     35c:	65 01       	movw	r12, r10
     35e:	03 c0       	rjmp	.+6      	; 0x366 <_fpadd_parts+0x192>
     360:	ee 24       	eor	r14, r14
     362:	ff 24       	eor	r15, r15
     364:	87 01       	movw	r16, r14
     366:	11 96       	adiw	r26, 0x01	; 1
     368:	9c 91       	ld	r25, X
     36a:	d2 01       	movw	r26, r4
     36c:	11 96       	adiw	r26, 0x01	; 1
     36e:	8c 91       	ld	r24, X
     370:	98 17       	cp	r25, r24
     372:	09 f4       	brne	.+2      	; 0x376 <_fpadd_parts+0x1a2>
     374:	45 c0       	rjmp	.+138    	; 0x400 <_fpadd_parts+0x22c>
     376:	99 23       	and	r25, r25
     378:	39 f0       	breq	.+14     	; 0x388 <_fpadd_parts+0x1b4>
     37a:	a8 01       	movw	r20, r16
     37c:	97 01       	movw	r18, r14
     37e:	2a 19       	sub	r18, r10
     380:	3b 09       	sbc	r19, r11
     382:	4c 09       	sbc	r20, r12
     384:	5d 09       	sbc	r21, r13
     386:	06 c0       	rjmp	.+12     	; 0x394 <_fpadd_parts+0x1c0>
     388:	a6 01       	movw	r20, r12
     38a:	95 01       	movw	r18, r10
     38c:	2e 19       	sub	r18, r14
     38e:	3f 09       	sbc	r19, r15
     390:	40 0b       	sbc	r20, r16
     392:	51 0b       	sbc	r21, r17
     394:	57 fd       	sbrc	r21, 7
     396:	08 c0       	rjmp	.+16     	; 0x3a8 <_fpadd_parts+0x1d4>
     398:	11 82       	std	Z+1, r1	; 0x01
     39a:	33 82       	std	Z+3, r3	; 0x03
     39c:	22 82       	std	Z+2, r2	; 0x02
     39e:	24 83       	std	Z+4, r18	; 0x04
     3a0:	35 83       	std	Z+5, r19	; 0x05
     3a2:	46 83       	std	Z+6, r20	; 0x06
     3a4:	57 83       	std	Z+7, r21	; 0x07
     3a6:	1d c0       	rjmp	.+58     	; 0x3e2 <_fpadd_parts+0x20e>
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	81 83       	std	Z+1, r24	; 0x01
     3ac:	33 82       	std	Z+3, r3	; 0x03
     3ae:	22 82       	std	Z+2, r2	; 0x02
     3b0:	88 27       	eor	r24, r24
     3b2:	99 27       	eor	r25, r25
     3b4:	dc 01       	movw	r26, r24
     3b6:	82 1b       	sub	r24, r18
     3b8:	93 0b       	sbc	r25, r19
     3ba:	a4 0b       	sbc	r26, r20
     3bc:	b5 0b       	sbc	r27, r21
     3be:	84 83       	std	Z+4, r24	; 0x04
     3c0:	95 83       	std	Z+5, r25	; 0x05
     3c2:	a6 83       	std	Z+6, r26	; 0x06
     3c4:	b7 83       	std	Z+7, r27	; 0x07
     3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <_fpadd_parts+0x20e>
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	44 1f       	adc	r20, r20
     3ce:	55 1f       	adc	r21, r21
     3d0:	24 83       	std	Z+4, r18	; 0x04
     3d2:	35 83       	std	Z+5, r19	; 0x05
     3d4:	46 83       	std	Z+6, r20	; 0x06
     3d6:	57 83       	std	Z+7, r21	; 0x07
     3d8:	82 81       	ldd	r24, Z+2	; 0x02
     3da:	93 81       	ldd	r25, Z+3	; 0x03
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	93 83       	std	Z+3, r25	; 0x03
     3e0:	82 83       	std	Z+2, r24	; 0x02
     3e2:	24 81       	ldd	r18, Z+4	; 0x04
     3e4:	35 81       	ldd	r19, Z+5	; 0x05
     3e6:	46 81       	ldd	r20, Z+6	; 0x06
     3e8:	57 81       	ldd	r21, Z+7	; 0x07
     3ea:	da 01       	movw	r26, r20
     3ec:	c9 01       	movw	r24, r18
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	a1 09       	sbc	r26, r1
     3f2:	b1 09       	sbc	r27, r1
     3f4:	8f 5f       	subi	r24, 0xFF	; 255
     3f6:	9f 4f       	sbci	r25, 0xFF	; 255
     3f8:	af 4f       	sbci	r26, 0xFF	; 255
     3fa:	bf 43       	sbci	r27, 0x3F	; 63
     3fc:	28 f3       	brcs	.-54     	; 0x3c8 <_fpadd_parts+0x1f4>
     3fe:	0b c0       	rjmp	.+22     	; 0x416 <_fpadd_parts+0x242>
     400:	91 83       	std	Z+1, r25	; 0x01
     402:	33 82       	std	Z+3, r3	; 0x03
     404:	22 82       	std	Z+2, r2	; 0x02
     406:	ea 0c       	add	r14, r10
     408:	fb 1c       	adc	r15, r11
     40a:	0c 1d       	adc	r16, r12
     40c:	1d 1d       	adc	r17, r13
     40e:	e4 82       	std	Z+4, r14	; 0x04
     410:	f5 82       	std	Z+5, r15	; 0x05
     412:	06 83       	std	Z+6, r16	; 0x06
     414:	17 83       	std	Z+7, r17	; 0x07
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	80 83       	st	Z, r24
     41a:	24 81       	ldd	r18, Z+4	; 0x04
     41c:	35 81       	ldd	r19, Z+5	; 0x05
     41e:	46 81       	ldd	r20, Z+6	; 0x06
     420:	57 81       	ldd	r21, Z+7	; 0x07
     422:	57 ff       	sbrs	r21, 7
     424:	1a c0       	rjmp	.+52     	; 0x45a <_fpadd_parts+0x286>
     426:	c9 01       	movw	r24, r18
     428:	aa 27       	eor	r26, r26
     42a:	97 fd       	sbrc	r25, 7
     42c:	a0 95       	com	r26
     42e:	ba 2f       	mov	r27, r26
     430:	81 70       	andi	r24, 0x01	; 1
     432:	90 70       	andi	r25, 0x00	; 0
     434:	a0 70       	andi	r26, 0x00	; 0
     436:	b0 70       	andi	r27, 0x00	; 0
     438:	56 95       	lsr	r21
     43a:	47 95       	ror	r20
     43c:	37 95       	ror	r19
     43e:	27 95       	ror	r18
     440:	82 2b       	or	r24, r18
     442:	93 2b       	or	r25, r19
     444:	a4 2b       	or	r26, r20
     446:	b5 2b       	or	r27, r21
     448:	84 83       	std	Z+4, r24	; 0x04
     44a:	95 83       	std	Z+5, r25	; 0x05
     44c:	a6 83       	std	Z+6, r26	; 0x06
     44e:	b7 83       	std	Z+7, r27	; 0x07
     450:	82 81       	ldd	r24, Z+2	; 0x02
     452:	93 81       	ldd	r25, Z+3	; 0x03
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	93 83       	std	Z+3, r25	; 0x03
     458:	82 83       	std	Z+2, r24	; 0x02
     45a:	df 01       	movw	r26, r30
     45c:	01 c0       	rjmp	.+2      	; 0x460 <__stack+0x1>
     45e:	d2 01       	movw	r26, r4
     460:	cd 01       	movw	r24, r26
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	e2 e1       	ldi	r30, 0x12	; 18
     468:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__epilogue_restores__>

0000046c <__subsf3>:
     46c:	a0 e2       	ldi	r26, 0x20	; 32
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	ec e3       	ldi	r30, 0x3C	; 60
     472:	f2 e0       	ldi	r31, 0x02	; 2
     474:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__prologue_saves__+0x18>
     478:	69 83       	std	Y+1, r22	; 0x01
     47a:	7a 83       	std	Y+2, r23	; 0x02
     47c:	8b 83       	std	Y+3, r24	; 0x03
     47e:	9c 83       	std	Y+4, r25	; 0x04
     480:	2d 83       	std	Y+5, r18	; 0x05
     482:	3e 83       	std	Y+6, r19	; 0x06
     484:	4f 83       	std	Y+7, r20	; 0x07
     486:	58 87       	std	Y+8, r21	; 0x08
     488:	e9 e0       	ldi	r30, 0x09	; 9
     48a:	ee 2e       	mov	r14, r30
     48c:	f1 2c       	mov	r15, r1
     48e:	ec 0e       	add	r14, r28
     490:	fd 1e       	adc	r15, r29
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	b7 01       	movw	r22, r14
     498:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     49c:	8e 01       	movw	r16, r28
     49e:	0f 5e       	subi	r16, 0xEF	; 239
     4a0:	1f 4f       	sbci	r17, 0xFF	; 255
     4a2:	ce 01       	movw	r24, r28
     4a4:	05 96       	adiw	r24, 0x05	; 5
     4a6:	b8 01       	movw	r22, r16
     4a8:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     4ac:	8a 89       	ldd	r24, Y+18	; 0x12
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	89 27       	eor	r24, r25
     4b2:	8a 8b       	std	Y+18, r24	; 0x12
     4b4:	c7 01       	movw	r24, r14
     4b6:	b8 01       	movw	r22, r16
     4b8:	ae 01       	movw	r20, r28
     4ba:	47 5e       	subi	r20, 0xE7	; 231
     4bc:	5f 4f       	sbci	r21, 0xFF	; 255
     4be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_fpadd_parts>
     4c2:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__pack_f>
     4c6:	a0 96       	adiw	r28, 0x20	; 32
     4c8:	e6 e0       	ldi	r30, 0x06	; 6
     4ca:	0c 94 60 19 	jmp	0x32c0	; 0x32c0 <__epilogue_restores__+0x18>

000004ce <__addsf3>:
     4ce:	a0 e2       	ldi	r26, 0x20	; 32
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	ed e6       	ldi	r30, 0x6D	; 109
     4d4:	f2 e0       	ldi	r31, 0x02	; 2
     4d6:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__prologue_saves__+0x18>
     4da:	69 83       	std	Y+1, r22	; 0x01
     4dc:	7a 83       	std	Y+2, r23	; 0x02
     4de:	8b 83       	std	Y+3, r24	; 0x03
     4e0:	9c 83       	std	Y+4, r25	; 0x04
     4e2:	2d 83       	std	Y+5, r18	; 0x05
     4e4:	3e 83       	std	Y+6, r19	; 0x06
     4e6:	4f 83       	std	Y+7, r20	; 0x07
     4e8:	58 87       	std	Y+8, r21	; 0x08
     4ea:	f9 e0       	ldi	r31, 0x09	; 9
     4ec:	ef 2e       	mov	r14, r31
     4ee:	f1 2c       	mov	r15, r1
     4f0:	ec 0e       	add	r14, r28
     4f2:	fd 1e       	adc	r15, r29
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	b7 01       	movw	r22, r14
     4fa:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     4fe:	8e 01       	movw	r16, r28
     500:	0f 5e       	subi	r16, 0xEF	; 239
     502:	1f 4f       	sbci	r17, 0xFF	; 255
     504:	ce 01       	movw	r24, r28
     506:	05 96       	adiw	r24, 0x05	; 5
     508:	b8 01       	movw	r22, r16
     50a:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     50e:	c7 01       	movw	r24, r14
     510:	b8 01       	movw	r22, r16
     512:	ae 01       	movw	r20, r28
     514:	47 5e       	subi	r20, 0xE7	; 231
     516:	5f 4f       	sbci	r21, 0xFF	; 255
     518:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_fpadd_parts>
     51c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__pack_f>
     520:	a0 96       	adiw	r28, 0x20	; 32
     522:	e6 e0       	ldi	r30, 0x06	; 6
     524:	0c 94 60 19 	jmp	0x32c0	; 0x32c0 <__epilogue_restores__+0x18>

00000528 <__mulsf3>:
     528:	a0 e2       	ldi	r26, 0x20	; 32
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	ea e9       	ldi	r30, 0x9A	; 154
     52e:	f2 e0       	ldi	r31, 0x02	; 2
     530:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__prologue_saves__>
     534:	69 83       	std	Y+1, r22	; 0x01
     536:	7a 83       	std	Y+2, r23	; 0x02
     538:	8b 83       	std	Y+3, r24	; 0x03
     53a:	9c 83       	std	Y+4, r25	; 0x04
     53c:	2d 83       	std	Y+5, r18	; 0x05
     53e:	3e 83       	std	Y+6, r19	; 0x06
     540:	4f 83       	std	Y+7, r20	; 0x07
     542:	58 87       	std	Y+8, r21	; 0x08
     544:	ce 01       	movw	r24, r28
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	be 01       	movw	r22, r28
     54a:	67 5f       	subi	r22, 0xF7	; 247
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     552:	ce 01       	movw	r24, r28
     554:	05 96       	adiw	r24, 0x05	; 5
     556:	be 01       	movw	r22, r28
     558:	6f 5e       	subi	r22, 0xEF	; 239
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     560:	99 85       	ldd	r25, Y+9	; 0x09
     562:	92 30       	cpi	r25, 0x02	; 2
     564:	88 f0       	brcs	.+34     	; 0x588 <__mulsf3+0x60>
     566:	89 89       	ldd	r24, Y+17	; 0x11
     568:	82 30       	cpi	r24, 0x02	; 2
     56a:	c8 f0       	brcs	.+50     	; 0x59e <__mulsf3+0x76>
     56c:	94 30       	cpi	r25, 0x04	; 4
     56e:	19 f4       	brne	.+6      	; 0x576 <__mulsf3+0x4e>
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	51 f4       	brne	.+20     	; 0x588 <__mulsf3+0x60>
     574:	04 c0       	rjmp	.+8      	; 0x57e <__mulsf3+0x56>
     576:	84 30       	cpi	r24, 0x04	; 4
     578:	29 f4       	brne	.+10     	; 0x584 <__mulsf3+0x5c>
     57a:	92 30       	cpi	r25, 0x02	; 2
     57c:	81 f4       	brne	.+32     	; 0x59e <__mulsf3+0x76>
     57e:	83 e8       	ldi	r24, 0x83	; 131
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	c6 c0       	rjmp	.+396    	; 0x710 <__mulsf3+0x1e8>
     584:	92 30       	cpi	r25, 0x02	; 2
     586:	49 f4       	brne	.+18     	; 0x59a <__mulsf3+0x72>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	9a 85       	ldd	r25, Y+10	; 0x0a
     58c:	8a 89       	ldd	r24, Y+18	; 0x12
     58e:	98 13       	cpse	r25, r24
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	2a 87       	std	Y+10, r18	; 0x0a
     594:	ce 01       	movw	r24, r28
     596:	09 96       	adiw	r24, 0x09	; 9
     598:	bb c0       	rjmp	.+374    	; 0x710 <__mulsf3+0x1e8>
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	49 f4       	brne	.+18     	; 0x5b0 <__mulsf3+0x88>
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a2:	8a 89       	ldd	r24, Y+18	; 0x12
     5a4:	98 13       	cpse	r25, r24
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	2a 8b       	std	Y+18, r18	; 0x12
     5aa:	ce 01       	movw	r24, r28
     5ac:	41 96       	adiw	r24, 0x11	; 17
     5ae:	b0 c0       	rjmp	.+352    	; 0x710 <__mulsf3+0x1e8>
     5b0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5b2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5b4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5b6:	58 88       	ldd	r5, Y+16	; 0x10
     5b8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ba:	7e 88       	ldd	r7, Y+22	; 0x16
     5bc:	8f 88       	ldd	r8, Y+23	; 0x17
     5be:	98 8c       	ldd	r9, Y+24	; 0x18
     5c0:	ee 24       	eor	r14, r14
     5c2:	ff 24       	eor	r15, r15
     5c4:	87 01       	movw	r16, r14
     5c6:	aa 24       	eor	r10, r10
     5c8:	bb 24       	eor	r11, r11
     5ca:	65 01       	movw	r12, r10
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	e0 e0       	ldi	r30, 0x00	; 0
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	c1 01       	movw	r24, r2
     5da:	81 70       	andi	r24, 0x01	; 1
     5dc:	90 70       	andi	r25, 0x00	; 0
     5de:	89 2b       	or	r24, r25
     5e0:	e9 f0       	breq	.+58     	; 0x61c <__mulsf3+0xf4>
     5e2:	e6 0c       	add	r14, r6
     5e4:	f7 1c       	adc	r15, r7
     5e6:	08 1d       	adc	r16, r8
     5e8:	19 1d       	adc	r17, r9
     5ea:	9a 01       	movw	r18, r20
     5ec:	ab 01       	movw	r20, r22
     5ee:	2a 0d       	add	r18, r10
     5f0:	3b 1d       	adc	r19, r11
     5f2:	4c 1d       	adc	r20, r12
     5f4:	5d 1d       	adc	r21, r13
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e0       	ldi	r26, 0x00	; 0
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	e6 14       	cp	r14, r6
     600:	f7 04       	cpc	r15, r7
     602:	08 05       	cpc	r16, r8
     604:	19 05       	cpc	r17, r9
     606:	20 f4       	brcc	.+8      	; 0x610 <__mulsf3+0xe8>
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	a0 e0       	ldi	r26, 0x00	; 0
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	ba 01       	movw	r22, r20
     612:	a9 01       	movw	r20, r18
     614:	48 0f       	add	r20, r24
     616:	59 1f       	adc	r21, r25
     618:	6a 1f       	adc	r22, r26
     61a:	7b 1f       	adc	r23, r27
     61c:	aa 0c       	add	r10, r10
     61e:	bb 1c       	adc	r11, r11
     620:	cc 1c       	adc	r12, r12
     622:	dd 1c       	adc	r13, r13
     624:	97 fe       	sbrs	r9, 7
     626:	08 c0       	rjmp	.+16     	; 0x638 <__mulsf3+0x110>
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	a8 2a       	or	r10, r24
     632:	b9 2a       	or	r11, r25
     634:	ca 2a       	or	r12, r26
     636:	db 2a       	or	r13, r27
     638:	31 96       	adiw	r30, 0x01	; 1
     63a:	e0 32       	cpi	r30, 0x20	; 32
     63c:	f1 05       	cpc	r31, r1
     63e:	49 f0       	breq	.+18     	; 0x652 <__mulsf3+0x12a>
     640:	66 0c       	add	r6, r6
     642:	77 1c       	adc	r7, r7
     644:	88 1c       	adc	r8, r8
     646:	99 1c       	adc	r9, r9
     648:	56 94       	lsr	r5
     64a:	47 94       	ror	r4
     64c:	37 94       	ror	r3
     64e:	27 94       	ror	r2
     650:	c3 cf       	rjmp	.-122    	; 0x5d8 <__mulsf3+0xb0>
     652:	fa 85       	ldd	r31, Y+10	; 0x0a
     654:	ea 89       	ldd	r30, Y+18	; 0x12
     656:	2b 89       	ldd	r18, Y+19	; 0x13
     658:	3c 89       	ldd	r19, Y+20	; 0x14
     65a:	8b 85       	ldd	r24, Y+11	; 0x0b
     65c:	9c 85       	ldd	r25, Y+12	; 0x0c
     65e:	28 0f       	add	r18, r24
     660:	39 1f       	adc	r19, r25
     662:	2e 5f       	subi	r18, 0xFE	; 254
     664:	3f 4f       	sbci	r19, 0xFF	; 255
     666:	17 c0       	rjmp	.+46     	; 0x696 <__mulsf3+0x16e>
     668:	ca 01       	movw	r24, r20
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	90 70       	andi	r25, 0x00	; 0
     66e:	89 2b       	or	r24, r25
     670:	61 f0       	breq	.+24     	; 0x68a <__mulsf3+0x162>
     672:	16 95       	lsr	r17
     674:	07 95       	ror	r16
     676:	f7 94       	ror	r15
     678:	e7 94       	ror	r14
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	a0 e0       	ldi	r26, 0x00	; 0
     680:	b0 e8       	ldi	r27, 0x80	; 128
     682:	e8 2a       	or	r14, r24
     684:	f9 2a       	or	r15, r25
     686:	0a 2b       	or	r16, r26
     688:	1b 2b       	or	r17, r27
     68a:	76 95       	lsr	r23
     68c:	67 95       	ror	r22
     68e:	57 95       	ror	r21
     690:	47 95       	ror	r20
     692:	2f 5f       	subi	r18, 0xFF	; 255
     694:	3f 4f       	sbci	r19, 0xFF	; 255
     696:	77 fd       	sbrc	r23, 7
     698:	e7 cf       	rjmp	.-50     	; 0x668 <__mulsf3+0x140>
     69a:	0c c0       	rjmp	.+24     	; 0x6b4 <__mulsf3+0x18c>
     69c:	44 0f       	add	r20, r20
     69e:	55 1f       	adc	r21, r21
     6a0:	66 1f       	adc	r22, r22
     6a2:	77 1f       	adc	r23, r23
     6a4:	17 fd       	sbrc	r17, 7
     6a6:	41 60       	ori	r20, 0x01	; 1
     6a8:	ee 0c       	add	r14, r14
     6aa:	ff 1c       	adc	r15, r15
     6ac:	00 1f       	adc	r16, r16
     6ae:	11 1f       	adc	r17, r17
     6b0:	21 50       	subi	r18, 0x01	; 1
     6b2:	30 40       	sbci	r19, 0x00	; 0
     6b4:	40 30       	cpi	r20, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	59 07       	cpc	r21, r25
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	69 07       	cpc	r22, r25
     6be:	90 e4       	ldi	r25, 0x40	; 64
     6c0:	79 07       	cpc	r23, r25
     6c2:	60 f3       	brcs	.-40     	; 0x69c <__mulsf3+0x174>
     6c4:	2b 8f       	std	Y+27, r18	; 0x1b
     6c6:	3c 8f       	std	Y+28, r19	; 0x1c
     6c8:	db 01       	movw	r26, r22
     6ca:	ca 01       	movw	r24, r20
     6cc:	8f 77       	andi	r24, 0x7F	; 127
     6ce:	90 70       	andi	r25, 0x00	; 0
     6d0:	a0 70       	andi	r26, 0x00	; 0
     6d2:	b0 70       	andi	r27, 0x00	; 0
     6d4:	80 34       	cpi	r24, 0x40	; 64
     6d6:	91 05       	cpc	r25, r1
     6d8:	a1 05       	cpc	r26, r1
     6da:	b1 05       	cpc	r27, r1
     6dc:	61 f4       	brne	.+24     	; 0x6f6 <__mulsf3+0x1ce>
     6de:	47 fd       	sbrc	r20, 7
     6e0:	0a c0       	rjmp	.+20     	; 0x6f6 <__mulsf3+0x1ce>
     6e2:	e1 14       	cp	r14, r1
     6e4:	f1 04       	cpc	r15, r1
     6e6:	01 05       	cpc	r16, r1
     6e8:	11 05       	cpc	r17, r1
     6ea:	29 f0       	breq	.+10     	; 0x6f6 <__mulsf3+0x1ce>
     6ec:	40 5c       	subi	r20, 0xC0	; 192
     6ee:	5f 4f       	sbci	r21, 0xFF	; 255
     6f0:	6f 4f       	sbci	r22, 0xFF	; 255
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	40 78       	andi	r20, 0x80	; 128
     6f6:	1a 8e       	std	Y+26, r1	; 0x1a
     6f8:	fe 17       	cp	r31, r30
     6fa:	11 f0       	breq	.+4      	; 0x700 <__mulsf3+0x1d8>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	8a 8f       	std	Y+26, r24	; 0x1a
     700:	4d 8f       	std	Y+29, r20	; 0x1d
     702:	5e 8f       	std	Y+30, r21	; 0x1e
     704:	6f 8f       	std	Y+31, r22	; 0x1f
     706:	78 a3       	std	Y+32, r23	; 0x20
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	89 8f       	std	Y+25, r24	; 0x19
     70c:	ce 01       	movw	r24, r28
     70e:	49 96       	adiw	r24, 0x19	; 25
     710:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__pack_f>
     714:	a0 96       	adiw	r28, 0x20	; 32
     716:	e2 e1       	ldi	r30, 0x12	; 18
     718:	0c 94 54 19 	jmp	0x32a8	; 0x32a8 <__epilogue_restores__>

0000071c <__divsf3>:
     71c:	a8 e1       	ldi	r26, 0x18	; 24
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e4 e9       	ldi	r30, 0x94	; 148
     722:	f3 e0       	ldi	r31, 0x03	; 3
     724:	0c 94 40 19 	jmp	0x3280	; 0x3280 <__prologue_saves__+0x10>
     728:	69 83       	std	Y+1, r22	; 0x01
     72a:	7a 83       	std	Y+2, r23	; 0x02
     72c:	8b 83       	std	Y+3, r24	; 0x03
     72e:	9c 83       	std	Y+4, r25	; 0x04
     730:	2d 83       	std	Y+5, r18	; 0x05
     732:	3e 83       	std	Y+6, r19	; 0x06
     734:	4f 83       	std	Y+7, r20	; 0x07
     736:	58 87       	std	Y+8, r21	; 0x08
     738:	b9 e0       	ldi	r27, 0x09	; 9
     73a:	eb 2e       	mov	r14, r27
     73c:	f1 2c       	mov	r15, r1
     73e:	ec 0e       	add	r14, r28
     740:	fd 1e       	adc	r15, r29
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	b7 01       	movw	r22, r14
     748:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     74c:	8e 01       	movw	r16, r28
     74e:	0f 5e       	subi	r16, 0xEF	; 239
     750:	1f 4f       	sbci	r17, 0xFF	; 255
     752:	ce 01       	movw	r24, r28
     754:	05 96       	adiw	r24, 0x05	; 5
     756:	b8 01       	movw	r22, r16
     758:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     75c:	29 85       	ldd	r18, Y+9	; 0x09
     75e:	22 30       	cpi	r18, 0x02	; 2
     760:	08 f4       	brcc	.+2      	; 0x764 <__divsf3+0x48>
     762:	7e c0       	rjmp	.+252    	; 0x860 <__divsf3+0x144>
     764:	39 89       	ldd	r19, Y+17	; 0x11
     766:	32 30       	cpi	r19, 0x02	; 2
     768:	10 f4       	brcc	.+4      	; 0x76e <__divsf3+0x52>
     76a:	b8 01       	movw	r22, r16
     76c:	7c c0       	rjmp	.+248    	; 0x866 <__divsf3+0x14a>
     76e:	8a 85       	ldd	r24, Y+10	; 0x0a
     770:	9a 89       	ldd	r25, Y+18	; 0x12
     772:	89 27       	eor	r24, r25
     774:	8a 87       	std	Y+10, r24	; 0x0a
     776:	24 30       	cpi	r18, 0x04	; 4
     778:	11 f0       	breq	.+4      	; 0x77e <__divsf3+0x62>
     77a:	22 30       	cpi	r18, 0x02	; 2
     77c:	31 f4       	brne	.+12     	; 0x78a <__divsf3+0x6e>
     77e:	23 17       	cp	r18, r19
     780:	09 f0       	breq	.+2      	; 0x784 <__divsf3+0x68>
     782:	6e c0       	rjmp	.+220    	; 0x860 <__divsf3+0x144>
     784:	63 e8       	ldi	r22, 0x83	; 131
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	6e c0       	rjmp	.+220    	; 0x866 <__divsf3+0x14a>
     78a:	34 30       	cpi	r19, 0x04	; 4
     78c:	39 f4       	brne	.+14     	; 0x79c <__divsf3+0x80>
     78e:	1d 86       	std	Y+13, r1	; 0x0d
     790:	1e 86       	std	Y+14, r1	; 0x0e
     792:	1f 86       	std	Y+15, r1	; 0x0f
     794:	18 8a       	std	Y+16, r1	; 0x10
     796:	1c 86       	std	Y+12, r1	; 0x0c
     798:	1b 86       	std	Y+11, r1	; 0x0b
     79a:	04 c0       	rjmp	.+8      	; 0x7a4 <__divsf3+0x88>
     79c:	32 30       	cpi	r19, 0x02	; 2
     79e:	21 f4       	brne	.+8      	; 0x7a8 <__divsf3+0x8c>
     7a0:	84 e0       	ldi	r24, 0x04	; 4
     7a2:	89 87       	std	Y+9, r24	; 0x09
     7a4:	b7 01       	movw	r22, r14
     7a6:	5f c0       	rjmp	.+190    	; 0x866 <__divsf3+0x14a>
     7a8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7aa:	3c 85       	ldd	r19, Y+12	; 0x0c
     7ac:	8b 89       	ldd	r24, Y+19	; 0x13
     7ae:	9c 89       	ldd	r25, Y+20	; 0x14
     7b0:	28 1b       	sub	r18, r24
     7b2:	39 0b       	sbc	r19, r25
     7b4:	3c 87       	std	Y+12, r19	; 0x0c
     7b6:	2b 87       	std	Y+11, r18	; 0x0b
     7b8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ba:	fe 84       	ldd	r15, Y+14	; 0x0e
     7bc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7be:	18 89       	ldd	r17, Y+16	; 0x10
     7c0:	ad 88       	ldd	r10, Y+21	; 0x15
     7c2:	be 88       	ldd	r11, Y+22	; 0x16
     7c4:	cf 88       	ldd	r12, Y+23	; 0x17
     7c6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7c8:	ea 14       	cp	r14, r10
     7ca:	fb 04       	cpc	r15, r11
     7cc:	0c 05       	cpc	r16, r12
     7ce:	1d 05       	cpc	r17, r13
     7d0:	40 f4       	brcc	.+16     	; 0x7e2 <__divsf3+0xc6>
     7d2:	ee 0c       	add	r14, r14
     7d4:	ff 1c       	adc	r15, r15
     7d6:	00 1f       	adc	r16, r16
     7d8:	11 1f       	adc	r17, r17
     7da:	21 50       	subi	r18, 0x01	; 1
     7dc:	30 40       	sbci	r19, 0x00	; 0
     7de:	3c 87       	std	Y+12, r19	; 0x0c
     7e0:	2b 87       	std	Y+11, r18	; 0x0b
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	a0 e0       	ldi	r26, 0x00	; 0
     7f0:	b0 e4       	ldi	r27, 0x40	; 64
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	ea 14       	cp	r14, r10
     7f8:	fb 04       	cpc	r15, r11
     7fa:	0c 05       	cpc	r16, r12
     7fc:	1d 05       	cpc	r17, r13
     7fe:	40 f0       	brcs	.+16     	; 0x810 <__divsf3+0xf4>
     800:	28 2b       	or	r18, r24
     802:	39 2b       	or	r19, r25
     804:	4a 2b       	or	r20, r26
     806:	5b 2b       	or	r21, r27
     808:	ea 18       	sub	r14, r10
     80a:	fb 08       	sbc	r15, r11
     80c:	0c 09       	sbc	r16, r12
     80e:	1d 09       	sbc	r17, r13
     810:	b6 95       	lsr	r27
     812:	a7 95       	ror	r26
     814:	97 95       	ror	r25
     816:	87 95       	ror	r24
     818:	ee 0c       	add	r14, r14
     81a:	ff 1c       	adc	r15, r15
     81c:	00 1f       	adc	r16, r16
     81e:	11 1f       	adc	r17, r17
     820:	6f 5f       	subi	r22, 0xFF	; 255
     822:	7f 4f       	sbci	r23, 0xFF	; 255
     824:	6f 31       	cpi	r22, 0x1F	; 31
     826:	71 05       	cpc	r23, r1
     828:	31 f7       	brne	.-52     	; 0x7f6 <__divsf3+0xda>
     82a:	da 01       	movw	r26, r20
     82c:	c9 01       	movw	r24, r18
     82e:	8f 77       	andi	r24, 0x7F	; 127
     830:	90 70       	andi	r25, 0x00	; 0
     832:	a0 70       	andi	r26, 0x00	; 0
     834:	b0 70       	andi	r27, 0x00	; 0
     836:	80 34       	cpi	r24, 0x40	; 64
     838:	91 05       	cpc	r25, r1
     83a:	a1 05       	cpc	r26, r1
     83c:	b1 05       	cpc	r27, r1
     83e:	61 f4       	brne	.+24     	; 0x858 <__divsf3+0x13c>
     840:	27 fd       	sbrc	r18, 7
     842:	0a c0       	rjmp	.+20     	; 0x858 <__divsf3+0x13c>
     844:	e1 14       	cp	r14, r1
     846:	f1 04       	cpc	r15, r1
     848:	01 05       	cpc	r16, r1
     84a:	11 05       	cpc	r17, r1
     84c:	29 f0       	breq	.+10     	; 0x858 <__divsf3+0x13c>
     84e:	20 5c       	subi	r18, 0xC0	; 192
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	4f 4f       	sbci	r20, 0xFF	; 255
     854:	5f 4f       	sbci	r21, 0xFF	; 255
     856:	20 78       	andi	r18, 0x80	; 128
     858:	2d 87       	std	Y+13, r18	; 0x0d
     85a:	3e 87       	std	Y+14, r19	; 0x0e
     85c:	4f 87       	std	Y+15, r20	; 0x0f
     85e:	58 8b       	std	Y+16, r21	; 0x10
     860:	be 01       	movw	r22, r28
     862:	67 5f       	subi	r22, 0xF7	; 247
     864:	7f 4f       	sbci	r23, 0xFF	; 255
     866:	cb 01       	movw	r24, r22
     868:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__pack_f>
     86c:	68 96       	adiw	r28, 0x18	; 24
     86e:	ea e0       	ldi	r30, 0x0A	; 10
     870:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <__epilogue_restores__+0x10>

00000874 <__nesf2>:
     874:	a8 e1       	ldi	r26, 0x18	; 24
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e0 e4       	ldi	r30, 0x40	; 64
     87a:	f4 e0       	ldi	r31, 0x04	; 4
     87c:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__prologue_saves__+0x18>
     880:	69 83       	std	Y+1, r22	; 0x01
     882:	7a 83       	std	Y+2, r23	; 0x02
     884:	8b 83       	std	Y+3, r24	; 0x03
     886:	9c 83       	std	Y+4, r25	; 0x04
     888:	2d 83       	std	Y+5, r18	; 0x05
     88a:	3e 83       	std	Y+6, r19	; 0x06
     88c:	4f 83       	std	Y+7, r20	; 0x07
     88e:	58 87       	std	Y+8, r21	; 0x08
     890:	89 e0       	ldi	r24, 0x09	; 9
     892:	e8 2e       	mov	r14, r24
     894:	f1 2c       	mov	r15, r1
     896:	ec 0e       	add	r14, r28
     898:	fd 1e       	adc	r15, r29
     89a:	ce 01       	movw	r24, r28
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	b7 01       	movw	r22, r14
     8a0:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     8a4:	8e 01       	movw	r16, r28
     8a6:	0f 5e       	subi	r16, 0xEF	; 239
     8a8:	1f 4f       	sbci	r17, 0xFF	; 255
     8aa:	ce 01       	movw	r24, r28
     8ac:	05 96       	adiw	r24, 0x05	; 5
     8ae:	b8 01       	movw	r22, r16
     8b0:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     8b4:	89 85       	ldd	r24, Y+9	; 0x09
     8b6:	82 30       	cpi	r24, 0x02	; 2
     8b8:	40 f0       	brcs	.+16     	; 0x8ca <__nesf2+0x56>
     8ba:	89 89       	ldd	r24, Y+17	; 0x11
     8bc:	82 30       	cpi	r24, 0x02	; 2
     8be:	28 f0       	brcs	.+10     	; 0x8ca <__nesf2+0x56>
     8c0:	c7 01       	movw	r24, r14
     8c2:	b8 01       	movw	r22, r16
     8c4:	0e 94 48 07 	call	0xe90	; 0xe90 <__fpcmp_parts_f>
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <__nesf2+0x58>
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	68 96       	adiw	r28, 0x18	; 24
     8ce:	e6 e0       	ldi	r30, 0x06	; 6
     8d0:	0c 94 60 19 	jmp	0x32c0	; 0x32c0 <__epilogue_restores__+0x18>

000008d4 <__gtsf2>:
     8d4:	a8 e1       	ldi	r26, 0x18	; 24
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e0 e7       	ldi	r30, 0x70	; 112
     8da:	f4 e0       	ldi	r31, 0x04	; 4
     8dc:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__prologue_saves__+0x18>
     8e0:	69 83       	std	Y+1, r22	; 0x01
     8e2:	7a 83       	std	Y+2, r23	; 0x02
     8e4:	8b 83       	std	Y+3, r24	; 0x03
     8e6:	9c 83       	std	Y+4, r25	; 0x04
     8e8:	2d 83       	std	Y+5, r18	; 0x05
     8ea:	3e 83       	std	Y+6, r19	; 0x06
     8ec:	4f 83       	std	Y+7, r20	; 0x07
     8ee:	58 87       	std	Y+8, r21	; 0x08
     8f0:	89 e0       	ldi	r24, 0x09	; 9
     8f2:	e8 2e       	mov	r14, r24
     8f4:	f1 2c       	mov	r15, r1
     8f6:	ec 0e       	add	r14, r28
     8f8:	fd 1e       	adc	r15, r29
     8fa:	ce 01       	movw	r24, r28
     8fc:	01 96       	adiw	r24, 0x01	; 1
     8fe:	b7 01       	movw	r22, r14
     900:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     904:	8e 01       	movw	r16, r28
     906:	0f 5e       	subi	r16, 0xEF	; 239
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	ce 01       	movw	r24, r28
     90c:	05 96       	adiw	r24, 0x05	; 5
     90e:	b8 01       	movw	r22, r16
     910:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     914:	89 85       	ldd	r24, Y+9	; 0x09
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	40 f0       	brcs	.+16     	; 0x92a <__gtsf2+0x56>
     91a:	89 89       	ldd	r24, Y+17	; 0x11
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	28 f0       	brcs	.+10     	; 0x92a <__gtsf2+0x56>
     920:	c7 01       	movw	r24, r14
     922:	b8 01       	movw	r22, r16
     924:	0e 94 48 07 	call	0xe90	; 0xe90 <__fpcmp_parts_f>
     928:	01 c0       	rjmp	.+2      	; 0x92c <__gtsf2+0x58>
     92a:	8f ef       	ldi	r24, 0xFF	; 255
     92c:	68 96       	adiw	r28, 0x18	; 24
     92e:	e6 e0       	ldi	r30, 0x06	; 6
     930:	0c 94 60 19 	jmp	0x32c0	; 0x32c0 <__epilogue_restores__+0x18>

00000934 <__gesf2>:
     934:	a8 e1       	ldi	r26, 0x18	; 24
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e0 ea       	ldi	r30, 0xA0	; 160
     93a:	f4 e0       	ldi	r31, 0x04	; 4
     93c:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__prologue_saves__+0x18>
     940:	69 83       	std	Y+1, r22	; 0x01
     942:	7a 83       	std	Y+2, r23	; 0x02
     944:	8b 83       	std	Y+3, r24	; 0x03
     946:	9c 83       	std	Y+4, r25	; 0x04
     948:	2d 83       	std	Y+5, r18	; 0x05
     94a:	3e 83       	std	Y+6, r19	; 0x06
     94c:	4f 83       	std	Y+7, r20	; 0x07
     94e:	58 87       	std	Y+8, r21	; 0x08
     950:	89 e0       	ldi	r24, 0x09	; 9
     952:	e8 2e       	mov	r14, r24
     954:	f1 2c       	mov	r15, r1
     956:	ec 0e       	add	r14, r28
     958:	fd 1e       	adc	r15, r29
     95a:	ce 01       	movw	r24, r28
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	b7 01       	movw	r22, r14
     960:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     964:	8e 01       	movw	r16, r28
     966:	0f 5e       	subi	r16, 0xEF	; 239
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	ce 01       	movw	r24, r28
     96c:	05 96       	adiw	r24, 0x05	; 5
     96e:	b8 01       	movw	r22, r16
     970:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     974:	89 85       	ldd	r24, Y+9	; 0x09
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	40 f0       	brcs	.+16     	; 0x98a <__gesf2+0x56>
     97a:	89 89       	ldd	r24, Y+17	; 0x11
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	28 f0       	brcs	.+10     	; 0x98a <__gesf2+0x56>
     980:	c7 01       	movw	r24, r14
     982:	b8 01       	movw	r22, r16
     984:	0e 94 48 07 	call	0xe90	; 0xe90 <__fpcmp_parts_f>
     988:	01 c0       	rjmp	.+2      	; 0x98c <__gesf2+0x58>
     98a:	8f ef       	ldi	r24, 0xFF	; 255
     98c:	68 96       	adiw	r28, 0x18	; 24
     98e:	e6 e0       	ldi	r30, 0x06	; 6
     990:	0c 94 60 19 	jmp	0x32c0	; 0x32c0 <__epilogue_restores__+0x18>

00000994 <__ltsf2>:
     994:	a8 e1       	ldi	r26, 0x18	; 24
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	e0 ed       	ldi	r30, 0xD0	; 208
     99a:	f4 e0       	ldi	r31, 0x04	; 4
     99c:	0c 94 44 19 	jmp	0x3288	; 0x3288 <__prologue_saves__+0x18>
     9a0:	69 83       	std	Y+1, r22	; 0x01
     9a2:	7a 83       	std	Y+2, r23	; 0x02
     9a4:	8b 83       	std	Y+3, r24	; 0x03
     9a6:	9c 83       	std	Y+4, r25	; 0x04
     9a8:	2d 83       	std	Y+5, r18	; 0x05
     9aa:	3e 83       	std	Y+6, r19	; 0x06
     9ac:	4f 83       	std	Y+7, r20	; 0x07
     9ae:	58 87       	std	Y+8, r21	; 0x08
     9b0:	89 e0       	ldi	r24, 0x09	; 9
     9b2:	e8 2e       	mov	r14, r24
     9b4:	f1 2c       	mov	r15, r1
     9b6:	ec 0e       	add	r14, r28
     9b8:	fd 1e       	adc	r15, r29
     9ba:	ce 01       	movw	r24, r28
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	b7 01       	movw	r22, r14
     9c0:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     9c4:	8e 01       	movw	r16, r28
     9c6:	0f 5e       	subi	r16, 0xEF	; 239
     9c8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ca:	ce 01       	movw	r24, r28
     9cc:	05 96       	adiw	r24, 0x05	; 5
     9ce:	b8 01       	movw	r22, r16
     9d0:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     9d4:	89 85       	ldd	r24, Y+9	; 0x09
     9d6:	82 30       	cpi	r24, 0x02	; 2
     9d8:	40 f0       	brcs	.+16     	; 0x9ea <__ltsf2+0x56>
     9da:	89 89       	ldd	r24, Y+17	; 0x11
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	28 f0       	brcs	.+10     	; 0x9ea <__ltsf2+0x56>
     9e0:	c7 01       	movw	r24, r14
     9e2:	b8 01       	movw	r22, r16
     9e4:	0e 94 48 07 	call	0xe90	; 0xe90 <__fpcmp_parts_f>
     9e8:	01 c0       	rjmp	.+2      	; 0x9ec <__ltsf2+0x58>
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	68 96       	adiw	r28, 0x18	; 24
     9ee:	e6 e0       	ldi	r30, 0x06	; 6
     9f0:	0c 94 60 19 	jmp	0x32c0	; 0x32c0 <__epilogue_restores__+0x18>

000009f4 <__floatsisf>:
     9f4:	a8 e0       	ldi	r26, 0x08	; 8
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	e0 e0       	ldi	r30, 0x00	; 0
     9fa:	f5 e0       	ldi	r31, 0x05	; 5
     9fc:	0c 94 41 19 	jmp	0x3282	; 0x3282 <__prologue_saves__+0x12>
     a00:	9b 01       	movw	r18, r22
     a02:	ac 01       	movw	r20, r24
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	89 83       	std	Y+1, r24	; 0x01
     a08:	da 01       	movw	r26, r20
     a0a:	c9 01       	movw	r24, r18
     a0c:	88 27       	eor	r24, r24
     a0e:	b7 fd       	sbrc	r27, 7
     a10:	83 95       	inc	r24
     a12:	99 27       	eor	r25, r25
     a14:	aa 27       	eor	r26, r26
     a16:	bb 27       	eor	r27, r27
     a18:	b8 2e       	mov	r11, r24
     a1a:	21 15       	cp	r18, r1
     a1c:	31 05       	cpc	r19, r1
     a1e:	41 05       	cpc	r20, r1
     a20:	51 05       	cpc	r21, r1
     a22:	19 f4       	brne	.+6      	; 0xa2a <__floatsisf+0x36>
     a24:	82 e0       	ldi	r24, 0x02	; 2
     a26:	89 83       	std	Y+1, r24	; 0x01
     a28:	3a c0       	rjmp	.+116    	; 0xa9e <__floatsisf+0xaa>
     a2a:	88 23       	and	r24, r24
     a2c:	a9 f0       	breq	.+42     	; 0xa58 <__floatsisf+0x64>
     a2e:	20 30       	cpi	r18, 0x00	; 0
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	38 07       	cpc	r19, r24
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	48 07       	cpc	r20, r24
     a38:	80 e8       	ldi	r24, 0x80	; 128
     a3a:	58 07       	cpc	r21, r24
     a3c:	29 f4       	brne	.+10     	; 0xa48 <__floatsisf+0x54>
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	9f ec       	ldi	r25, 0xCF	; 207
     a46:	30 c0       	rjmp	.+96     	; 0xaa8 <__floatsisf+0xb4>
     a48:	ee 24       	eor	r14, r14
     a4a:	ff 24       	eor	r15, r15
     a4c:	87 01       	movw	r16, r14
     a4e:	e2 1a       	sub	r14, r18
     a50:	f3 0a       	sbc	r15, r19
     a52:	04 0b       	sbc	r16, r20
     a54:	15 0b       	sbc	r17, r21
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <__floatsisf+0x68>
     a58:	79 01       	movw	r14, r18
     a5a:	8a 01       	movw	r16, r20
     a5c:	8e e1       	ldi	r24, 0x1E	; 30
     a5e:	c8 2e       	mov	r12, r24
     a60:	d1 2c       	mov	r13, r1
     a62:	dc 82       	std	Y+4, r13	; 0x04
     a64:	cb 82       	std	Y+3, r12	; 0x03
     a66:	ed 82       	std	Y+5, r14	; 0x05
     a68:	fe 82       	std	Y+6, r15	; 0x06
     a6a:	0f 83       	std	Y+7, r16	; 0x07
     a6c:	18 87       	std	Y+8, r17	; 0x08
     a6e:	c8 01       	movw	r24, r16
     a70:	b7 01       	movw	r22, r14
     a72:	0e 94 ac 05 	call	0xb58	; 0xb58 <__clzsi2>
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	18 16       	cp	r1, r24
     a7a:	19 06       	cpc	r1, r25
     a7c:	84 f4       	brge	.+32     	; 0xa9e <__floatsisf+0xaa>
     a7e:	08 2e       	mov	r0, r24
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatsisf+0x96>
     a82:	ee 0c       	add	r14, r14
     a84:	ff 1c       	adc	r15, r15
     a86:	00 1f       	adc	r16, r16
     a88:	11 1f       	adc	r17, r17
     a8a:	0a 94       	dec	r0
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatsisf+0x8e>
     a8e:	ed 82       	std	Y+5, r14	; 0x05
     a90:	fe 82       	std	Y+6, r15	; 0x06
     a92:	0f 83       	std	Y+7, r16	; 0x07
     a94:	18 87       	std	Y+8, r17	; 0x08
     a96:	c8 1a       	sub	r12, r24
     a98:	d9 0a       	sbc	r13, r25
     a9a:	dc 82       	std	Y+4, r13	; 0x04
     a9c:	cb 82       	std	Y+3, r12	; 0x03
     a9e:	ba 82       	std	Y+2, r11	; 0x02
     aa0:	ce 01       	movw	r24, r28
     aa2:	01 96       	adiw	r24, 0x01	; 1
     aa4:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__pack_f>
     aa8:	28 96       	adiw	r28, 0x08	; 8
     aaa:	e9 e0       	ldi	r30, 0x09	; 9
     aac:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__epilogue_restores__+0x12>

00000ab0 <__fixsfsi>:
     ab0:	ac e0       	ldi	r26, 0x0C	; 12
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	ee e5       	ldi	r30, 0x5E	; 94
     ab6:	f5 e0       	ldi	r31, 0x05	; 5
     ab8:	0c 94 48 19 	jmp	0x3290	; 0x3290 <__prologue_saves__+0x20>
     abc:	69 83       	std	Y+1, r22	; 0x01
     abe:	7a 83       	std	Y+2, r23	; 0x02
     ac0:	8b 83       	std	Y+3, r24	; 0x03
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	ce 01       	movw	r24, r28
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	be 01       	movw	r22, r28
     aca:	6b 5f       	subi	r22, 0xFB	; 251
     acc:	7f 4f       	sbci	r23, 0xFF	; 255
     ace:	0e 94 d0 06 	call	0xda0	; 0xda0 <__unpack_f>
     ad2:	8d 81       	ldd	r24, Y+5	; 0x05
     ad4:	82 30       	cpi	r24, 0x02	; 2
     ad6:	61 f1       	breq	.+88     	; 0xb30 <__fixsfsi+0x80>
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	50 f1       	brcs	.+84     	; 0xb30 <__fixsfsi+0x80>
     adc:	84 30       	cpi	r24, 0x04	; 4
     ade:	21 f4       	brne	.+8      	; 0xae8 <__fixsfsi+0x38>
     ae0:	8e 81       	ldd	r24, Y+6	; 0x06
     ae2:	88 23       	and	r24, r24
     ae4:	51 f1       	breq	.+84     	; 0xb3a <__fixsfsi+0x8a>
     ae6:	2e c0       	rjmp	.+92     	; 0xb44 <__fixsfsi+0x94>
     ae8:	2f 81       	ldd	r18, Y+7	; 0x07
     aea:	38 85       	ldd	r19, Y+8	; 0x08
     aec:	37 fd       	sbrc	r19, 7
     aee:	20 c0       	rjmp	.+64     	; 0xb30 <__fixsfsi+0x80>
     af0:	6e 81       	ldd	r22, Y+6	; 0x06
     af2:	2f 31       	cpi	r18, 0x1F	; 31
     af4:	31 05       	cpc	r19, r1
     af6:	1c f0       	brlt	.+6      	; 0xafe <__fixsfsi+0x4e>
     af8:	66 23       	and	r22, r22
     afa:	f9 f0       	breq	.+62     	; 0xb3a <__fixsfsi+0x8a>
     afc:	23 c0       	rjmp	.+70     	; 0xb44 <__fixsfsi+0x94>
     afe:	8e e1       	ldi	r24, 0x1E	; 30
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	82 1b       	sub	r24, r18
     b04:	93 0b       	sbc	r25, r19
     b06:	29 85       	ldd	r18, Y+9	; 0x09
     b08:	3a 85       	ldd	r19, Y+10	; 0x0a
     b0a:	4b 85       	ldd	r20, Y+11	; 0x0b
     b0c:	5c 85       	ldd	r21, Y+12	; 0x0c
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__fixsfsi+0x68>
     b10:	56 95       	lsr	r21
     b12:	47 95       	ror	r20
     b14:	37 95       	ror	r19
     b16:	27 95       	ror	r18
     b18:	8a 95       	dec	r24
     b1a:	d2 f7       	brpl	.-12     	; 0xb10 <__fixsfsi+0x60>
     b1c:	66 23       	and	r22, r22
     b1e:	b1 f0       	breq	.+44     	; 0xb4c <__fixsfsi+0x9c>
     b20:	50 95       	com	r21
     b22:	40 95       	com	r20
     b24:	30 95       	com	r19
     b26:	21 95       	neg	r18
     b28:	3f 4f       	sbci	r19, 0xFF	; 255
     b2a:	4f 4f       	sbci	r20, 0xFF	; 255
     b2c:	5f 4f       	sbci	r21, 0xFF	; 255
     b2e:	0e c0       	rjmp	.+28     	; 0xb4c <__fixsfsi+0x9c>
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	40 e0       	ldi	r20, 0x00	; 0
     b36:	50 e0       	ldi	r21, 0x00	; 0
     b38:	09 c0       	rjmp	.+18     	; 0xb4c <__fixsfsi+0x9c>
     b3a:	2f ef       	ldi	r18, 0xFF	; 255
     b3c:	3f ef       	ldi	r19, 0xFF	; 255
     b3e:	4f ef       	ldi	r20, 0xFF	; 255
     b40:	5f e7       	ldi	r21, 0x7F	; 127
     b42:	04 c0       	rjmp	.+8      	; 0xb4c <__fixsfsi+0x9c>
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e8       	ldi	r21, 0x80	; 128
     b4c:	b9 01       	movw	r22, r18
     b4e:	ca 01       	movw	r24, r20
     b50:	2c 96       	adiw	r28, 0x0c	; 12
     b52:	e2 e0       	ldi	r30, 0x02	; 2
     b54:	0c 94 64 19 	jmp	0x32c8	; 0x32c8 <__epilogue_restores__+0x20>

00000b58 <__clzsi2>:
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	7b 01       	movw	r14, r22
     b62:	8c 01       	movw	r16, r24
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	e8 16       	cp	r14, r24
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	f8 06       	cpc	r15, r24
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	08 07       	cpc	r16, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	18 07       	cpc	r17, r24
     b74:	88 f4       	brcc	.+34     	; 0xb98 <__clzsi2+0x40>
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	e8 16       	cp	r14, r24
     b7a:	f1 04       	cpc	r15, r1
     b7c:	01 05       	cpc	r16, r1
     b7e:	11 05       	cpc	r17, r1
     b80:	31 f0       	breq	.+12     	; 0xb8e <__clzsi2+0x36>
     b82:	28 f0       	brcs	.+10     	; 0xb8e <__clzsi2+0x36>
     b84:	88 e0       	ldi	r24, 0x08	; 8
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a0 e0       	ldi	r26, 0x00	; 0
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	17 c0       	rjmp	.+46     	; 0xbbc <__clzsi2+0x64>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	12 c0       	rjmp	.+36     	; 0xbbc <__clzsi2+0x64>
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	e8 16       	cp	r14, r24
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	f8 06       	cpc	r15, r24
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	08 07       	cpc	r16, r24
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	18 07       	cpc	r17, r24
     ba8:	28 f0       	brcs	.+10     	; 0xbb4 <__clzsi2+0x5c>
     baa:	88 e1       	ldi	r24, 0x18	; 24
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	a0 e0       	ldi	r26, 0x00	; 0
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__clzsi2+0x64>
     bb4:	80 e1       	ldi	r24, 0x10	; 16
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	a0 e0       	ldi	r26, 0x00	; 0
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	20 e2       	ldi	r18, 0x20	; 32
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	28 1b       	sub	r18, r24
     bc6:	39 0b       	sbc	r19, r25
     bc8:	4a 0b       	sbc	r20, r26
     bca:	5b 0b       	sbc	r21, r27
     bcc:	04 c0       	rjmp	.+8      	; 0xbd6 <__clzsi2+0x7e>
     bce:	16 95       	lsr	r17
     bd0:	07 95       	ror	r16
     bd2:	f7 94       	ror	r15
     bd4:	e7 94       	ror	r14
     bd6:	8a 95       	dec	r24
     bd8:	d2 f7       	brpl	.-12     	; 0xbce <__clzsi2+0x76>
     bda:	f7 01       	movw	r30, r14
     bdc:	e5 57       	subi	r30, 0x75	; 117
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	80 81       	ld	r24, Z
     be2:	28 1b       	sub	r18, r24
     be4:	31 09       	sbc	r19, r1
     be6:	41 09       	sbc	r20, r1
     be8:	51 09       	sbc	r21, r1
     bea:	c9 01       	movw	r24, r18
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	08 95       	ret

00000bf6 <__pack_f>:
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	fc 01       	movw	r30, r24
     c02:	e4 80       	ldd	r14, Z+4	; 0x04
     c04:	f5 80       	ldd	r15, Z+5	; 0x05
     c06:	06 81       	ldd	r16, Z+6	; 0x06
     c08:	17 81       	ldd	r17, Z+7	; 0x07
     c0a:	d1 80       	ldd	r13, Z+1	; 0x01
     c0c:	80 81       	ld	r24, Z
     c0e:	82 30       	cpi	r24, 0x02	; 2
     c10:	48 f4       	brcc	.+18     	; 0xc24 <__pack_f+0x2e>
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	a0 e1       	ldi	r26, 0x10	; 16
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e8 2a       	or	r14, r24
     c1c:	f9 2a       	or	r15, r25
     c1e:	0a 2b       	or	r16, r26
     c20:	1b 2b       	or	r17, r27
     c22:	a5 c0       	rjmp	.+330    	; 0xd6e <__pack_f+0x178>
     c24:	84 30       	cpi	r24, 0x04	; 4
     c26:	09 f4       	brne	.+2      	; 0xc2a <__pack_f+0x34>
     c28:	9f c0       	rjmp	.+318    	; 0xd68 <__pack_f+0x172>
     c2a:	82 30       	cpi	r24, 0x02	; 2
     c2c:	21 f4       	brne	.+8      	; 0xc36 <__pack_f+0x40>
     c2e:	ee 24       	eor	r14, r14
     c30:	ff 24       	eor	r15, r15
     c32:	87 01       	movw	r16, r14
     c34:	05 c0       	rjmp	.+10     	; 0xc40 <__pack_f+0x4a>
     c36:	e1 14       	cp	r14, r1
     c38:	f1 04       	cpc	r15, r1
     c3a:	01 05       	cpc	r16, r1
     c3c:	11 05       	cpc	r17, r1
     c3e:	19 f4       	brne	.+6      	; 0xc46 <__pack_f+0x50>
     c40:	e0 e0       	ldi	r30, 0x00	; 0
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	96 c0       	rjmp	.+300    	; 0xd72 <__pack_f+0x17c>
     c46:	62 81       	ldd	r22, Z+2	; 0x02
     c48:	73 81       	ldd	r23, Z+3	; 0x03
     c4a:	9f ef       	ldi	r25, 0xFF	; 255
     c4c:	62 38       	cpi	r22, 0x82	; 130
     c4e:	79 07       	cpc	r23, r25
     c50:	0c f0       	brlt	.+2      	; 0xc54 <__pack_f+0x5e>
     c52:	5b c0       	rjmp	.+182    	; 0xd0a <__pack_f+0x114>
     c54:	22 e8       	ldi	r18, 0x82	; 130
     c56:	3f ef       	ldi	r19, 0xFF	; 255
     c58:	26 1b       	sub	r18, r22
     c5a:	37 0b       	sbc	r19, r23
     c5c:	2a 31       	cpi	r18, 0x1A	; 26
     c5e:	31 05       	cpc	r19, r1
     c60:	2c f0       	brlt	.+10     	; 0xc6c <__pack_f+0x76>
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	50 e0       	ldi	r21, 0x00	; 0
     c6a:	2a c0       	rjmp	.+84     	; 0xcc0 <__pack_f+0xca>
     c6c:	b8 01       	movw	r22, r16
     c6e:	a7 01       	movw	r20, r14
     c70:	02 2e       	mov	r0, r18
     c72:	04 c0       	rjmp	.+8      	; 0xc7c <__pack_f+0x86>
     c74:	76 95       	lsr	r23
     c76:	67 95       	ror	r22
     c78:	57 95       	ror	r21
     c7a:	47 95       	ror	r20
     c7c:	0a 94       	dec	r0
     c7e:	d2 f7       	brpl	.-12     	; 0xc74 <__pack_f+0x7e>
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	a0 e0       	ldi	r26, 0x00	; 0
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	04 c0       	rjmp	.+8      	; 0xc92 <__pack_f+0x9c>
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	aa 1f       	adc	r26, r26
     c90:	bb 1f       	adc	r27, r27
     c92:	2a 95       	dec	r18
     c94:	d2 f7       	brpl	.-12     	; 0xc8a <__pack_f+0x94>
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	a1 09       	sbc	r26, r1
     c9a:	b1 09       	sbc	r27, r1
     c9c:	8e 21       	and	r24, r14
     c9e:	9f 21       	and	r25, r15
     ca0:	a0 23       	and	r26, r16
     ca2:	b1 23       	and	r27, r17
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	a1 05       	cpc	r26, r1
     ca8:	b1 05       	cpc	r27, r1
     caa:	21 f0       	breq	.+8      	; 0xcb4 <__pack_f+0xbe>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	9a 01       	movw	r18, r20
     cb6:	ab 01       	movw	r20, r22
     cb8:	28 2b       	or	r18, r24
     cba:	39 2b       	or	r19, r25
     cbc:	4a 2b       	or	r20, r26
     cbe:	5b 2b       	or	r21, r27
     cc0:	da 01       	movw	r26, r20
     cc2:	c9 01       	movw	r24, r18
     cc4:	8f 77       	andi	r24, 0x7F	; 127
     cc6:	90 70       	andi	r25, 0x00	; 0
     cc8:	a0 70       	andi	r26, 0x00	; 0
     cca:	b0 70       	andi	r27, 0x00	; 0
     ccc:	80 34       	cpi	r24, 0x40	; 64
     cce:	91 05       	cpc	r25, r1
     cd0:	a1 05       	cpc	r26, r1
     cd2:	b1 05       	cpc	r27, r1
     cd4:	39 f4       	brne	.+14     	; 0xce4 <__pack_f+0xee>
     cd6:	27 ff       	sbrs	r18, 7
     cd8:	09 c0       	rjmp	.+18     	; 0xcec <__pack_f+0xf6>
     cda:	20 5c       	subi	r18, 0xC0	; 192
     cdc:	3f 4f       	sbci	r19, 0xFF	; 255
     cde:	4f 4f       	sbci	r20, 0xFF	; 255
     ce0:	5f 4f       	sbci	r21, 0xFF	; 255
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <__pack_f+0xf6>
     ce4:	21 5c       	subi	r18, 0xC1	; 193
     ce6:	3f 4f       	sbci	r19, 0xFF	; 255
     ce8:	4f 4f       	sbci	r20, 0xFF	; 255
     cea:	5f 4f       	sbci	r21, 0xFF	; 255
     cec:	e0 e0       	ldi	r30, 0x00	; 0
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	20 30       	cpi	r18, 0x00	; 0
     cf2:	a0 e0       	ldi	r26, 0x00	; 0
     cf4:	3a 07       	cpc	r19, r26
     cf6:	a0 e0       	ldi	r26, 0x00	; 0
     cf8:	4a 07       	cpc	r20, r26
     cfa:	a0 e4       	ldi	r26, 0x40	; 64
     cfc:	5a 07       	cpc	r21, r26
     cfe:	10 f0       	brcs	.+4      	; 0xd04 <__pack_f+0x10e>
     d00:	e1 e0       	ldi	r30, 0x01	; 1
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	79 01       	movw	r14, r18
     d06:	8a 01       	movw	r16, r20
     d08:	27 c0       	rjmp	.+78     	; 0xd58 <__pack_f+0x162>
     d0a:	60 38       	cpi	r22, 0x80	; 128
     d0c:	71 05       	cpc	r23, r1
     d0e:	64 f5       	brge	.+88     	; 0xd68 <__pack_f+0x172>
     d10:	fb 01       	movw	r30, r22
     d12:	e1 58       	subi	r30, 0x81	; 129
     d14:	ff 4f       	sbci	r31, 0xFF	; 255
     d16:	d8 01       	movw	r26, r16
     d18:	c7 01       	movw	r24, r14
     d1a:	8f 77       	andi	r24, 0x7F	; 127
     d1c:	90 70       	andi	r25, 0x00	; 0
     d1e:	a0 70       	andi	r26, 0x00	; 0
     d20:	b0 70       	andi	r27, 0x00	; 0
     d22:	80 34       	cpi	r24, 0x40	; 64
     d24:	91 05       	cpc	r25, r1
     d26:	a1 05       	cpc	r26, r1
     d28:	b1 05       	cpc	r27, r1
     d2a:	39 f4       	brne	.+14     	; 0xd3a <__pack_f+0x144>
     d2c:	e7 fe       	sbrs	r14, 7
     d2e:	0d c0       	rjmp	.+26     	; 0xd4a <__pack_f+0x154>
     d30:	80 e4       	ldi	r24, 0x40	; 64
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	a0 e0       	ldi	r26, 0x00	; 0
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	04 c0       	rjmp	.+8      	; 0xd42 <__pack_f+0x14c>
     d3a:	8f e3       	ldi	r24, 0x3F	; 63
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 e0       	ldi	r26, 0x00	; 0
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e8 0e       	add	r14, r24
     d44:	f9 1e       	adc	r15, r25
     d46:	0a 1f       	adc	r16, r26
     d48:	1b 1f       	adc	r17, r27
     d4a:	17 ff       	sbrs	r17, 7
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <__pack_f+0x162>
     d4e:	16 95       	lsr	r17
     d50:	07 95       	ror	r16
     d52:	f7 94       	ror	r15
     d54:	e7 94       	ror	r14
     d56:	31 96       	adiw	r30, 0x01	; 1
     d58:	87 e0       	ldi	r24, 0x07	; 7
     d5a:	16 95       	lsr	r17
     d5c:	07 95       	ror	r16
     d5e:	f7 94       	ror	r15
     d60:	e7 94       	ror	r14
     d62:	8a 95       	dec	r24
     d64:	d1 f7       	brne	.-12     	; 0xd5a <__pack_f+0x164>
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <__pack_f+0x17c>
     d68:	ee 24       	eor	r14, r14
     d6a:	ff 24       	eor	r15, r15
     d6c:	87 01       	movw	r16, r14
     d6e:	ef ef       	ldi	r30, 0xFF	; 255
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	6e 2f       	mov	r22, r30
     d74:	67 95       	ror	r22
     d76:	66 27       	eor	r22, r22
     d78:	67 95       	ror	r22
     d7a:	90 2f       	mov	r25, r16
     d7c:	9f 77       	andi	r25, 0x7F	; 127
     d7e:	d7 94       	ror	r13
     d80:	dd 24       	eor	r13, r13
     d82:	d7 94       	ror	r13
     d84:	8e 2f       	mov	r24, r30
     d86:	86 95       	lsr	r24
     d88:	49 2f       	mov	r20, r25
     d8a:	46 2b       	or	r20, r22
     d8c:	58 2f       	mov	r21, r24
     d8e:	5d 29       	or	r21, r13
     d90:	b7 01       	movw	r22, r14
     d92:	ca 01       	movw	r24, r20
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	08 95       	ret

00000da0 <__unpack_f>:
     da0:	fc 01       	movw	r30, r24
     da2:	db 01       	movw	r26, r22
     da4:	40 81       	ld	r20, Z
     da6:	51 81       	ldd	r21, Z+1	; 0x01
     da8:	22 81       	ldd	r18, Z+2	; 0x02
     daa:	62 2f       	mov	r22, r18
     dac:	6f 77       	andi	r22, 0x7F	; 127
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	22 1f       	adc	r18, r18
     db2:	22 27       	eor	r18, r18
     db4:	22 1f       	adc	r18, r18
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	89 2f       	mov	r24, r25
     dba:	88 0f       	add	r24, r24
     dbc:	82 2b       	or	r24, r18
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	99 1f       	adc	r25, r25
     dc4:	99 27       	eor	r25, r25
     dc6:	99 1f       	adc	r25, r25
     dc8:	11 96       	adiw	r26, 0x01	; 1
     dca:	9c 93       	st	X, r25
     dcc:	11 97       	sbiw	r26, 0x01	; 1
     dce:	21 15       	cp	r18, r1
     dd0:	31 05       	cpc	r19, r1
     dd2:	a9 f5       	brne	.+106    	; 0xe3e <__unpack_f+0x9e>
     dd4:	41 15       	cp	r20, r1
     dd6:	51 05       	cpc	r21, r1
     dd8:	61 05       	cpc	r22, r1
     dda:	71 05       	cpc	r23, r1
     ddc:	11 f4       	brne	.+4      	; 0xde2 <__unpack_f+0x42>
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	37 c0       	rjmp	.+110    	; 0xe50 <__unpack_f+0xb0>
     de2:	82 e8       	ldi	r24, 0x82	; 130
     de4:	9f ef       	ldi	r25, 0xFF	; 255
     de6:	13 96       	adiw	r26, 0x03	; 3
     de8:	9c 93       	st	X, r25
     dea:	8e 93       	st	-X, r24
     dec:	12 97       	sbiw	r26, 0x02	; 2
     dee:	9a 01       	movw	r18, r20
     df0:	ab 01       	movw	r20, r22
     df2:	67 e0       	ldi	r22, 0x07	; 7
     df4:	22 0f       	add	r18, r18
     df6:	33 1f       	adc	r19, r19
     df8:	44 1f       	adc	r20, r20
     dfa:	55 1f       	adc	r21, r21
     dfc:	6a 95       	dec	r22
     dfe:	d1 f7       	brne	.-12     	; 0xdf4 <__unpack_f+0x54>
     e00:	83 e0       	ldi	r24, 0x03	; 3
     e02:	8c 93       	st	X, r24
     e04:	0d c0       	rjmp	.+26     	; 0xe20 <__unpack_f+0x80>
     e06:	22 0f       	add	r18, r18
     e08:	33 1f       	adc	r19, r19
     e0a:	44 1f       	adc	r20, r20
     e0c:	55 1f       	adc	r21, r21
     e0e:	12 96       	adiw	r26, 0x02	; 2
     e10:	8d 91       	ld	r24, X+
     e12:	9c 91       	ld	r25, X
     e14:	13 97       	sbiw	r26, 0x03	; 3
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	13 96       	adiw	r26, 0x03	; 3
     e1a:	9c 93       	st	X, r25
     e1c:	8e 93       	st	-X, r24
     e1e:	12 97       	sbiw	r26, 0x02	; 2
     e20:	20 30       	cpi	r18, 0x00	; 0
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	38 07       	cpc	r19, r24
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	48 07       	cpc	r20, r24
     e2a:	80 e4       	ldi	r24, 0x40	; 64
     e2c:	58 07       	cpc	r21, r24
     e2e:	58 f3       	brcs	.-42     	; 0xe06 <__unpack_f+0x66>
     e30:	14 96       	adiw	r26, 0x04	; 4
     e32:	2d 93       	st	X+, r18
     e34:	3d 93       	st	X+, r19
     e36:	4d 93       	st	X+, r20
     e38:	5c 93       	st	X, r21
     e3a:	17 97       	sbiw	r26, 0x07	; 7
     e3c:	08 95       	ret
     e3e:	2f 3f       	cpi	r18, 0xFF	; 255
     e40:	31 05       	cpc	r19, r1
     e42:	79 f4       	brne	.+30     	; 0xe62 <__unpack_f+0xc2>
     e44:	41 15       	cp	r20, r1
     e46:	51 05       	cpc	r21, r1
     e48:	61 05       	cpc	r22, r1
     e4a:	71 05       	cpc	r23, r1
     e4c:	19 f4       	brne	.+6      	; 0xe54 <__unpack_f+0xb4>
     e4e:	84 e0       	ldi	r24, 0x04	; 4
     e50:	8c 93       	st	X, r24
     e52:	08 95       	ret
     e54:	64 ff       	sbrs	r22, 4
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <__unpack_f+0xbe>
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	8c 93       	st	X, r24
     e5c:	12 c0       	rjmp	.+36     	; 0xe82 <__unpack_f+0xe2>
     e5e:	1c 92       	st	X, r1
     e60:	10 c0       	rjmp	.+32     	; 0xe82 <__unpack_f+0xe2>
     e62:	2f 57       	subi	r18, 0x7F	; 127
     e64:	30 40       	sbci	r19, 0x00	; 0
     e66:	13 96       	adiw	r26, 0x03	; 3
     e68:	3c 93       	st	X, r19
     e6a:	2e 93       	st	-X, r18
     e6c:	12 97       	sbiw	r26, 0x02	; 2
     e6e:	83 e0       	ldi	r24, 0x03	; 3
     e70:	8c 93       	st	X, r24
     e72:	87 e0       	ldi	r24, 0x07	; 7
     e74:	44 0f       	add	r20, r20
     e76:	55 1f       	adc	r21, r21
     e78:	66 1f       	adc	r22, r22
     e7a:	77 1f       	adc	r23, r23
     e7c:	8a 95       	dec	r24
     e7e:	d1 f7       	brne	.-12     	; 0xe74 <__unpack_f+0xd4>
     e80:	70 64       	ori	r23, 0x40	; 64
     e82:	14 96       	adiw	r26, 0x04	; 4
     e84:	4d 93       	st	X+, r20
     e86:	5d 93       	st	X+, r21
     e88:	6d 93       	st	X+, r22
     e8a:	7c 93       	st	X, r23
     e8c:	17 97       	sbiw	r26, 0x07	; 7
     e8e:	08 95       	ret

00000e90 <__fpcmp_parts_f>:
     e90:	1f 93       	push	r17
     e92:	dc 01       	movw	r26, r24
     e94:	fb 01       	movw	r30, r22
     e96:	9c 91       	ld	r25, X
     e98:	92 30       	cpi	r25, 0x02	; 2
     e9a:	08 f4       	brcc	.+2      	; 0xe9e <__fpcmp_parts_f+0xe>
     e9c:	47 c0       	rjmp	.+142    	; 0xf2c <__fpcmp_parts_f+0x9c>
     e9e:	80 81       	ld	r24, Z
     ea0:	82 30       	cpi	r24, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0x16>
     ea4:	43 c0       	rjmp	.+134    	; 0xf2c <__fpcmp_parts_f+0x9c>
     ea6:	94 30       	cpi	r25, 0x04	; 4
     ea8:	51 f4       	brne	.+20     	; 0xebe <__fpcmp_parts_f+0x2e>
     eaa:	11 96       	adiw	r26, 0x01	; 1
     eac:	1c 91       	ld	r17, X
     eae:	84 30       	cpi	r24, 0x04	; 4
     eb0:	99 f5       	brne	.+102    	; 0xf18 <__fpcmp_parts_f+0x88>
     eb2:	81 81       	ldd	r24, Z+1	; 0x01
     eb4:	68 2f       	mov	r22, r24
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	61 1b       	sub	r22, r17
     eba:	71 09       	sbc	r23, r1
     ebc:	3f c0       	rjmp	.+126    	; 0xf3c <__fpcmp_parts_f+0xac>
     ebe:	84 30       	cpi	r24, 0x04	; 4
     ec0:	21 f0       	breq	.+8      	; 0xeca <__fpcmp_parts_f+0x3a>
     ec2:	92 30       	cpi	r25, 0x02	; 2
     ec4:	31 f4       	brne	.+12     	; 0xed2 <__fpcmp_parts_f+0x42>
     ec6:	82 30       	cpi	r24, 0x02	; 2
     ec8:	b9 f1       	breq	.+110    	; 0xf38 <__fpcmp_parts_f+0xa8>
     eca:	81 81       	ldd	r24, Z+1	; 0x01
     ecc:	88 23       	and	r24, r24
     ece:	89 f1       	breq	.+98     	; 0xf32 <__fpcmp_parts_f+0xa2>
     ed0:	2d c0       	rjmp	.+90     	; 0xf2c <__fpcmp_parts_f+0x9c>
     ed2:	11 96       	adiw	r26, 0x01	; 1
     ed4:	1c 91       	ld	r17, X
     ed6:	11 97       	sbiw	r26, 0x01	; 1
     ed8:	82 30       	cpi	r24, 0x02	; 2
     eda:	f1 f0       	breq	.+60     	; 0xf18 <__fpcmp_parts_f+0x88>
     edc:	81 81       	ldd	r24, Z+1	; 0x01
     ede:	18 17       	cp	r17, r24
     ee0:	d9 f4       	brne	.+54     	; 0xf18 <__fpcmp_parts_f+0x88>
     ee2:	12 96       	adiw	r26, 0x02	; 2
     ee4:	2d 91       	ld	r18, X+
     ee6:	3c 91       	ld	r19, X
     ee8:	13 97       	sbiw	r26, 0x03	; 3
     eea:	82 81       	ldd	r24, Z+2	; 0x02
     eec:	93 81       	ldd	r25, Z+3	; 0x03
     eee:	82 17       	cp	r24, r18
     ef0:	93 07       	cpc	r25, r19
     ef2:	94 f0       	brlt	.+36     	; 0xf18 <__fpcmp_parts_f+0x88>
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	bc f0       	brlt	.+46     	; 0xf28 <__fpcmp_parts_f+0x98>
     efa:	14 96       	adiw	r26, 0x04	; 4
     efc:	8d 91       	ld	r24, X+
     efe:	9d 91       	ld	r25, X+
     f00:	0d 90       	ld	r0, X+
     f02:	bc 91       	ld	r27, X
     f04:	a0 2d       	mov	r26, r0
     f06:	24 81       	ldd	r18, Z+4	; 0x04
     f08:	35 81       	ldd	r19, Z+5	; 0x05
     f0a:	46 81       	ldd	r20, Z+6	; 0x06
     f0c:	57 81       	ldd	r21, Z+7	; 0x07
     f0e:	28 17       	cp	r18, r24
     f10:	39 07       	cpc	r19, r25
     f12:	4a 07       	cpc	r20, r26
     f14:	5b 07       	cpc	r21, r27
     f16:	18 f4       	brcc	.+6      	; 0xf1e <__fpcmp_parts_f+0x8e>
     f18:	11 23       	and	r17, r17
     f1a:	41 f0       	breq	.+16     	; 0xf2c <__fpcmp_parts_f+0x9c>
     f1c:	0a c0       	rjmp	.+20     	; 0xf32 <__fpcmp_parts_f+0xa2>
     f1e:	82 17       	cp	r24, r18
     f20:	93 07       	cpc	r25, r19
     f22:	a4 07       	cpc	r26, r20
     f24:	b5 07       	cpc	r27, r21
     f26:	40 f4       	brcc	.+16     	; 0xf38 <__fpcmp_parts_f+0xa8>
     f28:	11 23       	and	r17, r17
     f2a:	19 f0       	breq	.+6      	; 0xf32 <__fpcmp_parts_f+0xa2>
     f2c:	61 e0       	ldi	r22, 0x01	; 1
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <__fpcmp_parts_f+0xac>
     f32:	6f ef       	ldi	r22, 0xFF	; 255
     f34:	7f ef       	ldi	r23, 0xFF	; 255
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <__fpcmp_parts_f+0xac>
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	cb 01       	movw	r24, r22
     f3e:	1f 91       	pop	r17
     f40:	08 95       	ret

00000f42 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	00 d0       	rcall	.+0      	; 0xf48 <GPIO_setupPinDirection+0x6>
     f48:	00 d0       	rcall	.+0      	; 0xf4a <GPIO_setupPinDirection+0x8>
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	6a 83       	std	Y+2, r22	; 0x02
     f54:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <GPIO_setupPinDirection+0x1c>
     f5c:	d5 c0       	rjmp	.+426    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	84 30       	cpi	r24, 0x04	; 4
     f62:	08 f0       	brcs	.+2      	; 0xf66 <GPIO_setupPinDirection+0x24>
     f64:	d1 c0       	rjmp	.+418    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	3d 83       	std	Y+5, r19	; 0x05
     f6e:	2c 83       	std	Y+4, r18	; 0x04
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	9d 81       	ldd	r25, Y+5	; 0x05
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	91 05       	cpc	r25, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <GPIO_setupPinDirection+0x3a>
     f7a:	43 c0       	rjmp	.+134    	; 0x1002 <GPIO_setupPinDirection+0xc0>
     f7c:	2c 81       	ldd	r18, Y+4	; 0x04
     f7e:	3d 81       	ldd	r19, Y+5	; 0x05
     f80:	22 30       	cpi	r18, 0x02	; 2
     f82:	31 05       	cpc	r19, r1
     f84:	2c f4       	brge	.+10     	; 0xf90 <GPIO_setupPinDirection+0x4e>
     f86:	8c 81       	ldd	r24, Y+4	; 0x04
     f88:	9d 81       	ldd	r25, Y+5	; 0x05
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	71 f0       	breq	.+28     	; 0xfaa <GPIO_setupPinDirection+0x68>
     f8e:	bc c0       	rjmp	.+376    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
     f90:	2c 81       	ldd	r18, Y+4	; 0x04
     f92:	3d 81       	ldd	r19, Y+5	; 0x05
     f94:	22 30       	cpi	r18, 0x02	; 2
     f96:	31 05       	cpc	r19, r1
     f98:	09 f4       	brne	.+2      	; 0xf9c <GPIO_setupPinDirection+0x5a>
     f9a:	5f c0       	rjmp	.+190    	; 0x105a <GPIO_setupPinDirection+0x118>
     f9c:	8c 81       	ldd	r24, Y+4	; 0x04
     f9e:	9d 81       	ldd	r25, Y+5	; 0x05
     fa0:	83 30       	cpi	r24, 0x03	; 3
     fa2:	91 05       	cpc	r25, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <GPIO_setupPinDirection+0x66>
     fa6:	85 c0       	rjmp	.+266    	; 0x10b2 <GPIO_setupPinDirection+0x170>
     fa8:	af c0       	rjmp	.+350    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	81 30       	cpi	r24, 0x01	; 1
     fae:	a1 f4       	brne	.+40     	; 0xfd8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     fb0:	aa e3       	ldi	r26, 0x3A	; 58
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ea e3       	ldi	r30, 0x3A	; 58
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	48 2f       	mov	r20, r24
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 2e       	mov	r0, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_setupPinDirection+0x8c>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_setupPinDirection+0x88>
     fd2:	84 2b       	or	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	98 c0       	rjmp	.+304    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     fd8:	aa e3       	ldi	r26, 0x3A	; 58
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	ea e3       	ldi	r30, 0x3A	; 58
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <GPIO_setupPinDirection+0xb4>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <GPIO_setupPinDirection+0xb0>
     ffa:	80 95       	com	r24
     ffc:	84 23       	and	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	83 c0       	rjmp	.+262    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	a1 f4       	brne	.+40     	; 0x1030 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1008:	a7 e3       	ldi	r26, 0x37	; 55
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	e7 e3       	ldi	r30, 0x37	; 55
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	48 2f       	mov	r20, r24
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 2e       	mov	r0, r18
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <GPIO_setupPinDirection+0xe4>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <GPIO_setupPinDirection+0xe0>
    102a:	84 2b       	or	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	6c c0       	rjmp	.+216    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1030:	a7 e3       	ldi	r26, 0x37	; 55
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e7 e3       	ldi	r30, 0x37	; 55
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_setupPinDirection+0x10c>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_setupPinDirection+0x108>
    1052:	80 95       	com	r24
    1054:	84 23       	and	r24, r20
    1056:	8c 93       	st	X, r24
    1058:	57 c0       	rjmp	.+174    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	a1 f4       	brne	.+40     	; 0x1088 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1060:	a4 e3       	ldi	r26, 0x34	; 52
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e4 e3       	ldi	r30, 0x34	; 52
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_setupPinDirection+0x13c>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_setupPinDirection+0x138>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	40 c0       	rjmp	.+128    	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1088:	a4 e3       	ldi	r26, 0x34	; 52
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e4 e3       	ldi	r30, 0x34	; 52
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <GPIO_setupPinDirection+0x164>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <GPIO_setupPinDirection+0x160>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	2b c0       	rjmp	.+86     	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	81 30       	cpi	r24, 0x01	; 1
    10b6:	a1 f4       	brne	.+40     	; 0x10e0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    10b8:	a1 e3       	ldi	r26, 0x31	; 49
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e1 e3       	ldi	r30, 0x31	; 49
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <GPIO_setupPinDirection+0x194>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <GPIO_setupPinDirection+0x190>
    10da:	84 2b       	or	r24, r20
    10dc:	8c 93       	st	X, r24
    10de:	14 c0       	rjmp	.+40     	; 0x1108 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    10e0:	a1 e3       	ldi	r26, 0x31	; 49
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e1 e3       	ldi	r30, 0x31	; 49
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <GPIO_setupPinDirection+0x1bc>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <GPIO_setupPinDirection+0x1b8>
    1102:	80 95       	com	r24
    1104:	84 23       	and	r24, r20
    1106:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	00 d0       	rcall	.+0      	; 0x111e <GPIO_writePin+0x6>
    111e:	00 d0       	rcall	.+0      	; 0x1120 <GPIO_writePin+0x8>
    1120:	0f 92       	push	r0
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	6a 83       	std	Y+2, r22	; 0x02
    112a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    112c:	8a 81       	ldd	r24, Y+2	; 0x02
    112e:	88 30       	cpi	r24, 0x08	; 8
    1130:	08 f0       	brcs	.+2      	; 0x1134 <GPIO_writePin+0x1c>
    1132:	d5 c0       	rjmp	.+426    	; 0x12de <GPIO_writePin+0x1c6>
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	84 30       	cpi	r24, 0x04	; 4
    1138:	08 f0       	brcs	.+2      	; 0x113c <GPIO_writePin+0x24>
    113a:	d1 c0       	rjmp	.+418    	; 0x12de <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3d 83       	std	Y+5, r19	; 0x05
    1144:	2c 83       	std	Y+4, r18	; 0x04
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	9d 81       	ldd	r25, Y+5	; 0x05
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	91 05       	cpc	r25, r1
    114e:	09 f4       	brne	.+2      	; 0x1152 <GPIO_writePin+0x3a>
    1150:	43 c0       	rjmp	.+134    	; 0x11d8 <GPIO_writePin+0xc0>
    1152:	2c 81       	ldd	r18, Y+4	; 0x04
    1154:	3d 81       	ldd	r19, Y+5	; 0x05
    1156:	22 30       	cpi	r18, 0x02	; 2
    1158:	31 05       	cpc	r19, r1
    115a:	2c f4       	brge	.+10     	; 0x1166 <GPIO_writePin+0x4e>
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	71 f0       	breq	.+28     	; 0x1180 <GPIO_writePin+0x68>
    1164:	bc c0       	rjmp	.+376    	; 0x12de <GPIO_writePin+0x1c6>
    1166:	2c 81       	ldd	r18, Y+4	; 0x04
    1168:	3d 81       	ldd	r19, Y+5	; 0x05
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <GPIO_writePin+0x5a>
    1170:	5f c0       	rjmp	.+190    	; 0x1230 <GPIO_writePin+0x118>
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <GPIO_writePin+0x66>
    117c:	85 c0       	rjmp	.+266    	; 0x1288 <GPIO_writePin+0x170>
    117e:	af c0       	rjmp	.+350    	; 0x12de <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	81 30       	cpi	r24, 0x01	; 1
    1184:	a1 f4       	brne	.+40     	; 0x11ae <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1186:	ab e3       	ldi	r26, 0x3B	; 59
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	48 2f       	mov	r20, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <GPIO_writePin+0x8c>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <GPIO_writePin+0x88>
    11a8:	84 2b       	or	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	98 c0       	rjmp	.+304    	; 0x12de <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    11ae:	ab e3       	ldi	r26, 0x3B	; 59
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	eb e3       	ldi	r30, 0x3B	; 59
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <GPIO_writePin+0xb4>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <GPIO_writePin+0xb0>
    11d0:	80 95       	com	r24
    11d2:	84 23       	and	r24, r20
    11d4:	8c 93       	st	X, r24
    11d6:	83 c0       	rjmp	.+262    	; 0x12de <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	a1 f4       	brne	.+40     	; 0x1206 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    11de:	a8 e3       	ldi	r26, 0x38	; 56
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e8 e3       	ldi	r30, 0x38	; 56
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 2e       	mov	r0, r18
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <GPIO_writePin+0xe4>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	0a 94       	dec	r0
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <GPIO_writePin+0xe0>
    1200:	84 2b       	or	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	6c c0       	rjmp	.+216    	; 0x12de <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1206:	a8 e3       	ldi	r26, 0x38	; 56
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e8 e3       	ldi	r30, 0x38	; 56
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <GPIO_writePin+0x10c>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <GPIO_writePin+0x108>
    1228:	80 95       	com	r24
    122a:	84 23       	and	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	57 c0       	rjmp	.+174    	; 0x12de <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	a1 f4       	brne	.+40     	; 0x125e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1236:	a5 e3       	ldi	r26, 0x35	; 53
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e5 e3       	ldi	r30, 0x35	; 53
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <GPIO_writePin+0x13c>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <GPIO_writePin+0x138>
    1258:	84 2b       	or	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	40 c0       	rjmp	.+128    	; 0x12de <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    125e:	a5 e3       	ldi	r26, 0x35	; 53
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e3       	ldi	r30, 0x35	; 53
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <GPIO_writePin+0x164>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <GPIO_writePin+0x160>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	2b c0       	rjmp	.+86     	; 0x12de <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	a1 f4       	brne	.+40     	; 0x12b6 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    128e:	a2 e3       	ldi	r26, 0x32	; 50
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e2 e3       	ldi	r30, 0x32	; 50
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 2e       	mov	r0, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <GPIO_writePin+0x194>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <GPIO_writePin+0x190>
    12b0:	84 2b       	or	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	14 c0       	rjmp	.+40     	; 0x12de <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    12b6:	a2 e3       	ldi	r26, 0x32	; 50
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e2 e3       	ldi	r30, 0x32	; 50
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <GPIO_writePin+0x1bc>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <GPIO_writePin+0x1b8>
    12d8:	80 95       	com	r24
    12da:	84 23       	and	r24, r20
    12dc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <GPIO_readPin+0x6>
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <GPIO_readPin+0x8>
    12f6:	0f 92       	push	r0
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
    12fc:	8a 83       	std	Y+2, r24	; 0x02
    12fe:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1300:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	88 30       	cpi	r24, 0x08	; 8
    1306:	08 f0       	brcs	.+2      	; 0x130a <GPIO_readPin+0x1c>
    1308:	84 c0       	rjmp	.+264    	; 0x1412 <GPIO_readPin+0x124>
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	84 30       	cpi	r24, 0x04	; 4
    130e:	08 f0       	brcs	.+2      	; 0x1312 <GPIO_readPin+0x24>
    1310:	80 c0       	rjmp	.+256    	; 0x1412 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	3d 83       	std	Y+5, r19	; 0x05
    131a:	2c 83       	std	Y+4, r18	; 0x04
    131c:	4c 81       	ldd	r20, Y+4	; 0x04
    131e:	5d 81       	ldd	r21, Y+5	; 0x05
    1320:	41 30       	cpi	r20, 0x01	; 1
    1322:	51 05       	cpc	r21, r1
    1324:	79 f1       	breq	.+94     	; 0x1384 <GPIO_readPin+0x96>
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	9d 81       	ldd	r25, Y+5	; 0x05
    132a:	82 30       	cpi	r24, 0x02	; 2
    132c:	91 05       	cpc	r25, r1
    132e:	34 f4       	brge	.+12     	; 0x133c <GPIO_readPin+0x4e>
    1330:	2c 81       	ldd	r18, Y+4	; 0x04
    1332:	3d 81       	ldd	r19, Y+5	; 0x05
    1334:	21 15       	cp	r18, r1
    1336:	31 05       	cpc	r19, r1
    1338:	69 f0       	breq	.+26     	; 0x1354 <GPIO_readPin+0x66>
    133a:	6b c0       	rjmp	.+214    	; 0x1412 <GPIO_readPin+0x124>
    133c:	4c 81       	ldd	r20, Y+4	; 0x04
    133e:	5d 81       	ldd	r21, Y+5	; 0x05
    1340:	42 30       	cpi	r20, 0x02	; 2
    1342:	51 05       	cpc	r21, r1
    1344:	b9 f1       	breq	.+110    	; 0x13b4 <GPIO_readPin+0xc6>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	83 30       	cpi	r24, 0x03	; 3
    134c:	91 05       	cpc	r25, r1
    134e:	09 f4       	brne	.+2      	; 0x1352 <GPIO_readPin+0x64>
    1350:	49 c0       	rjmp	.+146    	; 0x13e4 <GPIO_readPin+0xf6>
    1352:	5f c0       	rjmp	.+190    	; 0x1412 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1354:	e9 e3       	ldi	r30, 0x39	; 57
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a9 01       	movw	r20, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <GPIO_readPin+0x7e>
    1368:	55 95       	asr	r21
    136a:	47 95       	ror	r20
    136c:	8a 95       	dec	r24
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <GPIO_readPin+0x7a>
    1370:	ca 01       	movw	r24, r20
    1372:	81 70       	andi	r24, 0x01	; 1
    1374:	90 70       	andi	r25, 0x00	; 0
    1376:	88 23       	and	r24, r24
    1378:	19 f0       	breq	.+6      	; 0x1380 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	49 c0       	rjmp	.+146    	; 0x1412 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1380:	19 82       	std	Y+1, r1	; 0x01
    1382:	47 c0       	rjmp	.+142    	; 0x1412 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1384:	e6 e3       	ldi	r30, 0x36	; 54
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	a9 01       	movw	r20, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <GPIO_readPin+0xae>
    1398:	55 95       	asr	r21
    139a:	47 95       	ror	r20
    139c:	8a 95       	dec	r24
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <GPIO_readPin+0xaa>
    13a0:	ca 01       	movw	r24, r20
    13a2:	81 70       	andi	r24, 0x01	; 1
    13a4:	90 70       	andi	r25, 0x00	; 0
    13a6:	88 23       	and	r24, r24
    13a8:	19 f0       	breq	.+6      	; 0x13b0 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	31 c0       	rjmp	.+98     	; 0x1412 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13b0:	19 82       	std	Y+1, r1	; 0x01
    13b2:	2f c0       	rjmp	.+94     	; 0x1412 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    13b4:	e3 e3       	ldi	r30, 0x33	; 51
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a9 01       	movw	r20, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <GPIO_readPin+0xde>
    13c8:	55 95       	asr	r21
    13ca:	47 95       	ror	r20
    13cc:	8a 95       	dec	r24
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <GPIO_readPin+0xda>
    13d0:	ca 01       	movw	r24, r20
    13d2:	81 70       	andi	r24, 0x01	; 1
    13d4:	90 70       	andi	r25, 0x00	; 0
    13d6:	88 23       	and	r24, r24
    13d8:	19 f0       	breq	.+6      	; 0x13e0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	19 c0       	rjmp	.+50     	; 0x1412 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13e0:	19 82       	std	Y+1, r1	; 0x01
    13e2:	17 c0       	rjmp	.+46     	; 0x1412 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    13e4:	e0 e3       	ldi	r30, 0x30	; 48
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	a9 01       	movw	r20, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <GPIO_readPin+0x10e>
    13f8:	55 95       	asr	r21
    13fa:	47 95       	ror	r20
    13fc:	8a 95       	dec	r24
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <GPIO_readPin+0x10a>
    1400:	ca 01       	movw	r24, r20
    1402:	81 70       	andi	r24, 0x01	; 1
    1404:	90 70       	andi	r25, 0x00	; 0
    1406:	88 23       	and	r24, r24
    1408:	19 f0       	breq	.+6      	; 0x1410 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	01 c0       	rjmp	.+2      	; 0x1412 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1410:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1412:	89 81       	ldd	r24, Y+1	; 0x01
}
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	cf 91       	pop	r28
    1420:	df 91       	pop	r29
    1422:	08 95       	ret

00001424 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1424:	df 93       	push	r29
    1426:	cf 93       	push	r28
    1428:	00 d0       	rcall	.+0      	; 0x142a <GPIO_setupPortDirection+0x6>
    142a:	00 d0       	rcall	.+0      	; 0x142c <GPIO_setupPortDirection+0x8>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	84 30       	cpi	r24, 0x04	; 4
    1438:	90 f5       	brcc	.+100    	; 0x149e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	3c 83       	std	Y+4, r19	; 0x04
    1442:	2b 83       	std	Y+3, r18	; 0x03
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	91 05       	cpc	r25, r1
    144c:	d1 f0       	breq	.+52     	; 0x1482 <GPIO_setupPortDirection+0x5e>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	22 30       	cpi	r18, 0x02	; 2
    1454:	31 05       	cpc	r19, r1
    1456:	2c f4       	brge	.+10     	; 0x1462 <GPIO_setupPortDirection+0x3e>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	61 f0       	breq	.+24     	; 0x1478 <GPIO_setupPortDirection+0x54>
    1460:	1e c0       	rjmp	.+60     	; 0x149e <GPIO_setupPortDirection+0x7a>
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	81 f0       	breq	.+32     	; 0x148c <GPIO_setupPortDirection+0x68>
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	83 30       	cpi	r24, 0x03	; 3
    1472:	91 05       	cpc	r25, r1
    1474:	81 f0       	breq	.+32     	; 0x1496 <GPIO_setupPortDirection+0x72>
    1476:	13 c0       	rjmp	.+38     	; 0x149e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1478:	ea e3       	ldi	r30, 0x3A	; 58
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
    1480:	0e c0       	rjmp	.+28     	; 0x149e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1482:	e7 e3       	ldi	r30, 0x37	; 55
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	80 83       	st	Z, r24
    148a:	09 c0       	rjmp	.+18     	; 0x149e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    148c:	e4 e3       	ldi	r30, 0x34	; 52
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	80 83       	st	Z, r24
    1494:	04 c0       	rjmp	.+8      	; 0x149e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1496:	e1 e3       	ldi	r30, 0x31	; 49
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	80 83       	st	Z, r24
			break;
		}
	}
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <GPIO_writePort+0x6>
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <GPIO_writePort+0x8>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	84 30       	cpi	r24, 0x04	; 4
    14c0:	90 f5       	brcc	.+100    	; 0x1526 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3c 83       	std	Y+4, r19	; 0x04
    14ca:	2b 83       	std	Y+3, r18	; 0x03
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	91 05       	cpc	r25, r1
    14d4:	d1 f0       	breq	.+52     	; 0x150a <GPIO_writePort+0x5e>
    14d6:	2b 81       	ldd	r18, Y+3	; 0x03
    14d8:	3c 81       	ldd	r19, Y+4	; 0x04
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	2c f4       	brge	.+10     	; 0x14ea <GPIO_writePort+0x3e>
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	9c 81       	ldd	r25, Y+4	; 0x04
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	61 f0       	breq	.+24     	; 0x1500 <GPIO_writePort+0x54>
    14e8:	1e c0       	rjmp	.+60     	; 0x1526 <GPIO_writePort+0x7a>
    14ea:	2b 81       	ldd	r18, Y+3	; 0x03
    14ec:	3c 81       	ldd	r19, Y+4	; 0x04
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	81 f0       	breq	.+32     	; 0x1514 <GPIO_writePort+0x68>
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	91 05       	cpc	r25, r1
    14fc:	81 f0       	breq	.+32     	; 0x151e <GPIO_writePort+0x72>
    14fe:	13 c0       	rjmp	.+38     	; 0x1526 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1500:	eb e3       	ldi	r30, 0x3B	; 59
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	80 83       	st	Z, r24
    1508:	0e c0       	rjmp	.+28     	; 0x1526 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    150a:	e8 e3       	ldi	r30, 0x38	; 56
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	80 83       	st	Z, r24
    1512:	09 c0       	rjmp	.+18     	; 0x1526 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1514:	e5 e3       	ldi	r30, 0x35	; 53
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	80 83       	st	Z, r24
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    151e:	e2 e3       	ldi	r30, 0x32	; 50
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	80 83       	st	Z, r24
			break;
		}
	}
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <GPIO_readPort+0x6>
    153a:	00 d0       	rcall	.+0      	; 0x153c <GPIO_readPort+0x8>
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1542:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	84 30       	cpi	r24, 0x04	; 4
    1548:	90 f5       	brcc	.+100    	; 0x15ae <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	3c 83       	std	Y+4, r19	; 0x04
    1552:	2b 83       	std	Y+3, r18	; 0x03
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	d1 f0       	breq	.+52     	; 0x1592 <GPIO_readPort+0x5e>
    155e:	2b 81       	ldd	r18, Y+3	; 0x03
    1560:	3c 81       	ldd	r19, Y+4	; 0x04
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	2c f4       	brge	.+10     	; 0x1572 <GPIO_readPort+0x3e>
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	61 f0       	breq	.+24     	; 0x1588 <GPIO_readPort+0x54>
    1570:	1e c0       	rjmp	.+60     	; 0x15ae <GPIO_readPort+0x7a>
    1572:	2b 81       	ldd	r18, Y+3	; 0x03
    1574:	3c 81       	ldd	r19, Y+4	; 0x04
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	81 f0       	breq	.+32     	; 0x159c <GPIO_readPort+0x68>
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	83 30       	cpi	r24, 0x03	; 3
    1582:	91 05       	cpc	r25, r1
    1584:	81 f0       	breq	.+32     	; 0x15a6 <GPIO_readPort+0x72>
    1586:	13 c0       	rjmp	.+38     	; 0x15ae <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1588:	e9 e3       	ldi	r30, 0x39	; 57
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	89 83       	std	Y+1, r24	; 0x01
    1590:	0e c0       	rjmp	.+28     	; 0x15ae <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1592:	e6 e3       	ldi	r30, 0x36	; 54
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	09 c0       	rjmp	.+18     	; 0x15ae <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    159c:	e3 e3       	ldi	r30, 0x33	; 51
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	04 c0       	rjmp	.+8      	; 0x15ae <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    15a6:	e0 e3       	ldi	r30, 0x30	; 48
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	60 97       	sbiw	r28, 0x10	; 16
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	64 e0       	ldi	r22, 0x04	; 4
    15d6:	40 e0       	ldi	r20, 0x00	; 0
    15d8:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	65 e0       	ldi	r22, 0x05	; 5
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	66 e0       	ldi	r22, 0x06	; 6
    15ea:	40 e0       	ldi	r20, 0x00	; 0
    15ec:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	67 e0       	ldi	r22, 0x07	; 7
    15f4:	40 e0       	ldi	r20, 0x00	; 0
    15f6:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    15fa:	83 e0       	ldi	r24, 0x03	; 3
    15fc:	62 e0       	ldi	r22, 0x02	; 2
    15fe:	40 e0       	ldi	r20, 0x00	; 0
    1600:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	63 e0       	ldi	r22, 0x03	; 3
    1608:	40 e0       	ldi	r20, 0x00	; 0
    160a:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    160e:	83 e0       	ldi	r24, 0x03	; 3
    1610:	64 e0       	ldi	r22, 0x04	; 4
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	65 e0       	ldi	r22, 0x05	; 5
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1622:	1f 86       	std	Y+15, r1	; 0x0f
    1624:	b4 c0       	rjmp	.+360    	; 0x178e <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1626:	8f 85       	ldd	r24, Y+15	; 0x0f
    1628:	98 2f       	mov	r25, r24
    162a:	9c 5f       	subi	r25, 0xFC	; 252
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	69 2f       	mov	r22, r25
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1636:	8f 85       	ldd	r24, Y+15	; 0x0f
    1638:	98 2f       	mov	r25, r24
    163a:	9c 5f       	subi	r25, 0xFC	; 252
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	69 2f       	mov	r22, r25
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1646:	18 8a       	std	Y+16, r1	; 0x10
    1648:	22 c0       	rjmp	.+68     	; 0x168e <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    164a:	88 89       	ldd	r24, Y+16	; 0x10
    164c:	98 2f       	mov	r25, r24
    164e:	9e 5f       	subi	r25, 0xFE	; 254
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	69 2f       	mov	r22, r25
    1654:	0e 94 77 09 	call	0x12ee	; 0x12ee <GPIO_readPin>
    1658:	88 23       	and	r24, r24
    165a:	b1 f4       	brne	.+44     	; 0x1688 <KEYPAD_getPressedKey+0xca>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    165c:	8f 85       	ldd	r24, Y+15	; 0x0f
    165e:	88 2f       	mov	r24, r24
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	98 2f       	mov	r25, r24
    166c:	88 89       	ldd	r24, Y+16	; 0x10
    166e:	89 0f       	add	r24, r25
    1670:	8f 5f       	subi	r24, 0xFF	; 255
    1672:	0e 94 cc 0b 	call	0x1798	; 0x1798 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1676:	60 96       	adiw	r28, 0x10	; 16
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1688:	88 89       	ldd	r24, Y+16	; 0x10
    168a:	8f 5f       	subi	r24, 0xFF	; 255
    168c:	88 8b       	std	Y+16, r24	; 0x10
    168e:	88 89       	ldd	r24, Y+16	; 0x10
    1690:	84 30       	cpi	r24, 0x04	; 4
    1692:	d8 f2       	brcs	.-74     	; 0x164a <KEYPAD_getPressedKey+0x8c>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1694:	8f 85       	ldd	r24, Y+15	; 0x0f
    1696:	98 2f       	mov	r25, r24
    1698:	9c 5f       	subi	r25, 0xFC	; 252
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	69 2f       	mov	r22, r25
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	a0 e2       	ldi	r26, 0x20	; 32
    16aa:	b1 e4       	ldi	r27, 0x41	; 65
    16ac:	8b 87       	std	Y+11, r24	; 0x0b
    16ae:	9c 87       	std	Y+12, r25	; 0x0c
    16b0:	ad 87       	std	Y+13, r26	; 0x0d
    16b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	4a e7       	ldi	r20, 0x7A	; 122
    16c2:	55 e4       	ldi	r21, 0x45	; 69
    16c4:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8f 83       	std	Y+7, r24	; 0x07
    16ce:	98 87       	std	Y+8, r25	; 0x08
    16d0:	a9 87       	std	Y+9, r26	; 0x09
    16d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	78 85       	ldd	r23, Y+8	; 0x08
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    16e8:	88 23       	and	r24, r24
    16ea:	2c f4       	brge	.+10     	; 0x16f6 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	3f c0       	rjmp	.+126    	; 0x1774 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    16f6:	6f 81       	ldd	r22, Y+7	; 0x07
    16f8:	78 85       	ldd	r23, Y+8	; 0x08
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	4f e7       	ldi	r20, 0x7F	; 127
    1704:	57 e4       	ldi	r21, 0x47	; 71
    1706:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    170a:	18 16       	cp	r1, r24
    170c:	4c f5       	brge	.+82     	; 0x1760 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1710:	7c 85       	ldd	r23, Y+12	; 0x0c
    1712:	8d 85       	ldd	r24, Y+13	; 0x0d
    1714:	9e 85       	ldd	r25, Y+14	; 0x0e
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e2       	ldi	r20, 0x20	; 32
    171c:	51 e4       	ldi	r21, 0x41	; 65
    171e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	bc 01       	movw	r22, r24
    1728:	cd 01       	movw	r24, r26
    172a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
    1736:	0f c0       	rjmp	.+30     	; 0x1756 <KEYPAD_getPressedKey+0x198>
    1738:	80 e9       	ldi	r24, 0x90	; 144
    173a:	91 e0       	ldi	r25, 0x01	; 1
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	f1 f7       	brne	.-4      	; 0x1744 <KEYPAD_getPressedKey+0x186>
    1748:	9c 83       	std	Y+4, r25	; 0x04
    174a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174c:	8d 81       	ldd	r24, Y+5	; 0x05
    174e:	9e 81       	ldd	r25, Y+6	; 0x06
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	9e 83       	std	Y+6, r25	; 0x06
    1754:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1756:	8d 81       	ldd	r24, Y+5	; 0x05
    1758:	9e 81       	ldd	r25, Y+6	; 0x06
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	69 f7       	brne	.-38     	; 0x1738 <KEYPAD_getPressedKey+0x17a>
    175e:	14 c0       	rjmp	.+40     	; 0x1788 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1760:	6f 81       	ldd	r22, Y+7	; 0x07
    1762:	78 85       	ldd	r23, Y+8	; 0x08
    1764:	89 85       	ldd	r24, Y+9	; 0x09
    1766:	9a 85       	ldd	r25, Y+10	; 0x0a
    1768:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    176c:	dc 01       	movw	r26, r24
    176e:	cb 01       	movw	r24, r22
    1770:	9e 83       	std	Y+6, r25	; 0x06
    1772:	8d 83       	std	Y+5, r24	; 0x05
    1774:	8d 81       	ldd	r24, Y+5	; 0x05
    1776:	9e 81       	ldd	r25, Y+6	; 0x06
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	89 83       	std	Y+1, r24	; 0x01
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	f1 f7       	brne	.-4      	; 0x1780 <KEYPAD_getPressedKey+0x1c2>
    1784:	9a 83       	std	Y+2, r25	; 0x02
    1786:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1788:	8f 85       	ldd	r24, Y+15	; 0x0f
    178a:	8f 5f       	subi	r24, 0xFF	; 255
    178c:	8f 87       	std	Y+15, r24	; 0x0f
    178e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1790:	84 30       	cpi	r24, 0x04	; 4
    1792:	08 f4       	brcc	.+2      	; 0x1796 <KEYPAD_getPressedKey+0x1d8>
    1794:	48 cf       	rjmp	.-368    	; 0x1626 <KEYPAD_getPressedKey+0x68>
    1796:	45 cf       	rjmp	.-374    	; 0x1622 <KEYPAD_getPressedKey+0x64>

00001798 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	00 d0       	rcall	.+0      	; 0x179e <KEYPAD_4x4_adjustKeyNumber+0x6>
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    17a6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	3c 83       	std	Y+4, r19	; 0x04
    17b0:	2b 83       	std	Y+3, r18	; 0x03
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	88 30       	cpi	r24, 0x08	; 8
    17b8:	91 05       	cpc	r25, r1
    17ba:	09 f4       	brne	.+2      	; 0x17be <KEYPAD_4x4_adjustKeyNumber+0x26>
    17bc:	70 c0       	rjmp	.+224    	; 0x189e <KEYPAD_4x4_adjustKeyNumber+0x106>
    17be:	2b 81       	ldd	r18, Y+3	; 0x03
    17c0:	3c 81       	ldd	r19, Y+4	; 0x04
    17c2:	29 30       	cpi	r18, 0x09	; 9
    17c4:	31 05       	cpc	r19, r1
    17c6:	5c f5       	brge	.+86     	; 0x181e <KEYPAD_4x4_adjustKeyNumber+0x86>
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	84 30       	cpi	r24, 0x04	; 4
    17ce:	91 05       	cpc	r25, r1
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    17d2:	59 c0       	rjmp	.+178    	; 0x1886 <KEYPAD_4x4_adjustKeyNumber+0xee>
    17d4:	2b 81       	ldd	r18, Y+3	; 0x03
    17d6:	3c 81       	ldd	r19, Y+4	; 0x04
    17d8:	25 30       	cpi	r18, 0x05	; 5
    17da:	31 05       	cpc	r19, r1
    17dc:	9c f4       	brge	.+38     	; 0x1804 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	91 05       	cpc	r25, r1
    17e6:	09 f4       	brne	.+2      	; 0x17ea <KEYPAD_4x4_adjustKeyNumber+0x52>
    17e8:	48 c0       	rjmp	.+144    	; 0x187a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    17ea:	2b 81       	ldd	r18, Y+3	; 0x03
    17ec:	3c 81       	ldd	r19, Y+4	; 0x04
    17ee:	23 30       	cpi	r18, 0x03	; 3
    17f0:	31 05       	cpc	r19, r1
    17f2:	0c f0       	brlt	.+2      	; 0x17f6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    17f4:	45 c0       	rjmp	.+138    	; 0x1880 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	91 05       	cpc	r25, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1800:	39 c0       	rjmp	.+114    	; 0x1874 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1802:	67 c0       	rjmp	.+206    	; 0x18d2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1804:	2b 81       	ldd	r18, Y+3	; 0x03
    1806:	3c 81       	ldd	r19, Y+4	; 0x04
    1808:	26 30       	cpi	r18, 0x06	; 6
    180a:	31 05       	cpc	r19, r1
    180c:	09 f4       	brne	.+2      	; 0x1810 <KEYPAD_4x4_adjustKeyNumber+0x78>
    180e:	41 c0       	rjmp	.+130    	; 0x1892 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	87 30       	cpi	r24, 0x07	; 7
    1816:	91 05       	cpc	r25, r1
    1818:	0c f0       	brlt	.+2      	; 0x181c <KEYPAD_4x4_adjustKeyNumber+0x84>
    181a:	3e c0       	rjmp	.+124    	; 0x1898 <KEYPAD_4x4_adjustKeyNumber+0x100>
    181c:	37 c0       	rjmp	.+110    	; 0x188c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    181e:	2b 81       	ldd	r18, Y+3	; 0x03
    1820:	3c 81       	ldd	r19, Y+4	; 0x04
    1822:	2c 30       	cpi	r18, 0x0C	; 12
    1824:	31 05       	cpc	r19, r1
    1826:	09 f4       	brne	.+2      	; 0x182a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1828:	46 c0       	rjmp	.+140    	; 0x18b6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	8d 30       	cpi	r24, 0x0D	; 13
    1830:	91 05       	cpc	r25, r1
    1832:	5c f4       	brge	.+22     	; 0x184a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1834:	2b 81       	ldd	r18, Y+3	; 0x03
    1836:	3c 81       	ldd	r19, Y+4	; 0x04
    1838:	2a 30       	cpi	r18, 0x0A	; 10
    183a:	31 05       	cpc	r19, r1
    183c:	b1 f1       	breq	.+108    	; 0x18aa <KEYPAD_4x4_adjustKeyNumber+0x112>
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	8b 30       	cpi	r24, 0x0B	; 11
    1844:	91 05       	cpc	r25, r1
    1846:	a4 f5       	brge	.+104    	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1848:	2d c0       	rjmp	.+90     	; 0x18a4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    184a:	2b 81       	ldd	r18, Y+3	; 0x03
    184c:	3c 81       	ldd	r19, Y+4	; 0x04
    184e:	2e 30       	cpi	r18, 0x0E	; 14
    1850:	31 05       	cpc	r19, r1
    1852:	b9 f1       	breq	.+110    	; 0x18c2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	8e 30       	cpi	r24, 0x0E	; 14
    185a:	91 05       	cpc	r25, r1
    185c:	7c f1       	brlt	.+94     	; 0x18bc <KEYPAD_4x4_adjustKeyNumber+0x124>
    185e:	2b 81       	ldd	r18, Y+3	; 0x03
    1860:	3c 81       	ldd	r19, Y+4	; 0x04
    1862:	2f 30       	cpi	r18, 0x0F	; 15
    1864:	31 05       	cpc	r19, r1
    1866:	79 f1       	breq	.+94     	; 0x18c6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	80 31       	cpi	r24, 0x10	; 16
    186e:	91 05       	cpc	r25, r1
    1870:	69 f1       	breq	.+90     	; 0x18cc <KEYPAD_4x4_adjustKeyNumber+0x134>
    1872:	2f c0       	rjmp	.+94     	; 0x18d2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1874:	87 e0       	ldi	r24, 0x07	; 7
    1876:	89 83       	std	Y+1, r24	; 0x01
    1878:	2e c0       	rjmp	.+92     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    187a:	88 e0       	ldi	r24, 0x08	; 8
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	2b c0       	rjmp	.+86     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1880:	89 e0       	ldi	r24, 0x09	; 9
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	28 c0       	rjmp	.+80     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '/'; // ASCII Code of %
    1886:	8f e2       	ldi	r24, 0x2F	; 47
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	25 c0       	rjmp	.+74     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    188c:	84 e0       	ldi	r24, 0x04	; 4
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	22 c0       	rjmp	.+68     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1892:	85 e0       	ldi	r24, 0x05	; 5
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	1f c0       	rjmp	.+62     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1898:	86 e0       	ldi	r24, 0x06	; 6
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	1c c0       	rjmp	.+56     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    189e:	8a e2       	ldi	r24, 0x2A	; 42
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	19 c0       	rjmp	.+50     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	16 c0       	rjmp	.+44     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    18aa:	82 e0       	ldi	r24, 0x02	; 2
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	13 c0       	rjmp	.+38     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    18b0:	83 e0       	ldi	r24, 0x03	; 3
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	10 c0       	rjmp	.+32     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    18b6:	8d e2       	ldi	r24, 0x2D	; 45
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	0d c0       	rjmp	.+26     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 'c';  /* ASCII of Enter */
    18bc:	83 e6       	ldi	r24, 0x63	; 99
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	0a c0       	rjmp	.+20     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    18c2:	19 82       	std	Y+1, r1	; 0x01
    18c4:	08 c0       	rjmp	.+16     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    18c6:	8d e3       	ldi	r24, 0x3D	; 61
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	05 c0       	rjmp	.+10     	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    18cc:	8b e2       	ldi	r24, 0x2B	; 43
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
} 
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	2e 97       	sbiw	r28, 0x0e	; 14
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	61 e0       	ldi	r22, 0x01	; 1
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	62 e0       	ldi	r22, 0x02	; 2
    1908:	41 e0       	ldi	r20, 0x01	; 1
    190a:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	a0 ea       	ldi	r26, 0xA0	; 160
    1914:	b1 e4       	ldi	r27, 0x41	; 65
    1916:	8b 87       	std	Y+11, r24	; 0x0b
    1918:	9c 87       	std	Y+12, r25	; 0x0c
    191a:	ad 87       	std	Y+13, r26	; 0x0d
    191c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1920:	7c 85       	ldd	r23, Y+12	; 0x0c
    1922:	8d 85       	ldd	r24, Y+13	; 0x0d
    1924:	9e 85       	ldd	r25, Y+14	; 0x0e
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	4a e7       	ldi	r20, 0x7A	; 122
    192c:	55 e4       	ldi	r21, 0x45	; 69
    192e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	8f 83       	std	Y+7, r24	; 0x07
    1938:	98 87       	std	Y+8, r25	; 0x08
    193a:	a9 87       	std	Y+9, r26	; 0x09
    193c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    193e:	6f 81       	ldd	r22, Y+7	; 0x07
    1940:	78 85       	ldd	r23, Y+8	; 0x08
    1942:	89 85       	ldd	r24, Y+9	; 0x09
    1944:	9a 85       	ldd	r25, Y+10	; 0x0a
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    1952:	88 23       	and	r24, r24
    1954:	2c f4       	brge	.+10     	; 0x1960 <LCD_init+0x7a>
		__ticks = 1;
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	9e 83       	std	Y+6, r25	; 0x06
    195c:	8d 83       	std	Y+5, r24	; 0x05
    195e:	3f c0       	rjmp	.+126    	; 0x19de <LCD_init+0xf8>
	else if (__tmp > 65535)
    1960:	6f 81       	ldd	r22, Y+7	; 0x07
    1962:	78 85       	ldd	r23, Y+8	; 0x08
    1964:	89 85       	ldd	r24, Y+9	; 0x09
    1966:	9a 85       	ldd	r25, Y+10	; 0x0a
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	3f ef       	ldi	r19, 0xFF	; 255
    196c:	4f e7       	ldi	r20, 0x7F	; 127
    196e:	57 e4       	ldi	r21, 0x47	; 71
    1970:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    1974:	18 16       	cp	r1, r24
    1976:	4c f5       	brge	.+82     	; 0x19ca <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1978:	6b 85       	ldd	r22, Y+11	; 0x0b
    197a:	7c 85       	ldd	r23, Y+12	; 0x0c
    197c:	8d 85       	ldd	r24, Y+13	; 0x0d
    197e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e2       	ldi	r20, 0x20	; 32
    1986:	51 e4       	ldi	r21, 0x41	; 65
    1988:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	bc 01       	movw	r22, r24
    1992:	cd 01       	movw	r24, r26
    1994:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	8d 83       	std	Y+5, r24	; 0x05
    19a0:	0f c0       	rjmp	.+30     	; 0x19c0 <LCD_init+0xda>
    19a2:	80 e9       	ldi	r24, 0x90	; 144
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	9c 83       	std	Y+4, r25	; 0x04
    19a8:	8b 83       	std	Y+3, r24	; 0x03
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	f1 f7       	brne	.-4      	; 0x19ae <LCD_init+0xc8>
    19b2:	9c 83       	std	Y+4, r25	; 0x04
    19b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	9e 83       	std	Y+6, r25	; 0x06
    19be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	00 97       	sbiw	r24, 0x00	; 0
    19c6:	69 f7       	brne	.-38     	; 0x19a2 <LCD_init+0xbc>
    19c8:	14 c0       	rjmp	.+40     	; 0x19f2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ca:	6f 81       	ldd	r22, Y+7	; 0x07
    19cc:	78 85       	ldd	r23, Y+8	; 0x08
    19ce:	89 85       	ldd	r24, Y+9	; 0x09
    19d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d2:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	9e 83       	std	Y+6, r25	; 0x06
    19dc:	8d 83       	std	Y+5, r24	; 0x05
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	9a 83       	std	Y+2, r25	; 0x02
    19e4:	89 83       	std	Y+1, r24	; 0x01
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <LCD_init+0x104>
    19ee:	9a 83       	std	Y+2, r25	; 0x02
    19f0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	63 e0       	ldi	r22, 0x03	; 3
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	64 e0       	ldi	r22, 0x04	; 4
    1a00:	41 e0       	ldi	r20, 0x01	; 1
    1a02:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	65 e0       	ldi	r22, 0x05	; 5
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	66 e0       	ldi	r22, 0x06	; 6
    1a14:	41 e0       	ldi	r20, 0x01	; 1
    1a16:	0e 94 a1 07 	call	0xf42	; 0xf42 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1a1a:	83 e3       	ldi	r24, 0x33	; 51
    1a1c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1a20:	82 e3       	ldi	r24, 0x32	; 50
    1a22:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1a26:	88 e2       	ldi	r24, 0x28	; 40
    1a28:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a2c:	8c e0       	ldi	r24, 0x0C	; 12
    1a2e:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_sendCommand>
}
    1a38:	2e 96       	adiw	r28, 0x0e	; 14
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	c3 56       	subi	r28, 0x63	; 99
    1a58:	d0 40       	sbci	r29, 0x00	; 0
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
    1a64:	fe 01       	movw	r30, r28
    1a66:	ed 59       	subi	r30, 0x9D	; 157
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	61 e0       	ldi	r22, 0x01	; 1
    1a70:	40 e0       	ldi	r20, 0x00	; 0
    1a72:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    1a76:	fe 01       	movw	r30, r28
    1a78:	e1 5a       	subi	r30, 0xA1	; 161
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a0 e8       	ldi	r26, 0x80	; 128
    1a82:	bf e3       	ldi	r27, 0x3F	; 63
    1a84:	80 83       	st	Z, r24
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	a2 83       	std	Z+2, r26	; 0x02
    1a8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8c:	8e 01       	movw	r16, r28
    1a8e:	05 5a       	subi	r16, 0xA5	; 165
    1a90:	1f 4f       	sbci	r17, 0xFF	; 255
    1a92:	fe 01       	movw	r30, r28
    1a94:	e1 5a       	subi	r30, 0xA1	; 161
    1a96:	ff 4f       	sbci	r31, 0xFF	; 255
    1a98:	60 81       	ld	r22, Z
    1a9a:	71 81       	ldd	r23, Z+1	; 0x01
    1a9c:	82 81       	ldd	r24, Z+2	; 0x02
    1a9e:	93 81       	ldd	r25, Z+3	; 0x03
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	4a e7       	ldi	r20, 0x7A	; 122
    1aa6:	55 e4       	ldi	r21, 0x45	; 69
    1aa8:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	80 83       	st	Z, r24
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	a2 83       	std	Z+2, r26	; 0x02
    1ab8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aba:	fe 01       	movw	r30, r28
    1abc:	e5 5a       	subi	r30, 0xA5	; 165
    1abe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac0:	60 81       	ld	r22, Z
    1ac2:	71 81       	ldd	r23, Z+1	; 0x01
    1ac4:	82 81       	ldd	r24, Z+2	; 0x02
    1ac6:	93 81       	ldd	r25, Z+3	; 0x03
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e8       	ldi	r20, 0x80	; 128
    1ace:	5f e3       	ldi	r21, 0x3F	; 63
    1ad0:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	44 f4       	brge	.+16     	; 0x1ae8 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1ad8:	fe 01       	movw	r30, r28
    1ada:	e7 5a       	subi	r30, 0xA7	; 167
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	80 83       	st	Z, r24
    1ae6:	64 c0       	rjmp	.+200    	; 0x1bb0 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1ae8:	fe 01       	movw	r30, r28
    1aea:	e5 5a       	subi	r30, 0xA5	; 165
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	60 81       	ld	r22, Z
    1af0:	71 81       	ldd	r23, Z+1	; 0x01
    1af2:	82 81       	ldd	r24, Z+2	; 0x02
    1af4:	93 81       	ldd	r25, Z+3	; 0x03
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	3f ef       	ldi	r19, 0xFF	; 255
    1afa:	4f e7       	ldi	r20, 0x7F	; 127
    1afc:	57 e4       	ldi	r21, 0x47	; 71
    1afe:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    1b02:	18 16       	cp	r1, r24
    1b04:	0c f0       	brlt	.+2      	; 0x1b08 <LCD_sendCommand+0xbe>
    1b06:	43 c0       	rjmp	.+134    	; 0x1b8e <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e1 5a       	subi	r30, 0xA1	; 161
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	8e 01       	movw	r16, r28
    1b28:	07 5a       	subi	r16, 0xA7	; 167
    1b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	f8 01       	movw	r30, r16
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	80 83       	st	Z, r24
    1b3e:	1f c0       	rjmp	.+62     	; 0x1b7e <LCD_sendCommand+0x134>
    1b40:	fe 01       	movw	r30, r28
    1b42:	e9 5a       	subi	r30, 0xA9	; 169
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 e9       	ldi	r24, 0x90	; 144
    1b48:	91 e0       	ldi	r25, 0x01	; 1
    1b4a:	91 83       	std	Z+1, r25	; 0x01
    1b4c:	80 83       	st	Z, r24
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e9 5a       	subi	r30, 0xA9	; 169
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	80 81       	ld	r24, Z
    1b56:	91 81       	ldd	r25, Z+1	; 0x01
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <LCD_sendCommand+0x10e>
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e9 5a       	subi	r30, 0xA9	; 169
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b66:	de 01       	movw	r26, r28
    1b68:	a7 5a       	subi	r26, 0xA7	; 167
    1b6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e7 5a       	subi	r30, 0xA7	; 167
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 81       	ld	r24, Z
    1b74:	91 81       	ldd	r25, Z+1	; 0x01
    1b76:	01 97       	sbiw	r24, 0x01	; 1
    1b78:	11 96       	adiw	r26, 0x01	; 1
    1b7a:	9c 93       	st	X, r25
    1b7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e7 5a       	subi	r30, 0xA7	; 167
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	d1 f6       	brne	.-76     	; 0x1b40 <LCD_sendCommand+0xf6>
    1b8c:	27 c0       	rjmp	.+78     	; 0x1bdc <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8e:	8e 01       	movw	r16, r28
    1b90:	07 5a       	subi	r16, 0xA7	; 167
    1b92:	1f 4f       	sbci	r17, 0xFF	; 255
    1b94:	fe 01       	movw	r30, r28
    1b96:	e5 5a       	subi	r30, 0xA5	; 165
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	60 81       	ld	r22, Z
    1b9c:	71 81       	ldd	r23, Z+1	; 0x01
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	f8 01       	movw	r30, r16
    1bac:	91 83       	std	Z+1, r25	; 0x01
    1bae:	80 83       	st	Z, r24
    1bb0:	de 01       	movw	r26, r28
    1bb2:	ab 5a       	subi	r26, 0xAB	; 171
    1bb4:	bf 4f       	sbci	r27, 0xFF	; 255
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e7 5a       	subi	r30, 0xA7	; 167
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	8d 93       	st	X+, r24
    1bc2:	9c 93       	st	X, r25
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	eb 5a       	subi	r30, 0xAB	; 171
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	80 81       	ld	r24, Z
    1bcc:	91 81       	ldd	r25, Z+1	; 0x01
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <LCD_sendCommand+0x184>
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	eb 5a       	subi	r30, 0xAB	; 171
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	62 e0       	ldi	r22, 0x02	; 2
    1be0:	41 e0       	ldi	r20, 0x01	; 1
    1be2:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    1be6:	fe 01       	movw	r30, r28
    1be8:	ef 5a       	subi	r30, 0xAF	; 175
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a0 e8       	ldi	r26, 0x80	; 128
    1bf2:	bf e3       	ldi	r27, 0x3F	; 63
    1bf4:	80 83       	st	Z, r24
    1bf6:	91 83       	std	Z+1, r25	; 0x01
    1bf8:	a2 83       	std	Z+2, r26	; 0x02
    1bfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfc:	8e 01       	movw	r16, r28
    1bfe:	03 5b       	subi	r16, 0xB3	; 179
    1c00:	1f 4f       	sbci	r17, 0xFF	; 255
    1c02:	fe 01       	movw	r30, r28
    1c04:	ef 5a       	subi	r30, 0xAF	; 175
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	60 81       	ld	r22, Z
    1c0a:	71 81       	ldd	r23, Z+1	; 0x01
    1c0c:	82 81       	ldd	r24, Z+2	; 0x02
    1c0e:	93 81       	ldd	r25, Z+3	; 0x03
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a e7       	ldi	r20, 0x7A	; 122
    1c16:	55 e4       	ldi	r21, 0x45	; 69
    1c18:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	f8 01       	movw	r30, r16
    1c22:	80 83       	st	Z, r24
    1c24:	91 83       	std	Z+1, r25	; 0x01
    1c26:	a2 83       	std	Z+2, r26	; 0x02
    1c28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e3 5b       	subi	r30, 0xB3	; 179
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	60 81       	ld	r22, Z
    1c32:	71 81       	ldd	r23, Z+1	; 0x01
    1c34:	82 81       	ldd	r24, Z+2	; 0x02
    1c36:	93 81       	ldd	r25, Z+3	; 0x03
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e8       	ldi	r20, 0x80	; 128
    1c3e:	5f e3       	ldi	r21, 0x3F	; 63
    1c40:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    1c44:	88 23       	and	r24, r24
    1c46:	44 f4       	brge	.+16     	; 0x1c58 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e5 5b       	subi	r30, 0xB5	; 181
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
    1c56:	64 c0       	rjmp	.+200    	; 0x1d20 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1c58:	fe 01       	movw	r30, r28
    1c5a:	e3 5b       	subi	r30, 0xB3	; 179
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	60 81       	ld	r22, Z
    1c60:	71 81       	ldd	r23, Z+1	; 0x01
    1c62:	82 81       	ldd	r24, Z+2	; 0x02
    1c64:	93 81       	ldd	r25, Z+3	; 0x03
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	0c f0       	brlt	.+2      	; 0x1c78 <LCD_sendCommand+0x22e>
    1c76:	43 c0       	rjmp	.+134    	; 0x1cfe <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c78:	fe 01       	movw	r30, r28
    1c7a:	ef 5a       	subi	r30, 0xAF	; 175
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	60 81       	ld	r22, Z
    1c80:	71 81       	ldd	r23, Z+1	; 0x01
    1c82:	82 81       	ldd	r24, Z+2	; 0x02
    1c84:	93 81       	ldd	r25, Z+3	; 0x03
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e2       	ldi	r20, 0x20	; 32
    1c8c:	51 e4       	ldi	r21, 0x41	; 65
    1c8e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8e 01       	movw	r16, r28
    1c98:	05 5b       	subi	r16, 0xB5	; 181
    1c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	f8 01       	movw	r30, r16
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	80 83       	st	Z, r24
    1cae:	1f c0       	rjmp	.+62     	; 0x1cee <LCD_sendCommand+0x2a4>
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e7 5b       	subi	r30, 0xB7	; 183
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 e9       	ldi	r24, 0x90	; 144
    1cb8:	91 e0       	ldi	r25, 0x01	; 1
    1cba:	91 83       	std	Z+1, r25	; 0x01
    1cbc:	80 83       	st	Z, r24
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e7 5b       	subi	r30, 0xB7	; 183
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 81       	ld	r24, Z
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <LCD_sendCommand+0x27e>
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e7 5b       	subi	r30, 0xB7	; 183
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd6:	de 01       	movw	r26, r28
    1cd8:	a5 5b       	subi	r26, 0xB5	; 181
    1cda:	bf 4f       	sbci	r27, 0xFF	; 255
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e5 5b       	subi	r30, 0xB5	; 181
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 81       	ld	r24, Z
    1ce4:	91 81       	ldd	r25, Z+1	; 0x01
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	11 96       	adiw	r26, 0x01	; 1
    1cea:	9c 93       	st	X, r25
    1cec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e5 5b       	subi	r30, 0xB5	; 181
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	d1 f6       	brne	.-76     	; 0x1cb0 <LCD_sendCommand+0x266>
    1cfc:	27 c0       	rjmp	.+78     	; 0x1d4c <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfe:	8e 01       	movw	r16, r28
    1d00:	05 5b       	subi	r16, 0xB5	; 181
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	fe 01       	movw	r30, r28
    1d06:	e3 5b       	subi	r30, 0xB3	; 179
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	f8 01       	movw	r30, r16
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	80 83       	st	Z, r24
    1d20:	de 01       	movw	r26, r28
    1d22:	a9 5b       	subi	r26, 0xB9	; 185
    1d24:	bf 4f       	sbci	r27, 0xFF	; 255
    1d26:	fe 01       	movw	r30, r28
    1d28:	e5 5b       	subi	r30, 0xB5	; 181
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	8d 93       	st	X+, r24
    1d32:	9c 93       	st	X, r25
    1d34:	fe 01       	movw	r30, r28
    1d36:	e9 5b       	subi	r30, 0xB9	; 185
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	91 81       	ldd	r25, Z+1	; 0x01
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <LCD_sendCommand+0x2f4>
    1d42:	fe 01       	movw	r30, r28
    1d44:	e9 5b       	subi	r30, 0xB9	; 185
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	91 83       	std	Z+1, r25	; 0x01
    1d4a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	ed 59       	subi	r30, 0x9D	; 157
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	80 71       	andi	r24, 0x10	; 16
    1d5a:	90 70       	andi	r25, 0x00	; 0
    1d5c:	95 95       	asr	r25
    1d5e:	87 95       	ror	r24
    1d60:	95 95       	asr	r25
    1d62:	87 95       	ror	r24
    1d64:	95 95       	asr	r25
    1d66:	87 95       	ror	r24
    1d68:	95 95       	asr	r25
    1d6a:	87 95       	ror	r24
    1d6c:	98 2f       	mov	r25, r24
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	63 e0       	ldi	r22, 0x03	; 3
    1d72:	49 2f       	mov	r20, r25
    1d74:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1d78:	fe 01       	movw	r30, r28
    1d7a:	ed 59       	subi	r30, 0x9D	; 157
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 81       	ld	r24, Z
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	80 72       	andi	r24, 0x20	; 32
    1d86:	90 70       	andi	r25, 0x00	; 0
    1d88:	95 95       	asr	r25
    1d8a:	87 95       	ror	r24
    1d8c:	95 95       	asr	r25
    1d8e:	87 95       	ror	r24
    1d90:	95 95       	asr	r25
    1d92:	87 95       	ror	r24
    1d94:	95 95       	asr	r25
    1d96:	87 95       	ror	r24
    1d98:	95 95       	asr	r25
    1d9a:	87 95       	ror	r24
    1d9c:	98 2f       	mov	r25, r24
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	64 e0       	ldi	r22, 0x04	; 4
    1da2:	49 2f       	mov	r20, r25
    1da4:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1da8:	fe 01       	movw	r30, r28
    1daa:	ed 59       	subi	r30, 0x9D	; 157
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	80 81       	ld	r24, Z
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	80 74       	andi	r24, 0x40	; 64
    1db6:	90 70       	andi	r25, 0x00	; 0
    1db8:	08 2e       	mov	r0, r24
    1dba:	89 2f       	mov	r24, r25
    1dbc:	00 0c       	add	r0, r0
    1dbe:	88 1f       	adc	r24, r24
    1dc0:	99 0b       	sbc	r25, r25
    1dc2:	00 0c       	add	r0, r0
    1dc4:	88 1f       	adc	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	98 2f       	mov	r25, r24
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	65 e0       	ldi	r22, 0x05	; 5
    1dce:	49 2f       	mov	r20, r25
    1dd0:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	ed 59       	subi	r30, 0x9D	; 157
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	98 2f       	mov	r25, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	99 27       	eor	r25, r25
    1de2:	99 1f       	adc	r25, r25
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	66 e0       	ldi	r22, 0x06	; 6
    1de8:	49 2f       	mov	r20, r25
    1dea:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    1dee:	fe 01       	movw	r30, r28
    1df0:	ed 5b       	subi	r30, 0xBD	; 189
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e8       	ldi	r26, 0x80	; 128
    1dfa:	bf e3       	ldi	r27, 0x3F	; 63
    1dfc:	80 83       	st	Z, r24
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	a2 83       	std	Z+2, r26	; 0x02
    1e02:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e04:	8e 01       	movw	r16, r28
    1e06:	01 5c       	subi	r16, 0xC1	; 193
    1e08:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	ed 5b       	subi	r30, 0xBD	; 189
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4a e7       	ldi	r20, 0x7A	; 122
    1e1e:	55 e4       	ldi	r21, 0x45	; 69
    1e20:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	f8 01       	movw	r30, r16
    1e2a:	80 83       	st	Z, r24
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	a2 83       	std	Z+2, r26	; 0x02
    1e30:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e32:	fe 01       	movw	r30, r28
    1e34:	ff 96       	adiw	r30, 0x3f	; 63
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e8       	ldi	r20, 0x80	; 128
    1e44:	5f e3       	ldi	r21, 0x3F	; 63
    1e46:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    1e4a:	88 23       	and	r24, r24
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9e af       	std	Y+62, r25	; 0x3e
    1e54:	8d af       	std	Y+61, r24	; 0x3d
    1e56:	46 c0       	rjmp	.+140    	; 0x1ee4 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1e58:	fe 01       	movw	r30, r28
    1e5a:	ff 96       	adiw	r30, 0x3f	; 63
    1e5c:	60 81       	ld	r22, Z
    1e5e:	71 81       	ldd	r23, Z+1	; 0x01
    1e60:	82 81       	ldd	r24, Z+2	; 0x02
    1e62:	93 81       	ldd	r25, Z+3	; 0x03
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	3f ef       	ldi	r19, 0xFF	; 255
    1e68:	4f e7       	ldi	r20, 0x7F	; 127
    1e6a:	57 e4       	ldi	r21, 0x47	; 71
    1e6c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    1e70:	18 16       	cp	r1, r24
    1e72:	64 f5       	brge	.+88     	; 0x1ecc <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e74:	fe 01       	movw	r30, r28
    1e76:	ed 5b       	subi	r30, 0xBD	; 189
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	60 81       	ld	r22, Z
    1e7c:	71 81       	ldd	r23, Z+1	; 0x01
    1e7e:	82 81       	ldd	r24, Z+2	; 0x02
    1e80:	93 81       	ldd	r25, Z+3	; 0x03
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	40 e2       	ldi	r20, 0x20	; 32
    1e88:	51 e4       	ldi	r21, 0x41	; 65
    1e8a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	bc 01       	movw	r22, r24
    1e94:	cd 01       	movw	r24, r26
    1e96:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e af       	std	Y+62, r25	; 0x3e
    1ea0:	8d af       	std	Y+61, r24	; 0x3d
    1ea2:	0f c0       	rjmp	.+30     	; 0x1ec2 <LCD_sendCommand+0x478>
    1ea4:	80 e9       	ldi	r24, 0x90	; 144
    1ea6:	91 e0       	ldi	r25, 0x01	; 1
    1ea8:	9c af       	std	Y+60, r25	; 0x3c
    1eaa:	8b af       	std	Y+59, r24	; 0x3b
    1eac:	8b ad       	ldd	r24, Y+59	; 0x3b
    1eae:	9c ad       	ldd	r25, Y+60	; 0x3c
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <LCD_sendCommand+0x466>
    1eb4:	9c af       	std	Y+60, r25	; 0x3c
    1eb6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eba:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	9e af       	std	Y+62, r25	; 0x3e
    1ec0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ec4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ec6:	00 97       	sbiw	r24, 0x00	; 0
    1ec8:	69 f7       	brne	.-38     	; 0x1ea4 <LCD_sendCommand+0x45a>
    1eca:	16 c0       	rjmp	.+44     	; 0x1ef8 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ecc:	fe 01       	movw	r30, r28
    1ece:	ff 96       	adiw	r30, 0x3f	; 63
    1ed0:	60 81       	ld	r22, Z
    1ed2:	71 81       	ldd	r23, Z+1	; 0x01
    1ed4:	82 81       	ldd	r24, Z+2	; 0x02
    1ed6:	93 81       	ldd	r25, Z+3	; 0x03
    1ed8:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9e af       	std	Y+62, r25	; 0x3e
    1ee2:	8d af       	std	Y+61, r24	; 0x3d
    1ee4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ee6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ee8:	9a af       	std	Y+58, r25	; 0x3a
    1eea:	89 af       	std	Y+57, r24	; 0x39
    1eec:	89 ad       	ldd	r24, Y+57	; 0x39
    1eee:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_sendCommand+0x4a6>
    1ef4:	9a af       	std	Y+58, r25	; 0x3a
    1ef6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	62 e0       	ldi	r22, 0x02	; 2
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e8       	ldi	r26, 0x80	; 128
    1f08:	bf e3       	ldi	r27, 0x3F	; 63
    1f0a:	8d ab       	std	Y+53, r24	; 0x35
    1f0c:	9e ab       	std	Y+54, r25	; 0x36
    1f0e:	af ab       	std	Y+55, r26	; 0x37
    1f10:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	6d a9       	ldd	r22, Y+53	; 0x35
    1f14:	7e a9       	ldd	r23, Y+54	; 0x36
    1f16:	8f a9       	ldd	r24, Y+55	; 0x37
    1f18:	98 ad       	ldd	r25, Y+56	; 0x38
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4a e7       	ldi	r20, 0x7A	; 122
    1f20:	55 e4       	ldi	r21, 0x45	; 69
    1f22:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	89 ab       	std	Y+49, r24	; 0x31
    1f2c:	9a ab       	std	Y+50, r25	; 0x32
    1f2e:	ab ab       	std	Y+51, r26	; 0x33
    1f30:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f32:	69 a9       	ldd	r22, Y+49	; 0x31
    1f34:	7a a9       	ldd	r23, Y+50	; 0x32
    1f36:	8b a9       	ldd	r24, Y+51	; 0x33
    1f38:	9c a9       	ldd	r25, Y+52	; 0x34
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    1f46:	88 23       	and	r24, r24
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	98 ab       	std	Y+48, r25	; 0x30
    1f50:	8f a7       	std	Y+47, r24	; 0x2f
    1f52:	3f c0       	rjmp	.+126    	; 0x1fd2 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1f54:	69 a9       	ldd	r22, Y+49	; 0x31
    1f56:	7a a9       	ldd	r23, Y+50	; 0x32
    1f58:	8b a9       	ldd	r24, Y+51	; 0x33
    1f5a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	3f ef       	ldi	r19, 0xFF	; 255
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	57 e4       	ldi	r21, 0x47	; 71
    1f64:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	4c f5       	brge	.+82     	; 0x1fbe <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f6e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f70:	8f a9       	ldd	r24, Y+55	; 0x37
    1f72:	98 ad       	ldd	r25, Y+56	; 0x38
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e2       	ldi	r20, 0x20	; 32
    1f7a:	51 e4       	ldi	r21, 0x41	; 65
    1f7c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	98 ab       	std	Y+48, r25	; 0x30
    1f92:	8f a7       	std	Y+47, r24	; 0x2f
    1f94:	0f c0       	rjmp	.+30     	; 0x1fb4 <LCD_sendCommand+0x56a>
    1f96:	80 e9       	ldi	r24, 0x90	; 144
    1f98:	91 e0       	ldi	r25, 0x01	; 1
    1f9a:	9e a7       	std	Y+46, r25	; 0x2e
    1f9c:	8d a7       	std	Y+45, r24	; 0x2d
    1f9e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fa0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_sendCommand+0x558>
    1fa6:	9e a7       	std	Y+46, r25	; 0x2e
    1fa8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1faa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fac:	98 a9       	ldd	r25, Y+48	; 0x30
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	98 ab       	std	Y+48, r25	; 0x30
    1fb2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <LCD_sendCommand+0x54c>
    1fbc:	14 c0       	rjmp	.+40     	; 0x1fe6 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbe:	69 a9       	ldd	r22, Y+49	; 0x31
    1fc0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fc2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fc4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc6:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	98 ab       	std	Y+48, r25	; 0x30
    1fd0:	8f a7       	std	Y+47, r24	; 0x2f
    1fd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd6:	9c a7       	std	Y+44, r25	; 0x2c
    1fd8:	8b a7       	std	Y+43, r24	; 0x2b
    1fda:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fdc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_sendCommand+0x594>
    1fe2:	9c a7       	std	Y+44, r25	; 0x2c
    1fe4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	62 e0       	ldi	r22, 0x02	; 2
    1fea:	41 e0       	ldi	r20, 0x01	; 1
    1fec:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 e8       	ldi	r26, 0x80	; 128
    1ff6:	bf e3       	ldi	r27, 0x3F	; 63
    1ff8:	8f a3       	std	Y+39, r24	; 0x27
    1ffa:	98 a7       	std	Y+40, r25	; 0x28
    1ffc:	a9 a7       	std	Y+41, r26	; 0x29
    1ffe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2000:	6f a1       	ldd	r22, Y+39	; 0x27
    2002:	78 a5       	ldd	r23, Y+40	; 0x28
    2004:	89 a5       	ldd	r24, Y+41	; 0x29
    2006:	9a a5       	ldd	r25, Y+42	; 0x2a
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a e7       	ldi	r20, 0x7A	; 122
    200e:	55 e4       	ldi	r21, 0x45	; 69
    2010:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	8b a3       	std	Y+35, r24	; 0x23
    201a:	9c a3       	std	Y+36, r25	; 0x24
    201c:	ad a3       	std	Y+37, r26	; 0x25
    201e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2020:	6b a1       	ldd	r22, Y+35	; 0x23
    2022:	7c a1       	ldd	r23, Y+36	; 0x24
    2024:	8d a1       	ldd	r24, Y+37	; 0x25
    2026:	9e a1       	ldd	r25, Y+38	; 0x26
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	2c f4       	brge	.+10     	; 0x2042 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9a a3       	std	Y+34, r25	; 0x22
    203e:	89 a3       	std	Y+33, r24	; 0x21
    2040:	3f c0       	rjmp	.+126    	; 0x20c0 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2042:	6b a1       	ldd	r22, Y+35	; 0x23
    2044:	7c a1       	ldd	r23, Y+36	; 0x24
    2046:	8d a1       	ldd	r24, Y+37	; 0x25
    2048:	9e a1       	ldd	r25, Y+38	; 0x26
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	3f ef       	ldi	r19, 0xFF	; 255
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	57 e4       	ldi	r21, 0x47	; 71
    2052:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	4c f5       	brge	.+82     	; 0x20ac <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	6f a1       	ldd	r22, Y+39	; 0x27
    205c:	78 a5       	ldd	r23, Y+40	; 0x28
    205e:	89 a5       	ldd	r24, Y+41	; 0x29
    2060:	9a a5       	ldd	r25, Y+42	; 0x2a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e2       	ldi	r20, 0x20	; 32
    2068:	51 e4       	ldi	r21, 0x41	; 65
    206a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9a a3       	std	Y+34, r25	; 0x22
    2080:	89 a3       	std	Y+33, r24	; 0x21
    2082:	0f c0       	rjmp	.+30     	; 0x20a2 <LCD_sendCommand+0x658>
    2084:	80 e9       	ldi	r24, 0x90	; 144
    2086:	91 e0       	ldi	r25, 0x01	; 1
    2088:	98 a3       	std	Y+32, r25	; 0x20
    208a:	8f 8f       	std	Y+31, r24	; 0x1f
    208c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    208e:	98 a1       	ldd	r25, Y+32	; 0x20
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_sendCommand+0x646>
    2094:	98 a3       	std	Y+32, r25	; 0x20
    2096:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2098:	89 a1       	ldd	r24, Y+33	; 0x21
    209a:	9a a1       	ldd	r25, Y+34	; 0x22
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	9a a3       	std	Y+34, r25	; 0x22
    20a0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a2:	89 a1       	ldd	r24, Y+33	; 0x21
    20a4:	9a a1       	ldd	r25, Y+34	; 0x22
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	69 f7       	brne	.-38     	; 0x2084 <LCD_sendCommand+0x63a>
    20aa:	14 c0       	rjmp	.+40     	; 0x20d4 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ac:	6b a1       	ldd	r22, Y+35	; 0x23
    20ae:	7c a1       	ldd	r23, Y+36	; 0x24
    20b0:	8d a1       	ldd	r24, Y+37	; 0x25
    20b2:	9e a1       	ldd	r25, Y+38	; 0x26
    20b4:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9a a3       	std	Y+34, r25	; 0x22
    20be:	89 a3       	std	Y+33, r24	; 0x21
    20c0:	89 a1       	ldd	r24, Y+33	; 0x21
    20c2:	9a a1       	ldd	r25, Y+34	; 0x22
    20c4:	9e 8f       	std	Y+30, r25	; 0x1e
    20c6:	8d 8f       	std	Y+29, r24	; 0x1d
    20c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <LCD_sendCommand+0x682>
    20d0:	9e 8f       	std	Y+30, r25	; 0x1e
    20d2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    20d4:	fe 01       	movw	r30, r28
    20d6:	ed 59       	subi	r30, 0x9D	; 157
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 81       	ld	r24, Z
    20dc:	98 2f       	mov	r25, r24
    20de:	91 70       	andi	r25, 0x01	; 1
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	63 e0       	ldi	r22, 0x03	; 3
    20e4:	49 2f       	mov	r20, r25
    20e6:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    20ea:	fe 01       	movw	r30, r28
    20ec:	ed 59       	subi	r30, 0x9D	; 157
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	88 2f       	mov	r24, r24
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	82 70       	andi	r24, 0x02	; 2
    20f8:	90 70       	andi	r25, 0x00	; 0
    20fa:	95 95       	asr	r25
    20fc:	87 95       	ror	r24
    20fe:	98 2f       	mov	r25, r24
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	64 e0       	ldi	r22, 0x04	; 4
    2104:	49 2f       	mov	r20, r25
    2106:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    210a:	fe 01       	movw	r30, r28
    210c:	ed 59       	subi	r30, 0x9D	; 157
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	80 81       	ld	r24, Z
    2112:	88 2f       	mov	r24, r24
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	84 70       	andi	r24, 0x04	; 4
    2118:	90 70       	andi	r25, 0x00	; 0
    211a:	95 95       	asr	r25
    211c:	87 95       	ror	r24
    211e:	95 95       	asr	r25
    2120:	87 95       	ror	r24
    2122:	98 2f       	mov	r25, r24
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	65 e0       	ldi	r22, 0x05	; 5
    2128:	49 2f       	mov	r20, r25
    212a:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    212e:	fe 01       	movw	r30, r28
    2130:	ed 59       	subi	r30, 0x9D	; 157
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	80 81       	ld	r24, Z
    2136:	88 2f       	mov	r24, r24
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	88 70       	andi	r24, 0x08	; 8
    213c:	90 70       	andi	r25, 0x00	; 0
    213e:	95 95       	asr	r25
    2140:	87 95       	ror	r24
    2142:	95 95       	asr	r25
    2144:	87 95       	ror	r24
    2146:	95 95       	asr	r25
    2148:	87 95       	ror	r24
    214a:	98 2f       	mov	r25, r24
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	66 e0       	ldi	r22, 0x06	; 6
    2150:	49 2f       	mov	r20, r25
    2152:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    2156:	80 e0       	ldi	r24, 0x00	; 0
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	a0 e8       	ldi	r26, 0x80	; 128
    215c:	bf e3       	ldi	r27, 0x3F	; 63
    215e:	89 8f       	std	Y+25, r24	; 0x19
    2160:	9a 8f       	std	Y+26, r25	; 0x1a
    2162:	ab 8f       	std	Y+27, r26	; 0x1b
    2164:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2166:	69 8d       	ldd	r22, Y+25	; 0x19
    2168:	7a 8d       	ldd	r23, Y+26	; 0x1a
    216a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	4a e7       	ldi	r20, 0x7A	; 122
    2174:	55 e4       	ldi	r21, 0x45	; 69
    2176:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	8d 8b       	std	Y+21, r24	; 0x15
    2180:	9e 8b       	std	Y+22, r25	; 0x16
    2182:	af 8b       	std	Y+23, r26	; 0x17
    2184:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2186:	6d 89       	ldd	r22, Y+21	; 0x15
    2188:	7e 89       	ldd	r23, Y+22	; 0x16
    218a:	8f 89       	ldd	r24, Y+23	; 0x17
    218c:	98 8d       	ldd	r25, Y+24	; 0x18
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	40 e8       	ldi	r20, 0x80	; 128
    2194:	5f e3       	ldi	r21, 0x3F	; 63
    2196:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    219a:	88 23       	and	r24, r24
    219c:	2c f4       	brge	.+10     	; 0x21a8 <LCD_sendCommand+0x75e>
		__ticks = 1;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	9c 8b       	std	Y+20, r25	; 0x14
    21a4:	8b 8b       	std	Y+19, r24	; 0x13
    21a6:	3f c0       	rjmp	.+126    	; 0x2226 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    21a8:	6d 89       	ldd	r22, Y+21	; 0x15
    21aa:	7e 89       	ldd	r23, Y+22	; 0x16
    21ac:	8f 89       	ldd	r24, Y+23	; 0x17
    21ae:	98 8d       	ldd	r25, Y+24	; 0x18
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	3f ef       	ldi	r19, 0xFF	; 255
    21b4:	4f e7       	ldi	r20, 0x7F	; 127
    21b6:	57 e4       	ldi	r21, 0x47	; 71
    21b8:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    21bc:	18 16       	cp	r1, r24
    21be:	4c f5       	brge	.+82     	; 0x2212 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c0:	69 8d       	ldd	r22, Y+25	; 0x19
    21c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e2       	ldi	r20, 0x20	; 32
    21ce:	51 e4       	ldi	r21, 0x41	; 65
    21d0:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	bc 01       	movw	r22, r24
    21da:	cd 01       	movw	r24, r26
    21dc:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9c 8b       	std	Y+20, r25	; 0x14
    21e6:	8b 8b       	std	Y+19, r24	; 0x13
    21e8:	0f c0       	rjmp	.+30     	; 0x2208 <LCD_sendCommand+0x7be>
    21ea:	80 e9       	ldi	r24, 0x90	; 144
    21ec:	91 e0       	ldi	r25, 0x01	; 1
    21ee:	9a 8b       	std	Y+18, r25	; 0x12
    21f0:	89 8b       	std	Y+17, r24	; 0x11
    21f2:	89 89       	ldd	r24, Y+17	; 0x11
    21f4:	9a 89       	ldd	r25, Y+18	; 0x12
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <LCD_sendCommand+0x7ac>
    21fa:	9a 8b       	std	Y+18, r25	; 0x12
    21fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2200:	9c 89       	ldd	r25, Y+20	; 0x14
    2202:	01 97       	sbiw	r24, 0x01	; 1
    2204:	9c 8b       	std	Y+20, r25	; 0x14
    2206:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2208:	8b 89       	ldd	r24, Y+19	; 0x13
    220a:	9c 89       	ldd	r25, Y+20	; 0x14
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	69 f7       	brne	.-38     	; 0x21ea <LCD_sendCommand+0x7a0>
    2210:	14 c0       	rjmp	.+40     	; 0x223a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2212:	6d 89       	ldd	r22, Y+21	; 0x15
    2214:	7e 89       	ldd	r23, Y+22	; 0x16
    2216:	8f 89       	ldd	r24, Y+23	; 0x17
    2218:	98 8d       	ldd	r25, Y+24	; 0x18
    221a:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9c 8b       	std	Y+20, r25	; 0x14
    2224:	8b 8b       	std	Y+19, r24	; 0x13
    2226:	8b 89       	ldd	r24, Y+19	; 0x13
    2228:	9c 89       	ldd	r25, Y+20	; 0x14
    222a:	98 8b       	std	Y+16, r25	; 0x10
    222c:	8f 87       	std	Y+15, r24	; 0x0f
    222e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2230:	98 89       	ldd	r25, Y+16	; 0x10
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <LCD_sendCommand+0x7e8>
    2236:	98 8b       	std	Y+16, r25	; 0x10
    2238:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	62 e0       	ldi	r22, 0x02	; 2
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a0 e8       	ldi	r26, 0x80	; 128
    224a:	bf e3       	ldi	r27, 0x3F	; 63
    224c:	8b 87       	std	Y+11, r24	; 0x0b
    224e:	9c 87       	std	Y+12, r25	; 0x0c
    2250:	ad 87       	std	Y+13, r26	; 0x0d
    2252:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2254:	6b 85       	ldd	r22, Y+11	; 0x0b
    2256:	7c 85       	ldd	r23, Y+12	; 0x0c
    2258:	8d 85       	ldd	r24, Y+13	; 0x0d
    225a:	9e 85       	ldd	r25, Y+14	; 0x0e
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	4a e7       	ldi	r20, 0x7A	; 122
    2262:	55 e4       	ldi	r21, 0x45	; 69
    2264:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	8f 83       	std	Y+7, r24	; 0x07
    226e:	98 87       	std	Y+8, r25	; 0x08
    2270:	a9 87       	std	Y+9, r26	; 0x09
    2272:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2274:	6f 81       	ldd	r22, Y+7	; 0x07
    2276:	78 85       	ldd	r23, Y+8	; 0x08
    2278:	89 85       	ldd	r24, Y+9	; 0x09
    227a:	9a 85       	ldd	r25, Y+10	; 0x0a
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    2288:	88 23       	and	r24, r24
    228a:	2c f4       	brge	.+10     	; 0x2296 <LCD_sendCommand+0x84c>
		__ticks = 1;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
    2294:	3f c0       	rjmp	.+126    	; 0x2314 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2296:	6f 81       	ldd	r22, Y+7	; 0x07
    2298:	78 85       	ldd	r23, Y+8	; 0x08
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	3f ef       	ldi	r19, 0xFF	; 255
    22a2:	4f e7       	ldi	r20, 0x7F	; 127
    22a4:	57 e4       	ldi	r21, 0x47	; 71
    22a6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    22aa:	18 16       	cp	r1, r24
    22ac:	4c f5       	brge	.+82     	; 0x2300 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e2       	ldi	r20, 0x20	; 32
    22bc:	51 e4       	ldi	r21, 0x41	; 65
    22be:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	9e 83       	std	Y+6, r25	; 0x06
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	0f c0       	rjmp	.+30     	; 0x22f6 <LCD_sendCommand+0x8ac>
    22d8:	80 e9       	ldi	r24, 0x90	; 144
    22da:	91 e0       	ldi	r25, 0x01	; 1
    22dc:	9c 83       	std	Y+4, r25	; 0x04
    22de:	8b 83       	std	Y+3, r24	; 0x03
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LCD_sendCommand+0x89a>
    22e8:	9c 83       	std	Y+4, r25	; 0x04
    22ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ec:	8d 81       	ldd	r24, Y+5	; 0x05
    22ee:	9e 81       	ldd	r25, Y+6	; 0x06
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	9e 81       	ldd	r25, Y+6	; 0x06
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	69 f7       	brne	.-38     	; 0x22d8 <LCD_sendCommand+0x88e>
    22fe:	14 c0       	rjmp	.+40     	; 0x2328 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2300:	6f 81       	ldd	r22, Y+7	; 0x07
    2302:	78 85       	ldd	r23, Y+8	; 0x08
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9e 83       	std	Y+6, r25	; 0x06
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	8d 81       	ldd	r24, Y+5	; 0x05
    2316:	9e 81       	ldd	r25, Y+6	; 0x06
    2318:	9a 83       	std	Y+2, r25	; 0x02
    231a:	89 83       	std	Y+1, r24	; 0x01
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	9a 81       	ldd	r25, Y+2	; 0x02
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <LCD_sendCommand+0x8d6>
    2324:	9a 83       	std	Y+2, r25	; 0x02
    2326:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2328:	cd 59       	subi	r28, 0x9D	; 157
    232a:	df 4f       	sbci	r29, 0xFF	; 255
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	08 95       	ret

00002340 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2340:	0f 93       	push	r16
    2342:	1f 93       	push	r17
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	c3 56       	subi	r28, 0x63	; 99
    234e:	d0 40       	sbci	r29, 0x00	; 0
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	fe 01       	movw	r30, r28
    235c:	ed 59       	subi	r30, 0x9D	; 157
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    236c:	fe 01       	movw	r30, r28
    236e:	e1 5a       	subi	r30, 0xA1	; 161
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	a0 e8       	ldi	r26, 0x80	; 128
    2378:	bf e3       	ldi	r27, 0x3F	; 63
    237a:	80 83       	st	Z, r24
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	a2 83       	std	Z+2, r26	; 0x02
    2380:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2382:	8e 01       	movw	r16, r28
    2384:	05 5a       	subi	r16, 0xA5	; 165
    2386:	1f 4f       	sbci	r17, 0xFF	; 255
    2388:	fe 01       	movw	r30, r28
    238a:	e1 5a       	subi	r30, 0xA1	; 161
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	60 81       	ld	r22, Z
    2390:	71 81       	ldd	r23, Z+1	; 0x01
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	4a e7       	ldi	r20, 0x7A	; 122
    239c:	55 e4       	ldi	r21, 0x45	; 69
    239e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	f8 01       	movw	r30, r16
    23a8:	80 83       	st	Z, r24
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	a2 83       	std	Z+2, r26	; 0x02
    23ae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23b0:	fe 01       	movw	r30, r28
    23b2:	e5 5a       	subi	r30, 0xA5	; 165
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	60 81       	ld	r22, Z
    23b8:	71 81       	ldd	r23, Z+1	; 0x01
    23ba:	82 81       	ldd	r24, Z+2	; 0x02
    23bc:	93 81       	ldd	r25, Z+3	; 0x03
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e8       	ldi	r20, 0x80	; 128
    23c4:	5f e3       	ldi	r21, 0x3F	; 63
    23c6:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    23ca:	88 23       	and	r24, r24
    23cc:	44 f4       	brge	.+16     	; 0x23de <LCD_displayCharacter+0x9e>
		__ticks = 1;
    23ce:	fe 01       	movw	r30, r28
    23d0:	e7 5a       	subi	r30, 0xA7	; 167
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	80 83       	st	Z, r24
    23dc:	64 c0       	rjmp	.+200    	; 0x24a6 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    23de:	fe 01       	movw	r30, r28
    23e0:	e5 5a       	subi	r30, 0xA5	; 165
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	60 81       	ld	r22, Z
    23e6:	71 81       	ldd	r23, Z+1	; 0x01
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	93 81       	ldd	r25, Z+3	; 0x03
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	3f ef       	ldi	r19, 0xFF	; 255
    23f0:	4f e7       	ldi	r20, 0x7F	; 127
    23f2:	57 e4       	ldi	r21, 0x47	; 71
    23f4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    23f8:	18 16       	cp	r1, r24
    23fa:	0c f0       	brlt	.+2      	; 0x23fe <LCD_displayCharacter+0xbe>
    23fc:	43 c0       	rjmp	.+134    	; 0x2484 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fe:	fe 01       	movw	r30, r28
    2400:	e1 5a       	subi	r30, 0xA1	; 161
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	60 81       	ld	r22, Z
    2406:	71 81       	ldd	r23, Z+1	; 0x01
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e2       	ldi	r20, 0x20	; 32
    2412:	51 e4       	ldi	r21, 0x41	; 65
    2414:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	8e 01       	movw	r16, r28
    241e:	07 5a       	subi	r16, 0xA7	; 167
    2420:	1f 4f       	sbci	r17, 0xFF	; 255
    2422:	bc 01       	movw	r22, r24
    2424:	cd 01       	movw	r24, r26
    2426:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	f8 01       	movw	r30, r16
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	80 83       	st	Z, r24
    2434:	1f c0       	rjmp	.+62     	; 0x2474 <LCD_displayCharacter+0x134>
    2436:	fe 01       	movw	r30, r28
    2438:	e9 5a       	subi	r30, 0xA9	; 169
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 e9       	ldi	r24, 0x90	; 144
    243e:	91 e0       	ldi	r25, 0x01	; 1
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	80 83       	st	Z, r24
    2444:	fe 01       	movw	r30, r28
    2446:	e9 5a       	subi	r30, 0xA9	; 169
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 81       	ld	r24, Z
    244c:	91 81       	ldd	r25, Z+1	; 0x01
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <LCD_displayCharacter+0x10e>
    2452:	fe 01       	movw	r30, r28
    2454:	e9 5a       	subi	r30, 0xA9	; 169
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245c:	de 01       	movw	r26, r28
    245e:	a7 5a       	subi	r26, 0xA7	; 167
    2460:	bf 4f       	sbci	r27, 0xFF	; 255
    2462:	fe 01       	movw	r30, r28
    2464:	e7 5a       	subi	r30, 0xA7	; 167
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	91 81       	ldd	r25, Z+1	; 0x01
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	11 96       	adiw	r26, 0x01	; 1
    2470:	9c 93       	st	X, r25
    2472:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2474:	fe 01       	movw	r30, r28
    2476:	e7 5a       	subi	r30, 0xA7	; 167
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	80 81       	ld	r24, Z
    247c:	91 81       	ldd	r25, Z+1	; 0x01
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	d1 f6       	brne	.-76     	; 0x2436 <LCD_displayCharacter+0xf6>
    2482:	27 c0       	rjmp	.+78     	; 0x24d2 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2484:	8e 01       	movw	r16, r28
    2486:	07 5a       	subi	r16, 0xA7	; 167
    2488:	1f 4f       	sbci	r17, 0xFF	; 255
    248a:	fe 01       	movw	r30, r28
    248c:	e5 5a       	subi	r30, 0xA5	; 165
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	60 81       	ld	r22, Z
    2492:	71 81       	ldd	r23, Z+1	; 0x01
    2494:	82 81       	ldd	r24, Z+2	; 0x02
    2496:	93 81       	ldd	r25, Z+3	; 0x03
    2498:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	f8 01       	movw	r30, r16
    24a2:	91 83       	std	Z+1, r25	; 0x01
    24a4:	80 83       	st	Z, r24
    24a6:	de 01       	movw	r26, r28
    24a8:	ab 5a       	subi	r26, 0xAB	; 171
    24aa:	bf 4f       	sbci	r27, 0xFF	; 255
    24ac:	fe 01       	movw	r30, r28
    24ae:	e7 5a       	subi	r30, 0xA7	; 167
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 81       	ld	r24, Z
    24b4:	91 81       	ldd	r25, Z+1	; 0x01
    24b6:	8d 93       	st	X+, r24
    24b8:	9c 93       	st	X, r25
    24ba:	fe 01       	movw	r30, r28
    24bc:	eb 5a       	subi	r30, 0xAB	; 171
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	80 81       	ld	r24, Z
    24c2:	91 81       	ldd	r25, Z+1	; 0x01
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	f1 f7       	brne	.-4      	; 0x24c4 <LCD_displayCharacter+0x184>
    24c8:	fe 01       	movw	r30, r28
    24ca:	eb 5a       	subi	r30, 0xAB	; 171
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	91 83       	std	Z+1, r25	; 0x01
    24d0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	62 e0       	ldi	r22, 0x02	; 2
    24d6:	41 e0       	ldi	r20, 0x01	; 1
    24d8:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    24dc:	fe 01       	movw	r30, r28
    24de:	ef 5a       	subi	r30, 0xAF	; 175
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	a0 e8       	ldi	r26, 0x80	; 128
    24e8:	bf e3       	ldi	r27, 0x3F	; 63
    24ea:	80 83       	st	Z, r24
    24ec:	91 83       	std	Z+1, r25	; 0x01
    24ee:	a2 83       	std	Z+2, r26	; 0x02
    24f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f2:	8e 01       	movw	r16, r28
    24f4:	03 5b       	subi	r16, 0xB3	; 179
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	fe 01       	movw	r30, r28
    24fa:	ef 5a       	subi	r30, 0xAF	; 175
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	4a e7       	ldi	r20, 0x7A	; 122
    250c:	55 e4       	ldi	r21, 0x45	; 69
    250e:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	f8 01       	movw	r30, r16
    2518:	80 83       	st	Z, r24
    251a:	91 83       	std	Z+1, r25	; 0x01
    251c:	a2 83       	std	Z+2, r26	; 0x02
    251e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2520:	fe 01       	movw	r30, r28
    2522:	e3 5b       	subi	r30, 0xB3	; 179
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	60 81       	ld	r22, Z
    2528:	71 81       	ldd	r23, Z+1	; 0x01
    252a:	82 81       	ldd	r24, Z+2	; 0x02
    252c:	93 81       	ldd	r25, Z+3	; 0x03
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	44 f4       	brge	.+16     	; 0x254e <LCD_displayCharacter+0x20e>
		__ticks = 1;
    253e:	fe 01       	movw	r30, r28
    2540:	e5 5b       	subi	r30, 0xB5	; 181
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	80 83       	st	Z, r24
    254c:	64 c0       	rjmp	.+200    	; 0x2616 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    254e:	fe 01       	movw	r30, r28
    2550:	e3 5b       	subi	r30, 0xB3	; 179
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	60 81       	ld	r22, Z
    2556:	71 81       	ldd	r23, Z+1	; 0x01
    2558:	82 81       	ldd	r24, Z+2	; 0x02
    255a:	93 81       	ldd	r25, Z+3	; 0x03
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	3f ef       	ldi	r19, 0xFF	; 255
    2560:	4f e7       	ldi	r20, 0x7F	; 127
    2562:	57 e4       	ldi	r21, 0x47	; 71
    2564:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    2568:	18 16       	cp	r1, r24
    256a:	0c f0       	brlt	.+2      	; 0x256e <LCD_displayCharacter+0x22e>
    256c:	43 c0       	rjmp	.+134    	; 0x25f4 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256e:	fe 01       	movw	r30, r28
    2570:	ef 5a       	subi	r30, 0xAF	; 175
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	60 81       	ld	r22, Z
    2576:	71 81       	ldd	r23, Z+1	; 0x01
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e2       	ldi	r20, 0x20	; 32
    2582:	51 e4       	ldi	r21, 0x41	; 65
    2584:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	8e 01       	movw	r16, r28
    258e:	05 5b       	subi	r16, 0xB5	; 181
    2590:	1f 4f       	sbci	r17, 0xFF	; 255
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	f8 01       	movw	r30, r16
    25a0:	91 83       	std	Z+1, r25	; 0x01
    25a2:	80 83       	st	Z, r24
    25a4:	1f c0       	rjmp	.+62     	; 0x25e4 <LCD_displayCharacter+0x2a4>
    25a6:	fe 01       	movw	r30, r28
    25a8:	e7 5b       	subi	r30, 0xB7	; 183
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	80 e9       	ldi	r24, 0x90	; 144
    25ae:	91 e0       	ldi	r25, 0x01	; 1
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	80 83       	st	Z, r24
    25b4:	fe 01       	movw	r30, r28
    25b6:	e7 5b       	subi	r30, 0xB7	; 183
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	f1 f7       	brne	.-4      	; 0x25be <LCD_displayCharacter+0x27e>
    25c2:	fe 01       	movw	r30, r28
    25c4:	e7 5b       	subi	r30, 0xB7	; 183
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25cc:	de 01       	movw	r26, r28
    25ce:	a5 5b       	subi	r26, 0xB5	; 181
    25d0:	bf 4f       	sbci	r27, 0xFF	; 255
    25d2:	fe 01       	movw	r30, r28
    25d4:	e5 5b       	subi	r30, 0xB5	; 181
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	91 81       	ldd	r25, Z+1	; 0x01
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	11 96       	adiw	r26, 0x01	; 1
    25e0:	9c 93       	st	X, r25
    25e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e4:	fe 01       	movw	r30, r28
    25e6:	e5 5b       	subi	r30, 0xB5	; 181
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	d1 f6       	brne	.-76     	; 0x25a6 <LCD_displayCharacter+0x266>
    25f2:	27 c0       	rjmp	.+78     	; 0x2642 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f4:	8e 01       	movw	r16, r28
    25f6:	05 5b       	subi	r16, 0xB5	; 181
    25f8:	1f 4f       	sbci	r17, 0xFF	; 255
    25fa:	fe 01       	movw	r30, r28
    25fc:	e3 5b       	subi	r30, 0xB3	; 179
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	f8 01       	movw	r30, r16
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	80 83       	st	Z, r24
    2616:	de 01       	movw	r26, r28
    2618:	a9 5b       	subi	r26, 0xB9	; 185
    261a:	bf 4f       	sbci	r27, 0xFF	; 255
    261c:	fe 01       	movw	r30, r28
    261e:	e5 5b       	subi	r30, 0xB5	; 181
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 81       	ld	r24, Z
    2624:	91 81       	ldd	r25, Z+1	; 0x01
    2626:	8d 93       	st	X+, r24
    2628:	9c 93       	st	X, r25
    262a:	fe 01       	movw	r30, r28
    262c:	e9 5b       	subi	r30, 0xB9	; 185
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	80 81       	ld	r24, Z
    2632:	91 81       	ldd	r25, Z+1	; 0x01
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <LCD_displayCharacter+0x2f4>
    2638:	fe 01       	movw	r30, r28
    263a:	e9 5b       	subi	r30, 0xB9	; 185
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	91 83       	std	Z+1, r25	; 0x01
    2640:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2642:	fe 01       	movw	r30, r28
    2644:	ed 59       	subi	r30, 0x9D	; 157
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	80 81       	ld	r24, Z
    264a:	88 2f       	mov	r24, r24
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	80 71       	andi	r24, 0x10	; 16
    2650:	90 70       	andi	r25, 0x00	; 0
    2652:	95 95       	asr	r25
    2654:	87 95       	ror	r24
    2656:	95 95       	asr	r25
    2658:	87 95       	ror	r24
    265a:	95 95       	asr	r25
    265c:	87 95       	ror	r24
    265e:	95 95       	asr	r25
    2660:	87 95       	ror	r24
    2662:	98 2f       	mov	r25, r24
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	63 e0       	ldi	r22, 0x03	; 3
    2668:	49 2f       	mov	r20, r25
    266a:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    266e:	fe 01       	movw	r30, r28
    2670:	ed 59       	subi	r30, 0x9D	; 157
    2672:	ff 4f       	sbci	r31, 0xFF	; 255
    2674:	80 81       	ld	r24, Z
    2676:	88 2f       	mov	r24, r24
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	80 72       	andi	r24, 0x20	; 32
    267c:	90 70       	andi	r25, 0x00	; 0
    267e:	95 95       	asr	r25
    2680:	87 95       	ror	r24
    2682:	95 95       	asr	r25
    2684:	87 95       	ror	r24
    2686:	95 95       	asr	r25
    2688:	87 95       	ror	r24
    268a:	95 95       	asr	r25
    268c:	87 95       	ror	r24
    268e:	95 95       	asr	r25
    2690:	87 95       	ror	r24
    2692:	98 2f       	mov	r25, r24
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	64 e0       	ldi	r22, 0x04	; 4
    2698:	49 2f       	mov	r20, r25
    269a:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    269e:	fe 01       	movw	r30, r28
    26a0:	ed 59       	subi	r30, 0x9D	; 157
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 81       	ld	r24, Z
    26a6:	88 2f       	mov	r24, r24
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	80 74       	andi	r24, 0x40	; 64
    26ac:	90 70       	andi	r25, 0x00	; 0
    26ae:	08 2e       	mov	r0, r24
    26b0:	89 2f       	mov	r24, r25
    26b2:	00 0c       	add	r0, r0
    26b4:	88 1f       	adc	r24, r24
    26b6:	99 0b       	sbc	r25, r25
    26b8:	00 0c       	add	r0, r0
    26ba:	88 1f       	adc	r24, r24
    26bc:	99 1f       	adc	r25, r25
    26be:	98 2f       	mov	r25, r24
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	65 e0       	ldi	r22, 0x05	; 5
    26c4:	49 2f       	mov	r20, r25
    26c6:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    26ca:	fe 01       	movw	r30, r28
    26cc:	ed 59       	subi	r30, 0x9D	; 157
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 81       	ld	r24, Z
    26d2:	98 2f       	mov	r25, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	99 27       	eor	r25, r25
    26d8:	99 1f       	adc	r25, r25
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	66 e0       	ldi	r22, 0x06	; 6
    26de:	49 2f       	mov	r20, r25
    26e0:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    26e4:	fe 01       	movw	r30, r28
    26e6:	ed 5b       	subi	r30, 0xBD	; 189
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	a0 e8       	ldi	r26, 0x80	; 128
    26f0:	bf e3       	ldi	r27, 0x3F	; 63
    26f2:	80 83       	st	Z, r24
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	a2 83       	std	Z+2, r26	; 0x02
    26f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fa:	8e 01       	movw	r16, r28
    26fc:	01 5c       	subi	r16, 0xC1	; 193
    26fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2700:	fe 01       	movw	r30, r28
    2702:	ed 5b       	subi	r30, 0xBD	; 189
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	60 81       	ld	r22, Z
    2708:	71 81       	ldd	r23, Z+1	; 0x01
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	4a e7       	ldi	r20, 0x7A	; 122
    2714:	55 e4       	ldi	r21, 0x45	; 69
    2716:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	f8 01       	movw	r30, r16
    2720:	80 83       	st	Z, r24
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	a2 83       	std	Z+2, r26	; 0x02
    2726:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2728:	fe 01       	movw	r30, r28
    272a:	ff 96       	adiw	r30, 0x3f	; 63
    272c:	60 81       	ld	r22, Z
    272e:	71 81       	ldd	r23, Z+1	; 0x01
    2730:	82 81       	ldd	r24, Z+2	; 0x02
    2732:	93 81       	ldd	r25, Z+3	; 0x03
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e8       	ldi	r20, 0x80	; 128
    273a:	5f e3       	ldi	r21, 0x3F	; 63
    273c:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    2740:	88 23       	and	r24, r24
    2742:	2c f4       	brge	.+10     	; 0x274e <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	9e af       	std	Y+62, r25	; 0x3e
    274a:	8d af       	std	Y+61, r24	; 0x3d
    274c:	46 c0       	rjmp	.+140    	; 0x27da <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    274e:	fe 01       	movw	r30, r28
    2750:	ff 96       	adiw	r30, 0x3f	; 63
    2752:	60 81       	ld	r22, Z
    2754:	71 81       	ldd	r23, Z+1	; 0x01
    2756:	82 81       	ldd	r24, Z+2	; 0x02
    2758:	93 81       	ldd	r25, Z+3	; 0x03
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	3f ef       	ldi	r19, 0xFF	; 255
    275e:	4f e7       	ldi	r20, 0x7F	; 127
    2760:	57 e4       	ldi	r21, 0x47	; 71
    2762:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    2766:	18 16       	cp	r1, r24
    2768:	64 f5       	brge	.+88     	; 0x27c2 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276a:	fe 01       	movw	r30, r28
    276c:	ed 5b       	subi	r30, 0xBD	; 189
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	60 81       	ld	r22, Z
    2772:	71 81       	ldd	r23, Z+1	; 0x01
    2774:	82 81       	ldd	r24, Z+2	; 0x02
    2776:	93 81       	ldd	r25, Z+3	; 0x03
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e2       	ldi	r20, 0x20	; 32
    277e:	51 e4       	ldi	r21, 0x41	; 65
    2780:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	bc 01       	movw	r22, r24
    278a:	cd 01       	movw	r24, r26
    278c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	9e af       	std	Y+62, r25	; 0x3e
    2796:	8d af       	std	Y+61, r24	; 0x3d
    2798:	0f c0       	rjmp	.+30     	; 0x27b8 <LCD_displayCharacter+0x478>
    279a:	80 e9       	ldi	r24, 0x90	; 144
    279c:	91 e0       	ldi	r25, 0x01	; 1
    279e:	9c af       	std	Y+60, r25	; 0x3c
    27a0:	8b af       	std	Y+59, r24	; 0x3b
    27a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    27a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <LCD_displayCharacter+0x466>
    27aa:	9c af       	std	Y+60, r25	; 0x3c
    27ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    27b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	9e af       	std	Y+62, r25	; 0x3e
    27b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    27ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	69 f7       	brne	.-38     	; 0x279a <LCD_displayCharacter+0x45a>
    27c0:	16 c0       	rjmp	.+44     	; 0x27ee <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c2:	fe 01       	movw	r30, r28
    27c4:	ff 96       	adiw	r30, 0x3f	; 63
    27c6:	60 81       	ld	r22, Z
    27c8:	71 81       	ldd	r23, Z+1	; 0x01
    27ca:	82 81       	ldd	r24, Z+2	; 0x02
    27cc:	93 81       	ldd	r25, Z+3	; 0x03
    27ce:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	9e af       	std	Y+62, r25	; 0x3e
    27d8:	8d af       	std	Y+61, r24	; 0x3d
    27da:	8d ad       	ldd	r24, Y+61	; 0x3d
    27dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    27de:	9a af       	std	Y+58, r25	; 0x3a
    27e0:	89 af       	std	Y+57, r24	; 0x39
    27e2:	89 ad       	ldd	r24, Y+57	; 0x39
    27e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <LCD_displayCharacter+0x4a6>
    27ea:	9a af       	std	Y+58, r25	; 0x3a
    27ec:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	62 e0       	ldi	r22, 0x02	; 2
    27f2:	40 e0       	ldi	r20, 0x00	; 0
    27f4:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	a0 e8       	ldi	r26, 0x80	; 128
    27fe:	bf e3       	ldi	r27, 0x3F	; 63
    2800:	8d ab       	std	Y+53, r24	; 0x35
    2802:	9e ab       	std	Y+54, r25	; 0x36
    2804:	af ab       	std	Y+55, r26	; 0x37
    2806:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2808:	6d a9       	ldd	r22, Y+53	; 0x35
    280a:	7e a9       	ldd	r23, Y+54	; 0x36
    280c:	8f a9       	ldd	r24, Y+55	; 0x37
    280e:	98 ad       	ldd	r25, Y+56	; 0x38
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4a e7       	ldi	r20, 0x7A	; 122
    2816:	55 e4       	ldi	r21, 0x45	; 69
    2818:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	89 ab       	std	Y+49, r24	; 0x31
    2822:	9a ab       	std	Y+50, r25	; 0x32
    2824:	ab ab       	std	Y+51, r26	; 0x33
    2826:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2828:	69 a9       	ldd	r22, Y+49	; 0x31
    282a:	7a a9       	ldd	r23, Y+50	; 0x32
    282c:	8b a9       	ldd	r24, Y+51	; 0x33
    282e:	9c a9       	ldd	r25, Y+52	; 0x34
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    283c:	88 23       	and	r24, r24
    283e:	2c f4       	brge	.+10     	; 0x284a <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	98 ab       	std	Y+48, r25	; 0x30
    2846:	8f a7       	std	Y+47, r24	; 0x2f
    2848:	3f c0       	rjmp	.+126    	; 0x28c8 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    284a:	69 a9       	ldd	r22, Y+49	; 0x31
    284c:	7a a9       	ldd	r23, Y+50	; 0x32
    284e:	8b a9       	ldd	r24, Y+51	; 0x33
    2850:	9c a9       	ldd	r25, Y+52	; 0x34
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	3f ef       	ldi	r19, 0xFF	; 255
    2856:	4f e7       	ldi	r20, 0x7F	; 127
    2858:	57 e4       	ldi	r21, 0x47	; 71
    285a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    285e:	18 16       	cp	r1, r24
    2860:	4c f5       	brge	.+82     	; 0x28b4 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2862:	6d a9       	ldd	r22, Y+53	; 0x35
    2864:	7e a9       	ldd	r23, Y+54	; 0x36
    2866:	8f a9       	ldd	r24, Y+55	; 0x37
    2868:	98 ad       	ldd	r25, Y+56	; 0x38
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	98 ab       	std	Y+48, r25	; 0x30
    2888:	8f a7       	std	Y+47, r24	; 0x2f
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <LCD_displayCharacter+0x56a>
    288c:	80 e9       	ldi	r24, 0x90	; 144
    288e:	91 e0       	ldi	r25, 0x01	; 1
    2890:	9e a7       	std	Y+46, r25	; 0x2e
    2892:	8d a7       	std	Y+45, r24	; 0x2d
    2894:	8d a5       	ldd	r24, Y+45	; 0x2d
    2896:	9e a5       	ldd	r25, Y+46	; 0x2e
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <LCD_displayCharacter+0x558>
    289c:	9e a7       	std	Y+46, r25	; 0x2e
    289e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28a2:	98 a9       	ldd	r25, Y+48	; 0x30
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	98 ab       	std	Y+48, r25	; 0x30
    28a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ac:	98 a9       	ldd	r25, Y+48	; 0x30
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	69 f7       	brne	.-38     	; 0x288c <LCD_displayCharacter+0x54c>
    28b2:	14 c0       	rjmp	.+40     	; 0x28dc <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b4:	69 a9       	ldd	r22, Y+49	; 0x31
    28b6:	7a a9       	ldd	r23, Y+50	; 0x32
    28b8:	8b a9       	ldd	r24, Y+51	; 0x33
    28ba:	9c a9       	ldd	r25, Y+52	; 0x34
    28bc:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	98 ab       	std	Y+48, r25	; 0x30
    28c6:	8f a7       	std	Y+47, r24	; 0x2f
    28c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ca:	98 a9       	ldd	r25, Y+48	; 0x30
    28cc:	9c a7       	std	Y+44, r25	; 0x2c
    28ce:	8b a7       	std	Y+43, r24	; 0x2b
    28d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    28d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <LCD_displayCharacter+0x594>
    28d8:	9c a7       	std	Y+44, r25	; 0x2c
    28da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	62 e0       	ldi	r22, 0x02	; 2
    28e0:	41 e0       	ldi	r20, 0x01	; 1
    28e2:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    28e6:	80 e0       	ldi	r24, 0x00	; 0
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	a0 e8       	ldi	r26, 0x80	; 128
    28ec:	bf e3       	ldi	r27, 0x3F	; 63
    28ee:	8f a3       	std	Y+39, r24	; 0x27
    28f0:	98 a7       	std	Y+40, r25	; 0x28
    28f2:	a9 a7       	std	Y+41, r26	; 0x29
    28f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f6:	6f a1       	ldd	r22, Y+39	; 0x27
    28f8:	78 a5       	ldd	r23, Y+40	; 0x28
    28fa:	89 a5       	ldd	r24, Y+41	; 0x29
    28fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	4a e7       	ldi	r20, 0x7A	; 122
    2904:	55 e4       	ldi	r21, 0x45	; 69
    2906:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	8b a3       	std	Y+35, r24	; 0x23
    2910:	9c a3       	std	Y+36, r25	; 0x24
    2912:	ad a3       	std	Y+37, r26	; 0x25
    2914:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2916:	6b a1       	ldd	r22, Y+35	; 0x23
    2918:	7c a1       	ldd	r23, Y+36	; 0x24
    291a:	8d a1       	ldd	r24, Y+37	; 0x25
    291c:	9e a1       	ldd	r25, Y+38	; 0x26
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e8       	ldi	r20, 0x80	; 128
    2924:	5f e3       	ldi	r21, 0x3F	; 63
    2926:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    292a:	88 23       	and	r24, r24
    292c:	2c f4       	brge	.+10     	; 0x2938 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	9a a3       	std	Y+34, r25	; 0x22
    2934:	89 a3       	std	Y+33, r24	; 0x21
    2936:	3f c0       	rjmp	.+126    	; 0x29b6 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2938:	6b a1       	ldd	r22, Y+35	; 0x23
    293a:	7c a1       	ldd	r23, Y+36	; 0x24
    293c:	8d a1       	ldd	r24, Y+37	; 0x25
    293e:	9e a1       	ldd	r25, Y+38	; 0x26
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	3f ef       	ldi	r19, 0xFF	; 255
    2944:	4f e7       	ldi	r20, 0x7F	; 127
    2946:	57 e4       	ldi	r21, 0x47	; 71
    2948:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    294c:	18 16       	cp	r1, r24
    294e:	4c f5       	brge	.+82     	; 0x29a2 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2950:	6f a1       	ldd	r22, Y+39	; 0x27
    2952:	78 a5       	ldd	r23, Y+40	; 0x28
    2954:	89 a5       	ldd	r24, Y+41	; 0x29
    2956:	9a a5       	ldd	r25, Y+42	; 0x2a
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e2       	ldi	r20, 0x20	; 32
    295e:	51 e4       	ldi	r21, 0x41	; 65
    2960:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	bc 01       	movw	r22, r24
    296a:	cd 01       	movw	r24, r26
    296c:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	9a a3       	std	Y+34, r25	; 0x22
    2976:	89 a3       	std	Y+33, r24	; 0x21
    2978:	0f c0       	rjmp	.+30     	; 0x2998 <LCD_displayCharacter+0x658>
    297a:	80 e9       	ldi	r24, 0x90	; 144
    297c:	91 e0       	ldi	r25, 0x01	; 1
    297e:	98 a3       	std	Y+32, r25	; 0x20
    2980:	8f 8f       	std	Y+31, r24	; 0x1f
    2982:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2984:	98 a1       	ldd	r25, Y+32	; 0x20
    2986:	01 97       	sbiw	r24, 0x01	; 1
    2988:	f1 f7       	brne	.-4      	; 0x2986 <LCD_displayCharacter+0x646>
    298a:	98 a3       	std	Y+32, r25	; 0x20
    298c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    298e:	89 a1       	ldd	r24, Y+33	; 0x21
    2990:	9a a1       	ldd	r25, Y+34	; 0x22
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	9a a3       	std	Y+34, r25	; 0x22
    2996:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2998:	89 a1       	ldd	r24, Y+33	; 0x21
    299a:	9a a1       	ldd	r25, Y+34	; 0x22
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	69 f7       	brne	.-38     	; 0x297a <LCD_displayCharacter+0x63a>
    29a0:	14 c0       	rjmp	.+40     	; 0x29ca <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a2:	6b a1       	ldd	r22, Y+35	; 0x23
    29a4:	7c a1       	ldd	r23, Y+36	; 0x24
    29a6:	8d a1       	ldd	r24, Y+37	; 0x25
    29a8:	9e a1       	ldd	r25, Y+38	; 0x26
    29aa:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	9a a3       	std	Y+34, r25	; 0x22
    29b4:	89 a3       	std	Y+33, r24	; 0x21
    29b6:	89 a1       	ldd	r24, Y+33	; 0x21
    29b8:	9a a1       	ldd	r25, Y+34	; 0x22
    29ba:	9e 8f       	std	Y+30, r25	; 0x1e
    29bc:	8d 8f       	std	Y+29, r24	; 0x1d
    29be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <LCD_displayCharacter+0x682>
    29c6:	9e 8f       	std	Y+30, r25	; 0x1e
    29c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    29ca:	fe 01       	movw	r30, r28
    29cc:	ed 59       	subi	r30, 0x9D	; 157
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	80 81       	ld	r24, Z
    29d2:	98 2f       	mov	r25, r24
    29d4:	91 70       	andi	r25, 0x01	; 1
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	63 e0       	ldi	r22, 0x03	; 3
    29da:	49 2f       	mov	r20, r25
    29dc:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    29e0:	fe 01       	movw	r30, r28
    29e2:	ed 59       	subi	r30, 0x9D	; 157
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 81       	ld	r24, Z
    29e8:	88 2f       	mov	r24, r24
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	82 70       	andi	r24, 0x02	; 2
    29ee:	90 70       	andi	r25, 0x00	; 0
    29f0:	95 95       	asr	r25
    29f2:	87 95       	ror	r24
    29f4:	98 2f       	mov	r25, r24
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	64 e0       	ldi	r22, 0x04	; 4
    29fa:	49 2f       	mov	r20, r25
    29fc:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2a00:	fe 01       	movw	r30, r28
    2a02:	ed 59       	subi	r30, 0x9D	; 157
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	80 81       	ld	r24, Z
    2a08:	88 2f       	mov	r24, r24
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	84 70       	andi	r24, 0x04	; 4
    2a0e:	90 70       	andi	r25, 0x00	; 0
    2a10:	95 95       	asr	r25
    2a12:	87 95       	ror	r24
    2a14:	95 95       	asr	r25
    2a16:	87 95       	ror	r24
    2a18:	98 2f       	mov	r25, r24
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	65 e0       	ldi	r22, 0x05	; 5
    2a1e:	49 2f       	mov	r20, r25
    2a20:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2a24:	fe 01       	movw	r30, r28
    2a26:	ed 59       	subi	r30, 0x9D	; 157
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	80 81       	ld	r24, Z
    2a2c:	88 2f       	mov	r24, r24
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	88 70       	andi	r24, 0x08	; 8
    2a32:	90 70       	andi	r25, 0x00	; 0
    2a34:	95 95       	asr	r25
    2a36:	87 95       	ror	r24
    2a38:	95 95       	asr	r25
    2a3a:	87 95       	ror	r24
    2a3c:	95 95       	asr	r25
    2a3e:	87 95       	ror	r24
    2a40:	98 2f       	mov	r25, r24
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	66 e0       	ldi	r22, 0x06	; 6
    2a46:	49 2f       	mov	r20, r25
    2a48:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	a0 e8       	ldi	r26, 0x80	; 128
    2a52:	bf e3       	ldi	r27, 0x3F	; 63
    2a54:	89 8f       	std	Y+25, r24	; 0x19
    2a56:	9a 8f       	std	Y+26, r25	; 0x1a
    2a58:	ab 8f       	std	Y+27, r26	; 0x1b
    2a5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	4a e7       	ldi	r20, 0x7A	; 122
    2a6a:	55 e4       	ldi	r21, 0x45	; 69
    2a6c:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	8d 8b       	std	Y+21, r24	; 0x15
    2a76:	9e 8b       	std	Y+22, r25	; 0x16
    2a78:	af 8b       	std	Y+23, r26	; 0x17
    2a7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a80:	8f 89       	ldd	r24, Y+23	; 0x17
    2a82:	98 8d       	ldd	r25, Y+24	; 0x18
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	40 e8       	ldi	r20, 0x80	; 128
    2a8a:	5f e3       	ldi	r21, 0x3F	; 63
    2a8c:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    2a90:	88 23       	and	r24, r24
    2a92:	2c f4       	brge	.+10     	; 0x2a9e <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	9c 8b       	std	Y+20, r25	; 0x14
    2a9a:	8b 8b       	std	Y+19, r24	; 0x13
    2a9c:	3f c0       	rjmp	.+126    	; 0x2b1c <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	3f ef       	ldi	r19, 0xFF	; 255
    2aaa:	4f e7       	ldi	r20, 0x7F	; 127
    2aac:	57 e4       	ldi	r21, 0x47	; 71
    2aae:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    2ab2:	18 16       	cp	r1, r24
    2ab4:	4c f5       	brge	.+82     	; 0x2b08 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ab8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2abc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e2       	ldi	r20, 0x20	; 32
    2ac4:	51 e4       	ldi	r21, 0x41	; 65
    2ac6:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	bc 01       	movw	r22, r24
    2ad0:	cd 01       	movw	r24, r26
    2ad2:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	9c 8b       	std	Y+20, r25	; 0x14
    2adc:	8b 8b       	std	Y+19, r24	; 0x13
    2ade:	0f c0       	rjmp	.+30     	; 0x2afe <LCD_displayCharacter+0x7be>
    2ae0:	80 e9       	ldi	r24, 0x90	; 144
    2ae2:	91 e0       	ldi	r25, 0x01	; 1
    2ae4:	9a 8b       	std	Y+18, r25	; 0x12
    2ae6:	89 8b       	std	Y+17, r24	; 0x11
    2ae8:	89 89       	ldd	r24, Y+17	; 0x11
    2aea:	9a 89       	ldd	r25, Y+18	; 0x12
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	f1 f7       	brne	.-4      	; 0x2aec <LCD_displayCharacter+0x7ac>
    2af0:	9a 8b       	std	Y+18, r25	; 0x12
    2af2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af4:	8b 89       	ldd	r24, Y+19	; 0x13
    2af6:	9c 89       	ldd	r25, Y+20	; 0x14
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	9c 8b       	std	Y+20, r25	; 0x14
    2afc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afe:	8b 89       	ldd	r24, Y+19	; 0x13
    2b00:	9c 89       	ldd	r25, Y+20	; 0x14
    2b02:	00 97       	sbiw	r24, 0x00	; 0
    2b04:	69 f7       	brne	.-38     	; 0x2ae0 <LCD_displayCharacter+0x7a0>
    2b06:	14 c0       	rjmp	.+40     	; 0x2b30 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b08:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b10:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	9c 8b       	std	Y+20, r25	; 0x14
    2b1a:	8b 8b       	std	Y+19, r24	; 0x13
    2b1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b20:	98 8b       	std	Y+16, r25	; 0x10
    2b22:	8f 87       	std	Y+15, r24	; 0x0f
    2b24:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b26:	98 89       	ldd	r25, Y+16	; 0x10
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <LCD_displayCharacter+0x7e8>
    2b2c:	98 8b       	std	Y+16, r25	; 0x10
    2b2e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	62 e0       	ldi	r22, 0x02	; 2
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	0e 94 8c 08 	call	0x1118	; 0x1118 <GPIO_writePin>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	a0 e8       	ldi	r26, 0x80	; 128
    2b40:	bf e3       	ldi	r27, 0x3F	; 63
    2b42:	8b 87       	std	Y+11, r24	; 0x0b
    2b44:	9c 87       	std	Y+12, r25	; 0x0c
    2b46:	ad 87       	std	Y+13, r26	; 0x0d
    2b48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	4a e7       	ldi	r20, 0x7A	; 122
    2b58:	55 e4       	ldi	r21, 0x45	; 69
    2b5a:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	8f 83       	std	Y+7, r24	; 0x07
    2b64:	98 87       	std	Y+8, r25	; 0x08
    2b66:	a9 87       	std	Y+9, r26	; 0x09
    2b68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6c:	78 85       	ldd	r23, Y+8	; 0x08
    2b6e:	89 85       	ldd	r24, Y+9	; 0x09
    2b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	40 e8       	ldi	r20, 0x80	; 128
    2b78:	5f e3       	ldi	r21, 0x3F	; 63
    2b7a:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    2b7e:	88 23       	and	r24, r24
    2b80:	2c f4       	brge	.+10     	; 0x2b8c <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	9e 83       	std	Y+6, r25	; 0x06
    2b88:	8d 83       	std	Y+5, r24	; 0x05
    2b8a:	3f c0       	rjmp	.+126    	; 0x2c0a <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8e:	78 85       	ldd	r23, Y+8	; 0x08
    2b90:	89 85       	ldd	r24, Y+9	; 0x09
    2b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	3f ef       	ldi	r19, 0xFF	; 255
    2b98:	4f e7       	ldi	r20, 0x7F	; 127
    2b9a:	57 e4       	ldi	r21, 0x47	; 71
    2b9c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    2ba0:	18 16       	cp	r1, r24
    2ba2:	4c f5       	brge	.+82     	; 0x2bf6 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ba6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e2       	ldi	r20, 0x20	; 32
    2bb2:	51 e4       	ldi	r21, 0x41	; 65
    2bb4:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	9e 83       	std	Y+6, r25	; 0x06
    2bca:	8d 83       	std	Y+5, r24	; 0x05
    2bcc:	0f c0       	rjmp	.+30     	; 0x2bec <LCD_displayCharacter+0x8ac>
    2bce:	80 e9       	ldi	r24, 0x90	; 144
    2bd0:	91 e0       	ldi	r25, 0x01	; 1
    2bd2:	9c 83       	std	Y+4, r25	; 0x04
    2bd4:	8b 83       	std	Y+3, r24	; 0x03
    2bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <LCD_displayCharacter+0x89a>
    2bde:	9c 83       	std	Y+4, r25	; 0x04
    2be0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be2:	8d 81       	ldd	r24, Y+5	; 0x05
    2be4:	9e 81       	ldd	r25, Y+6	; 0x06
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	9e 83       	std	Y+6, r25	; 0x06
    2bea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bec:	8d 81       	ldd	r24, Y+5	; 0x05
    2bee:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	69 f7       	brne	.-38     	; 0x2bce <LCD_displayCharacter+0x88e>
    2bf4:	14 c0       	rjmp	.+40     	; 0x2c1e <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf8:	78 85       	ldd	r23, Y+8	; 0x08
    2bfa:	89 85       	ldd	r24, Y+9	; 0x09
    2bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfe:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
    2c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c0e:	9a 83       	std	Y+2, r25	; 0x02
    2c10:	89 83       	std	Y+1, r24	; 0x01
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	9a 81       	ldd	r25, Y+2	; 0x02
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <LCD_displayCharacter+0x8d6>
    2c1a:	9a 83       	std	Y+2, r25	; 0x02
    2c1c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2c1e:	cd 59       	subi	r28, 0x9D	; 157
    2c20:	df 4f       	sbci	r29, 0xFF	; 255
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	1f 91       	pop	r17
    2c32:	0f 91       	pop	r16
    2c34:	08 95       	ret

00002c36 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <LCD_displayString+0x6>
    2c3c:	0f 92       	push	r0
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
    2c42:	9b 83       	std	Y+3, r25	; 0x03
    2c44:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c46:	19 82       	std	Y+1, r1	; 0x01
    2c48:	0e c0       	rjmp	.+28     	; 0x2c66 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2c4a:	89 81       	ldd	r24, Y+1	; 0x01
    2c4c:	28 2f       	mov	r18, r24
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	9b 81       	ldd	r25, Y+3	; 0x03
    2c54:	fc 01       	movw	r30, r24
    2c56:	e2 0f       	add	r30, r18
    2c58:	f3 1f       	adc	r31, r19
    2c5a:	80 81       	ld	r24, Z
    2c5c:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_displayCharacter>
		i++;
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	8f 5f       	subi	r24, 0xFF	; 255
    2c64:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c70:	fc 01       	movw	r30, r24
    2c72:	e2 0f       	add	r30, r18
    2c74:	f3 1f       	adc	r31, r19
    2c76:	80 81       	ld	r24, Z
    2c78:	88 23       	and	r24, r24
    2c7a:	39 f7       	brne	.-50     	; 0x2c4a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	cf 91       	pop	r28
    2c84:	df 91       	pop	r29
    2c86:	08 95       	ret

00002c88 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2c88:	df 93       	push	r29
    2c8a:	cf 93       	push	r28
    2c8c:	00 d0       	rcall	.+0      	; 0x2c8e <LCD_moveCursor+0x6>
    2c8e:	00 d0       	rcall	.+0      	; 0x2c90 <LCD_moveCursor+0x8>
    2c90:	0f 92       	push	r0
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
    2c96:	8a 83       	std	Y+2, r24	; 0x02
    2c98:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	3d 83       	std	Y+5, r19	; 0x05
    2ca2:	2c 83       	std	Y+4, r18	; 0x04
    2ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca8:	81 30       	cpi	r24, 0x01	; 1
    2caa:	91 05       	cpc	r25, r1
    2cac:	c1 f0       	breq	.+48     	; 0x2cde <LCD_moveCursor+0x56>
    2cae:	2c 81       	ldd	r18, Y+4	; 0x04
    2cb0:	3d 81       	ldd	r19, Y+5	; 0x05
    2cb2:	22 30       	cpi	r18, 0x02	; 2
    2cb4:	31 05       	cpc	r19, r1
    2cb6:	2c f4       	brge	.+10     	; 0x2cc2 <LCD_moveCursor+0x3a>
    2cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cba:	9d 81       	ldd	r25, Y+5	; 0x05
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	61 f0       	breq	.+24     	; 0x2cd8 <LCD_moveCursor+0x50>
    2cc0:	19 c0       	rjmp	.+50     	; 0x2cf4 <LCD_moveCursor+0x6c>
    2cc2:	2c 81       	ldd	r18, Y+4	; 0x04
    2cc4:	3d 81       	ldd	r19, Y+5	; 0x05
    2cc6:	22 30       	cpi	r18, 0x02	; 2
    2cc8:	31 05       	cpc	r19, r1
    2cca:	69 f0       	breq	.+26     	; 0x2ce6 <LCD_moveCursor+0x5e>
    2ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cce:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd0:	83 30       	cpi	r24, 0x03	; 3
    2cd2:	91 05       	cpc	r25, r1
    2cd4:	61 f0       	breq	.+24     	; 0x2cee <LCD_moveCursor+0x66>
    2cd6:	0e c0       	rjmp	.+28     	; 0x2cf4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	0b c0       	rjmp	.+22     	; 0x2cf4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	80 5c       	subi	r24, 0xC0	; 192
    2ce2:	89 83       	std	Y+1, r24	; 0x01
    2ce4:	07 c0       	rjmp	.+14     	; 0x2cf4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	80 5f       	subi	r24, 0xF0	; 240
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	03 c0       	rjmp	.+6      	; 0x2cf4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	80 5b       	subi	r24, 0xB0	; 176
    2cf2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2cf4:	89 81       	ldd	r24, Y+1	; 0x01
    2cf6:	80 68       	ori	r24, 0x80	; 128
    2cf8:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_sendCommand>
}
    2cfc:	0f 90       	pop	r0
    2cfe:	0f 90       	pop	r0
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	cf 91       	pop	r28
    2d08:	df 91       	pop	r29
    2d0a:	08 95       	ret

00002d0c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2d0c:	df 93       	push	r29
    2d0e:	cf 93       	push	r28
    2d10:	00 d0       	rcall	.+0      	; 0x2d12 <LCD_displayStringRowColumn+0x6>
    2d12:	00 d0       	rcall	.+0      	; 0x2d14 <LCD_displayStringRowColumn+0x8>
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	89 83       	std	Y+1, r24	; 0x01
    2d1a:	6a 83       	std	Y+2, r22	; 0x02
    2d1c:	5c 83       	std	Y+4, r21	; 0x04
    2d1e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	6a 81       	ldd	r22, Y+2	; 0x02
    2d24:	0e 94 44 16 	call	0x2c88	; 0x2c88 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2d28:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_displayString>
}
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	cf 91       	pop	r28
    2d3a:	df 91       	pop	r29
    2d3c:	08 95       	ret

00002d3e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	62 97       	sbiw	r28, 0x12	; 18
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	9a 8b       	std	Y+18, r25	; 0x12
    2d54:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2d56:	89 89       	ldd	r24, Y+17	; 0x11
    2d58:	9a 89       	ldd	r25, Y+18	; 0x12
    2d5a:	9e 01       	movw	r18, r28
    2d5c:	2f 5f       	subi	r18, 0xFF	; 255
    2d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d60:	b9 01       	movw	r22, r18
    2d62:	4a e0       	ldi	r20, 0x0A	; 10
    2d64:	50 e0       	ldi	r21, 0x00	; 0
    2d66:	0e 94 90 19 	call	0x3320	; 0x3320 <itoa>
   LCD_displayString(buff); /* Display the string */
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	01 96       	adiw	r24, 0x01	; 1
    2d6e:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_displayString>
}
    2d72:	62 96       	adiw	r28, 0x12	; 18
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	08 95       	ret

00002d84 <LCD_floatToString>:
/*
 * Description :
 * Display the required float value on the screen
 */
void LCD_floatToString(float data)
{
    2d84:	0f 93       	push	r16
    2d86:	1f 93       	push	r17
    2d88:	df 93       	push	r29
    2d8a:	cf 93       	push	r28
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	68 97       	sbiw	r28, 0x18	; 24
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	6d 8b       	std	Y+21, r22	; 0x15
    2d9e:	7e 8b       	std	Y+22, r23	; 0x16
    2da0:	8f 8b       	std	Y+23, r24	; 0x17
    2da2:	98 8f       	std	Y+24, r25	; 0x18
    char buffer[20];  /* Create a buffer to hold the float as a string */
    dtostrf(data, 2,2, buffer);  /* Convert the float to string with 2 decimal places */
    2da4:	8d 89       	ldd	r24, Y+21	; 0x15
    2da6:	9e 89       	ldd	r25, Y+22	; 0x16
    2da8:	af 89       	ldd	r26, Y+23	; 0x17
    2daa:	b8 8d       	ldd	r27, Y+24	; 0x18
    2dac:	bc 01       	movw	r22, r24
    2dae:	cd 01       	movw	r24, r26
    2db0:	42 e0       	ldi	r20, 0x02	; 2
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	22 e0       	ldi	r18, 0x02	; 2
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	fe 01       	movw	r30, r28
    2dba:	31 96       	adiw	r30, 0x01	; 1
    2dbc:	8f 01       	movw	r16, r30
    2dbe:	0e 94 6f 19 	call	0x32de	; 0x32de <dtostrf>
    LCD_displayString(buffer);  /* Display the string on the LCD */
    2dc2:	ce 01       	movw	r24, r28
    2dc4:	01 96       	adiw	r24, 0x01	; 1
    2dc6:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_displayString>
}
    2dca:	68 96       	adiw	r28, 0x18	; 24
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	1f 91       	pop	r17
    2ddc:	0f 91       	pop	r16
    2dde:	08 95       	ret

00002de0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <LCD_sendCommand>
}
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	08 95       	ret

00002df4 <main>:
#include "keypad.h"
#include <util/delay.h>


int main(void)
{
    2df4:	ef 92       	push	r14
    2df6:	ff 92       	push	r15
    2df8:	0f 93       	push	r16
    2dfa:	1f 93       	push	r17
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	ac 97       	sbiw	r28, 0x2c	; 44
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	de bf       	out	0x3e, r29	; 62
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	cd bf       	out	0x3d, r28	; 61
	unsigned char key;
	float number1 = 0, number2 = 0;
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	a0 e0       	ldi	r26, 0x00	; 0
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	8e a3       	std	Y+38, r24	; 0x26
    2e1a:	9f a3       	std	Y+39, r25	; 0x27
    2e1c:	a8 a7       	std	Y+40, r26	; 0x28
    2e1e:	b9 a7       	std	Y+41, r27	; 0x29
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	a0 e0       	ldi	r26, 0x00	; 0
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	8a a3       	std	Y+34, r24	; 0x22
    2e2a:	9b a3       	std	Y+35, r25	; 0x23
    2e2c:	ac a3       	std	Y+36, r26	; 0x24
    2e2e:	bd a3       	std	Y+37, r27	; 0x25
	float result = 0;
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	a0 e0       	ldi	r26, 0x00	; 0
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	8e 8f       	std	Y+30, r24	; 0x1e
    2e3a:	9f 8f       	std	Y+31, r25	; 0x1f
    2e3c:	a8 a3       	std	Y+32, r26	; 0x20
    2e3e:	b9 a3       	std	Y+33, r27	; 0x21
	char operation = 0;
    2e40:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_init();
    2e42:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_init>
	LCD_displayStringRowColumn(0, 3,"Calculator");
    2e46:	20 e6       	ldi	r18, 0x60	; 96
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	63 e0       	ldi	r22, 0x03	; 3
    2e4e:	a9 01       	movw	r20, r18
    2e50:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <LCD_displayStringRowColumn>
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	aa e7       	ldi	r26, 0x7A	; 122
    2e5a:	b4 e4       	ldi	r27, 0x44	; 68
    2e5c:	89 8f       	std	Y+25, r24	; 0x19
    2e5e:	9a 8f       	std	Y+26, r25	; 0x1a
    2e60:	ab 8f       	std	Y+27, r26	; 0x1b
    2e62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e64:	69 8d       	ldd	r22, Y+25	; 0x19
    2e66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	4a e7       	ldi	r20, 0x7A	; 122
    2e72:	55 e4       	ldi	r21, 0x45	; 69
    2e74:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	8d 8b       	std	Y+21, r24	; 0x15
    2e7e:	9e 8b       	std	Y+22, r25	; 0x16
    2e80:	af 8b       	std	Y+23, r26	; 0x17
    2e82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e84:	6d 89       	ldd	r22, Y+21	; 0x15
    2e86:	7e 89       	ldd	r23, Y+22	; 0x16
    2e88:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	40 e8       	ldi	r20, 0x80	; 128
    2e92:	5f e3       	ldi	r21, 0x3F	; 63
    2e94:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    2e98:	88 23       	and	r24, r24
    2e9a:	2c f4       	brge	.+10     	; 0x2ea6 <main+0xb2>
		__ticks = 1;
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	9c 8b       	std	Y+20, r25	; 0x14
    2ea2:	8b 8b       	std	Y+19, r24	; 0x13
    2ea4:	3f c0       	rjmp	.+126    	; 0x2f24 <main+0x130>
	else if (__tmp > 65535)
    2ea6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ea8:	7e 89       	ldd	r23, Y+22	; 0x16
    2eaa:	8f 89       	ldd	r24, Y+23	; 0x17
    2eac:	98 8d       	ldd	r25, Y+24	; 0x18
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	3f ef       	ldi	r19, 0xFF	; 255
    2eb2:	4f e7       	ldi	r20, 0x7F	; 127
    2eb4:	57 e4       	ldi	r21, 0x47	; 71
    2eb6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    2eba:	18 16       	cp	r1, r24
    2ebc:	4c f5       	brge	.+82     	; 0x2f10 <main+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ebe:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	30 e0       	ldi	r19, 0x00	; 0
    2eca:	40 e2       	ldi	r20, 0x20	; 32
    2ecc:	51 e4       	ldi	r21, 0x41	; 65
    2ece:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	bc 01       	movw	r22, r24
    2ed8:	cd 01       	movw	r24, r26
    2eda:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	9c 8b       	std	Y+20, r25	; 0x14
    2ee4:	8b 8b       	std	Y+19, r24	; 0x13
    2ee6:	0f c0       	rjmp	.+30     	; 0x2f06 <main+0x112>
    2ee8:	80 e9       	ldi	r24, 0x90	; 144
    2eea:	91 e0       	ldi	r25, 0x01	; 1
    2eec:	9a 8b       	std	Y+18, r25	; 0x12
    2eee:	89 8b       	std	Y+17, r24	; 0x11
    2ef0:	89 89       	ldd	r24, Y+17	; 0x11
    2ef2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	f1 f7       	brne	.-4      	; 0x2ef4 <main+0x100>
    2ef8:	9a 8b       	std	Y+18, r25	; 0x12
    2efa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efc:	8b 89       	ldd	r24, Y+19	; 0x13
    2efe:	9c 89       	ldd	r25, Y+20	; 0x14
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	9c 8b       	std	Y+20, r25	; 0x14
    2f04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f06:	8b 89       	ldd	r24, Y+19	; 0x13
    2f08:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0a:	00 97       	sbiw	r24, 0x00	; 0
    2f0c:	69 f7       	brne	.-38     	; 0x2ee8 <main+0xf4>
    2f0e:	14 c0       	rjmp	.+40     	; 0x2f38 <main+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f10:	6d 89       	ldd	r22, Y+21	; 0x15
    2f12:	7e 89       	ldd	r23, Y+22	; 0x16
    2f14:	8f 89       	ldd	r24, Y+23	; 0x17
    2f16:	98 8d       	ldd	r25, Y+24	; 0x18
    2f18:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	9c 8b       	std	Y+20, r25	; 0x14
    2f22:	8b 8b       	std	Y+19, r24	; 0x13
    2f24:	8b 89       	ldd	r24, Y+19	; 0x13
    2f26:	9c 89       	ldd	r25, Y+20	; 0x14
    2f28:	98 8b       	std	Y+16, r25	; 0x10
    2f2a:	8f 87       	std	Y+15, r24	; 0x0f
    2f2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f2e:	98 89       	ldd	r25, Y+16	; 0x10
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	f1 f7       	brne	.-4      	; 0x2f30 <main+0x13c>
    2f34:	98 8b       	std	Y+16, r25	; 0x10
    2f36:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_clearScreen();
    2f38:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_clearScreen>

	while(1)
	{
		key = KEYPAD_getPressedKey();
    2f3c:	0e 94 df 0a 	call	0x15be	; 0x15be <KEYPAD_getPressedKey>
    2f40:	8a a7       	std	Y+42, r24	; 0x2a

		if ( (key >= 0 ) && (key <= 9) )
    2f42:	8a a5       	ldd	r24, Y+42	; 0x2a
    2f44:	8a 30       	cpi	r24, 0x0A	; 10
    2f46:	58 f5       	brcc	.+86     	; 0x2f9e <main+0x1aa>
		{
			LCD_intgerToString(key);
    2f48:	8a a5       	ldd	r24, Y+42	; 0x2a
    2f4a:	88 2f       	mov	r24, r24
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <LCD_intgerToString>
			number2 = (number2*10) + key;
    2f52:	6a a1       	ldd	r22, Y+34	; 0x22
    2f54:	7b a1       	ldd	r23, Y+35	; 0x23
    2f56:	8c a1       	ldd	r24, Y+36	; 0x24
    2f58:	9d a1       	ldd	r25, Y+37	; 0x25
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e2       	ldi	r20, 0x20	; 32
    2f60:	51 e4       	ldi	r21, 0x41	; 65
    2f62:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	7c 01       	movw	r14, r24
    2f6c:	8d 01       	movw	r16, r26
    2f6e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2f70:	88 2f       	mov	r24, r24
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	aa 27       	eor	r26, r26
    2f76:	97 fd       	sbrc	r25, 7
    2f78:	a0 95       	com	r26
    2f7a:	ba 2f       	mov	r27, r26
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	cd 01       	movw	r24, r26
    2f80:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <__floatsisf>
    2f84:	9b 01       	movw	r18, r22
    2f86:	ac 01       	movw	r20, r24
    2f88:	c8 01       	movw	r24, r16
    2f8a:	b7 01       	movw	r22, r14
    2f8c:	0e 94 67 02 	call	0x4ce	; 0x4ce <__addsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	8a a3       	std	Y+34, r24	; 0x22
    2f96:	9b a3       	std	Y+35, r25	; 0x23
    2f98:	ac a3       	std	Y+36, r26	; 0x24
    2f9a:	bd a3       	std	Y+37, r27	; 0x25
    2f9c:	f6 c0       	rjmp	.+492    	; 0x318a <main+0x396>
		}

		else if (key == '+' || key == '-' || key == '*' || key == '/')
    2f9e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2fa0:	8b 32       	cpi	r24, 0x2B	; 43
    2fa2:	49 f0       	breq	.+18     	; 0x2fb6 <main+0x1c2>
    2fa4:	8a a5       	ldd	r24, Y+42	; 0x2a
    2fa6:	8d 32       	cpi	r24, 0x2D	; 45
    2fa8:	31 f0       	breq	.+12     	; 0x2fb6 <main+0x1c2>
    2faa:	8a a5       	ldd	r24, Y+42	; 0x2a
    2fac:	8a 32       	cpi	r24, 0x2A	; 42
    2fae:	19 f0       	breq	.+6      	; 0x2fb6 <main+0x1c2>
    2fb0:	8a a5       	ldd	r24, Y+42	; 0x2a
    2fb2:	8f 32       	cpi	r24, 0x2F	; 47
    2fb4:	b1 f4       	brne	.+44     	; 0x2fe2 <main+0x1ee>
		{
			operation = key;
    2fb6:	8a a5       	ldd	r24, Y+42	; 0x2a
    2fb8:	8d 8f       	std	Y+29, r24	; 0x1d
			LCD_displayCharacter(operation);
    2fba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fbc:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_displayCharacter>
			number1 = number2;
    2fc0:	8a a1       	ldd	r24, Y+34	; 0x22
    2fc2:	9b a1       	ldd	r25, Y+35	; 0x23
    2fc4:	ac a1       	ldd	r26, Y+36	; 0x24
    2fc6:	bd a1       	ldd	r27, Y+37	; 0x25
    2fc8:	8e a3       	std	Y+38, r24	; 0x26
    2fca:	9f a3       	std	Y+39, r25	; 0x27
    2fcc:	a8 a7       	std	Y+40, r26	; 0x28
    2fce:	b9 a7       	std	Y+41, r27	; 0x29
			number2 = 0;
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	a0 e0       	ldi	r26, 0x00	; 0
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	8a a3       	std	Y+34, r24	; 0x22
    2fda:	9b a3       	std	Y+35, r25	; 0x23
    2fdc:	ac a3       	std	Y+36, r26	; 0x24
    2fde:	bd a3       	std	Y+37, r27	; 0x25
    2fe0:	d4 c0       	rjmp	.+424    	; 0x318a <main+0x396>
		}

		else if (key == '=')
    2fe2:	8a a5       	ldd	r24, Y+42	; 0x2a
    2fe4:	8d 33       	cpi	r24, 0x3D	; 61
    2fe6:	09 f0       	breq	.+2      	; 0x2fea <main+0x1f6>
    2fe8:	b3 c0       	rjmp	.+358    	; 0x3150 <main+0x35c>
		{
			switch (operation)
    2fea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fec:	28 2f       	mov	r18, r24
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	3c a7       	std	Y+44, r19	; 0x2c
    2ff2:	2b a7       	std	Y+43, r18	; 0x2b
    2ff4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ff6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ff8:	8b 32       	cpi	r24, 0x2B	; 43
    2ffa:	91 05       	cpc	r25, r1
    2ffc:	c1 f0       	breq	.+48     	; 0x302e <main+0x23a>
    2ffe:	2b a5       	ldd	r18, Y+43	; 0x2b
    3000:	3c a5       	ldd	r19, Y+44	; 0x2c
    3002:	2c 32       	cpi	r18, 0x2C	; 44
    3004:	31 05       	cpc	r19, r1
    3006:	3c f4       	brge	.+14     	; 0x3016 <main+0x222>
    3008:	8b a5       	ldd	r24, Y+43	; 0x2b
    300a:	9c a5       	ldd	r25, Y+44	; 0x2c
    300c:	8a 32       	cpi	r24, 0x2A	; 42
    300e:	91 05       	cpc	r25, r1
    3010:	09 f4       	brne	.+2      	; 0x3014 <main+0x220>
    3012:	47 c0       	rjmp	.+142    	; 0x30a2 <main+0x2ae>
    3014:	94 c0       	rjmp	.+296    	; 0x313e <main+0x34a>
    3016:	2b a5       	ldd	r18, Y+43	; 0x2b
    3018:	3c a5       	ldd	r19, Y+44	; 0x2c
    301a:	2d 32       	cpi	r18, 0x2D	; 45
    301c:	31 05       	cpc	r19, r1
    301e:	21 f1       	breq	.+72     	; 0x3068 <main+0x274>
    3020:	8b a5       	ldd	r24, Y+43	; 0x2b
    3022:	9c a5       	ldd	r25, Y+44	; 0x2c
    3024:	8f 32       	cpi	r24, 0x2F	; 47
    3026:	91 05       	cpc	r25, r1
    3028:	09 f4       	brne	.+2      	; 0x302c <main+0x238>
    302a:	58 c0       	rjmp	.+176    	; 0x30dc <main+0x2e8>
    302c:	88 c0       	rjmp	.+272    	; 0x313e <main+0x34a>
			{
			case '+':
				LCD_moveCursor(1,0);
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	60 e0       	ldi	r22, 0x00	; 0
    3032:	0e 94 44 16 	call	0x2c88	; 0x2c88 <LCD_moveCursor>
				result = number1 + number2;
    3036:	6e a1       	ldd	r22, Y+38	; 0x26
    3038:	7f a1       	ldd	r23, Y+39	; 0x27
    303a:	88 a5       	ldd	r24, Y+40	; 0x28
    303c:	99 a5       	ldd	r25, Y+41	; 0x29
    303e:	2a a1       	ldd	r18, Y+34	; 0x22
    3040:	3b a1       	ldd	r19, Y+35	; 0x23
    3042:	4c a1       	ldd	r20, Y+36	; 0x24
    3044:	5d a1       	ldd	r21, Y+37	; 0x25
    3046:	0e 94 67 02 	call	0x4ce	; 0x4ce <__addsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	8e 8f       	std	Y+30, r24	; 0x1e
    3050:	9f 8f       	std	Y+31, r25	; 0x1f
    3052:	a8 a3       	std	Y+32, r26	; 0x20
    3054:	b9 a3       	std	Y+33, r27	; 0x21
				LCD_floatToString(result);
    3056:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3058:	9f 8d       	ldd	r25, Y+31	; 0x1f
    305a:	a8 a1       	ldd	r26, Y+32	; 0x20
    305c:	b9 a1       	ldd	r27, Y+33	; 0x21
    305e:	bc 01       	movw	r22, r24
    3060:	cd 01       	movw	r24, r26
    3062:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <LCD_floatToString>
    3066:	91 c0       	rjmp	.+290    	; 0x318a <main+0x396>
				break;
			case '-':
				LCD_moveCursor(1,0);
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	60 e0       	ldi	r22, 0x00	; 0
    306c:	0e 94 44 16 	call	0x2c88	; 0x2c88 <LCD_moveCursor>
				result = number1 - number2;
    3070:	6e a1       	ldd	r22, Y+38	; 0x26
    3072:	7f a1       	ldd	r23, Y+39	; 0x27
    3074:	88 a5       	ldd	r24, Y+40	; 0x28
    3076:	99 a5       	ldd	r25, Y+41	; 0x29
    3078:	2a a1       	ldd	r18, Y+34	; 0x22
    307a:	3b a1       	ldd	r19, Y+35	; 0x23
    307c:	4c a1       	ldd	r20, Y+36	; 0x24
    307e:	5d a1       	ldd	r21, Y+37	; 0x25
    3080:	0e 94 36 02 	call	0x46c	; 0x46c <__subsf3>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	8e 8f       	std	Y+30, r24	; 0x1e
    308a:	9f 8f       	std	Y+31, r25	; 0x1f
    308c:	a8 a3       	std	Y+32, r26	; 0x20
    308e:	b9 a3       	std	Y+33, r27	; 0x21
				LCD_floatToString(result);
    3090:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3092:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3094:	a8 a1       	ldd	r26, Y+32	; 0x20
    3096:	b9 a1       	ldd	r27, Y+33	; 0x21
    3098:	bc 01       	movw	r22, r24
    309a:	cd 01       	movw	r24, r26
    309c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <LCD_floatToString>
    30a0:	74 c0       	rjmp	.+232    	; 0x318a <main+0x396>
				break;
			case '*':
				LCD_moveCursor(1,0);
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	60 e0       	ldi	r22, 0x00	; 0
    30a6:	0e 94 44 16 	call	0x2c88	; 0x2c88 <LCD_moveCursor>
				result = number1 * number2;
    30aa:	6e a1       	ldd	r22, Y+38	; 0x26
    30ac:	7f a1       	ldd	r23, Y+39	; 0x27
    30ae:	88 a5       	ldd	r24, Y+40	; 0x28
    30b0:	99 a5       	ldd	r25, Y+41	; 0x29
    30b2:	2a a1       	ldd	r18, Y+34	; 0x22
    30b4:	3b a1       	ldd	r19, Y+35	; 0x23
    30b6:	4c a1       	ldd	r20, Y+36	; 0x24
    30b8:	5d a1       	ldd	r21, Y+37	; 0x25
    30ba:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	8e 8f       	std	Y+30, r24	; 0x1e
    30c4:	9f 8f       	std	Y+31, r25	; 0x1f
    30c6:	a8 a3       	std	Y+32, r26	; 0x20
    30c8:	b9 a3       	std	Y+33, r27	; 0x21
				LCD_floatToString(result);
    30ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30ce:	a8 a1       	ldd	r26, Y+32	; 0x20
    30d0:	b9 a1       	ldd	r27, Y+33	; 0x21
    30d2:	bc 01       	movw	r22, r24
    30d4:	cd 01       	movw	r24, r26
    30d6:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <LCD_floatToString>
    30da:	57 c0       	rjmp	.+174    	; 0x318a <main+0x396>
				break;
			case '/':
				if (number2 != 0)
    30dc:	6a a1       	ldd	r22, Y+34	; 0x22
    30de:	7b a1       	ldd	r23, Y+35	; 0x23
    30e0:	8c a1       	ldd	r24, Y+36	; 0x24
    30e2:	9d a1       	ldd	r25, Y+37	; 0x25
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e0       	ldi	r20, 0x00	; 0
    30ea:	50 e0       	ldi	r21, 0x00	; 0
    30ec:	0e 94 3a 04 	call	0x874	; 0x874 <__nesf2>
    30f0:	88 23       	and	r24, r24
    30f2:	e9 f0       	breq	.+58     	; 0x312e <main+0x33a>
				{
					LCD_moveCursor(1,0);
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	60 e0       	ldi	r22, 0x00	; 0
    30f8:	0e 94 44 16 	call	0x2c88	; 0x2c88 <LCD_moveCursor>
					result = number1 / number2;
    30fc:	6e a1       	ldd	r22, Y+38	; 0x26
    30fe:	7f a1       	ldd	r23, Y+39	; 0x27
    3100:	88 a5       	ldd	r24, Y+40	; 0x28
    3102:	99 a5       	ldd	r25, Y+41	; 0x29
    3104:	2a a1       	ldd	r18, Y+34	; 0x22
    3106:	3b a1       	ldd	r19, Y+35	; 0x23
    3108:	4c a1       	ldd	r20, Y+36	; 0x24
    310a:	5d a1       	ldd	r21, Y+37	; 0x25
    310c:	0e 94 8e 03 	call	0x71c	; 0x71c <__divsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	8e 8f       	std	Y+30, r24	; 0x1e
    3116:	9f 8f       	std	Y+31, r25	; 0x1f
    3118:	a8 a3       	std	Y+32, r26	; 0x20
    311a:	b9 a3       	std	Y+33, r27	; 0x21
					LCD_floatToString(result);
    311c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    311e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3120:	a8 a1       	ldd	r26, Y+32	; 0x20
    3122:	b9 a1       	ldd	r27, Y+33	; 0x21
    3124:	bc 01       	movw	r22, r24
    3126:	cd 01       	movw	r24, r26
    3128:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <LCD_floatToString>
    312c:	2e c0       	rjmp	.+92     	; 0x318a <main+0x396>

				}
				else
				{
					LCD_displayStringRowColumn(0 , 0 ,"Math Error");
    312e:	2b e6       	ldi	r18, 0x6B	; 107
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	60 e0       	ldi	r22, 0x00	; 0
    3136:	a9 01       	movw	r20, r18
    3138:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <LCD_displayStringRowColumn>
    313c:	ff ce       	rjmp	.-514    	; 0x2f3c <main+0x148>
					continue;
				}
				break;
			default:
				LCD_moveCursor(1,0);
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	60 e0       	ldi	r22, 0x00	; 0
    3142:	0e 94 44 16 	call	0x2c88	; 0x2c88 <LCD_moveCursor>
				LCD_displayString("NO Operation");
    3146:	86 e7       	ldi	r24, 0x76	; 118
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <LCD_displayString>
    314e:	1d c0       	rjmp	.+58     	; 0x318a <main+0x396>
				break;
			}
		}

		else if (key == 'c')
    3150:	8a a5       	ldd	r24, Y+42	; 0x2a
    3152:	83 36       	cpi	r24, 0x63	; 99
    3154:	d1 f4       	brne	.+52     	; 0x318a <main+0x396>
		{
			LCD_clearScreen();
    3156:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <LCD_clearScreen>
			number1 = 0;
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	a0 e0       	ldi	r26, 0x00	; 0
    3160:	b0 e0       	ldi	r27, 0x00	; 0
    3162:	8e a3       	std	Y+38, r24	; 0x26
    3164:	9f a3       	std	Y+39, r25	; 0x27
    3166:	a8 a7       	std	Y+40, r26	; 0x28
    3168:	b9 a7       	std	Y+41, r27	; 0x29
			number2 = 0;
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	a0 e0       	ldi	r26, 0x00	; 0
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	8a a3       	std	Y+34, r24	; 0x22
    3174:	9b a3       	std	Y+35, r25	; 0x23
    3176:	ac a3       	std	Y+36, r26	; 0x24
    3178:	bd a3       	std	Y+37, r27	; 0x25
			result = 0;
    317a:	80 e0       	ldi	r24, 0x00	; 0
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	a0 e0       	ldi	r26, 0x00	; 0
    3180:	b0 e0       	ldi	r27, 0x00	; 0
    3182:	8e 8f       	std	Y+30, r24	; 0x1e
    3184:	9f 8f       	std	Y+31, r25	; 0x1f
    3186:	a8 a3       	std	Y+32, r26	; 0x20
    3188:	b9 a3       	std	Y+33, r27	; 0x21
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	aa ef       	ldi	r26, 0xFA	; 250
    3190:	b3 e4       	ldi	r27, 0x43	; 67
    3192:	8b 87       	std	Y+11, r24	; 0x0b
    3194:	9c 87       	std	Y+12, r25	; 0x0c
    3196:	ad 87       	std	Y+13, r26	; 0x0d
    3198:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    319a:	6b 85       	ldd	r22, Y+11	; 0x0b
    319c:	7c 85       	ldd	r23, Y+12	; 0x0c
    319e:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a2:	20 e0       	ldi	r18, 0x00	; 0
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	4a e7       	ldi	r20, 0x7A	; 122
    31a8:	55 e4       	ldi	r21, 0x45	; 69
    31aa:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	8f 83       	std	Y+7, r24	; 0x07
    31b4:	98 87       	std	Y+8, r25	; 0x08
    31b6:	a9 87       	std	Y+9, r26	; 0x09
    31b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31ba:	6f 81       	ldd	r22, Y+7	; 0x07
    31bc:	78 85       	ldd	r23, Y+8	; 0x08
    31be:	89 85       	ldd	r24, Y+9	; 0x09
    31c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	40 e8       	ldi	r20, 0x80	; 128
    31c8:	5f e3       	ldi	r21, 0x3F	; 63
    31ca:	0e 94 ca 04 	call	0x994	; 0x994 <__ltsf2>
    31ce:	88 23       	and	r24, r24
    31d0:	2c f4       	brge	.+10     	; 0x31dc <main+0x3e8>
		__ticks = 1;
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	9e 83       	std	Y+6, r25	; 0x06
    31d8:	8d 83       	std	Y+5, r24	; 0x05
    31da:	3f c0       	rjmp	.+126    	; 0x325a <main+0x466>
	else if (__tmp > 65535)
    31dc:	6f 81       	ldd	r22, Y+7	; 0x07
    31de:	78 85       	ldd	r23, Y+8	; 0x08
    31e0:	89 85       	ldd	r24, Y+9	; 0x09
    31e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	3f ef       	ldi	r19, 0xFF	; 255
    31e8:	4f e7       	ldi	r20, 0x7F	; 127
    31ea:	57 e4       	ldi	r21, 0x47	; 71
    31ec:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__gtsf2>
    31f0:	18 16       	cp	r1, r24
    31f2:	4c f5       	brge	.+82     	; 0x3246 <main+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e2       	ldi	r20, 0x20	; 32
    3202:	51 e4       	ldi	r21, 0x41	; 65
    3204:	0e 94 94 02 	call	0x528	; 0x528 <__mulsf3>
    3208:	dc 01       	movw	r26, r24
    320a:	cb 01       	movw	r24, r22
    320c:	bc 01       	movw	r22, r24
    320e:	cd 01       	movw	r24, r26
    3210:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	9e 83       	std	Y+6, r25	; 0x06
    321a:	8d 83       	std	Y+5, r24	; 0x05
    321c:	0f c0       	rjmp	.+30     	; 0x323c <main+0x448>
    321e:	80 e9       	ldi	r24, 0x90	; 144
    3220:	91 e0       	ldi	r25, 0x01	; 1
    3222:	9c 83       	std	Y+4, r25	; 0x04
    3224:	8b 83       	std	Y+3, r24	; 0x03
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	9c 81       	ldd	r25, Y+4	; 0x04
    322a:	01 97       	sbiw	r24, 0x01	; 1
    322c:	f1 f7       	brne	.-4      	; 0x322a <main+0x436>
    322e:	9c 83       	std	Y+4, r25	; 0x04
    3230:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3232:	8d 81       	ldd	r24, Y+5	; 0x05
    3234:	9e 81       	ldd	r25, Y+6	; 0x06
    3236:	01 97       	sbiw	r24, 0x01	; 1
    3238:	9e 83       	std	Y+6, r25	; 0x06
    323a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    323c:	8d 81       	ldd	r24, Y+5	; 0x05
    323e:	9e 81       	ldd	r25, Y+6	; 0x06
    3240:	00 97       	sbiw	r24, 0x00	; 0
    3242:	69 f7       	brne	.-38     	; 0x321e <main+0x42a>
    3244:	7b ce       	rjmp	.-778    	; 0x2f3c <main+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3246:	6f 81       	ldd	r22, Y+7	; 0x07
    3248:	78 85       	ldd	r23, Y+8	; 0x08
    324a:	89 85       	ldd	r24, Y+9	; 0x09
    324c:	9a 85       	ldd	r25, Y+10	; 0x0a
    324e:	0e 94 be 00 	call	0x17c	; 0x17c <__fixunssfsi>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	9e 83       	std	Y+6, r25	; 0x06
    3258:	8d 83       	std	Y+5, r24	; 0x05
    325a:	8d 81       	ldd	r24, Y+5	; 0x05
    325c:	9e 81       	ldd	r25, Y+6	; 0x06
    325e:	9a 83       	std	Y+2, r25	; 0x02
    3260:	89 83       	std	Y+1, r24	; 0x01
    3262:	89 81       	ldd	r24, Y+1	; 0x01
    3264:	9a 81       	ldd	r25, Y+2	; 0x02
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	f1 f7       	brne	.-4      	; 0x3266 <main+0x472>
    326a:	9a 83       	std	Y+2, r25	; 0x02
    326c:	89 83       	std	Y+1, r24	; 0x01
    326e:	66 ce       	rjmp	.-820    	; 0x2f3c <main+0x148>

00003270 <__prologue_saves__>:
    3270:	2f 92       	push	r2
    3272:	3f 92       	push	r3
    3274:	4f 92       	push	r4
    3276:	5f 92       	push	r5
    3278:	6f 92       	push	r6
    327a:	7f 92       	push	r7
    327c:	8f 92       	push	r8
    327e:	9f 92       	push	r9
    3280:	af 92       	push	r10
    3282:	bf 92       	push	r11
    3284:	cf 92       	push	r12
    3286:	df 92       	push	r13
    3288:	ef 92       	push	r14
    328a:	ff 92       	push	r15
    328c:	0f 93       	push	r16
    328e:	1f 93       	push	r17
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
    3298:	ca 1b       	sub	r28, r26
    329a:	db 0b       	sbc	r29, r27
    329c:	0f b6       	in	r0, 0x3f	; 63
    329e:	f8 94       	cli
    32a0:	de bf       	out	0x3e, r29	; 62
    32a2:	0f be       	out	0x3f, r0	; 63
    32a4:	cd bf       	out	0x3d, r28	; 61
    32a6:	09 94       	ijmp

000032a8 <__epilogue_restores__>:
    32a8:	2a 88       	ldd	r2, Y+18	; 0x12
    32aa:	39 88       	ldd	r3, Y+17	; 0x11
    32ac:	48 88       	ldd	r4, Y+16	; 0x10
    32ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    32b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    32b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    32b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    32b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    32b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    32ba:	b9 84       	ldd	r11, Y+9	; 0x09
    32bc:	c8 84       	ldd	r12, Y+8	; 0x08
    32be:	df 80       	ldd	r13, Y+7	; 0x07
    32c0:	ee 80       	ldd	r14, Y+6	; 0x06
    32c2:	fd 80       	ldd	r15, Y+5	; 0x05
    32c4:	0c 81       	ldd	r16, Y+4	; 0x04
    32c6:	1b 81       	ldd	r17, Y+3	; 0x03
    32c8:	aa 81       	ldd	r26, Y+2	; 0x02
    32ca:	b9 81       	ldd	r27, Y+1	; 0x01
    32cc:	ce 0f       	add	r28, r30
    32ce:	d1 1d       	adc	r29, r1
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	f8 94       	cli
    32d4:	de bf       	out	0x3e, r29	; 62
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	cd bf       	out	0x3d, r28	; 61
    32da:	ed 01       	movw	r28, r26
    32dc:	08 95       	ret

000032de <dtostrf>:
    32de:	ef 92       	push	r14
    32e0:	ff 92       	push	r15
    32e2:	0f 93       	push	r16
    32e4:	1f 93       	push	r17
    32e6:	f2 2f       	mov	r31, r18
    32e8:	f0 2e       	mov	r15, r16
    32ea:	47 fd       	sbrc	r20, 7
    32ec:	02 c0       	rjmp	.+4      	; 0x32f2 <dtostrf+0x14>
    32ee:	e4 e0       	ldi	r30, 0x04	; 4
    32f0:	01 c0       	rjmp	.+2      	; 0x32f4 <dtostrf+0x16>
    32f2:	e4 e1       	ldi	r30, 0x14	; 20
    32f4:	24 2f       	mov	r18, r20
    32f6:	33 27       	eor	r19, r19
    32f8:	27 fd       	sbrc	r18, 7
    32fa:	30 95       	com	r19
    32fc:	37 ff       	sbrs	r19, 7
    32fe:	03 c0       	rjmp	.+6      	; 0x3306 <dtostrf+0x28>
    3300:	30 95       	com	r19
    3302:	21 95       	neg	r18
    3304:	3f 4f       	sbci	r19, 0xFF	; 255
    3306:	4f 2d       	mov	r20, r15
    3308:	51 2f       	mov	r21, r17
    330a:	0f 2f       	mov	r16, r31
    330c:	ee 2e       	mov	r14, r30
    330e:	0e 94 b1 19 	call	0x3362	; 0x3362 <dtoa_prf>
    3312:	8f 2d       	mov	r24, r15
    3314:	91 2f       	mov	r25, r17
    3316:	1f 91       	pop	r17
    3318:	0f 91       	pop	r16
    331a:	ff 90       	pop	r15
    331c:	ef 90       	pop	r14
    331e:	08 95       	ret

00003320 <itoa>:
    3320:	fb 01       	movw	r30, r22
    3322:	9f 01       	movw	r18, r30
    3324:	e8 94       	clt
    3326:	42 30       	cpi	r20, 0x02	; 2
    3328:	c4 f0       	brlt	.+48     	; 0x335a <itoa+0x3a>
    332a:	45 32       	cpi	r20, 0x25	; 37
    332c:	b4 f4       	brge	.+44     	; 0x335a <itoa+0x3a>
    332e:	4a 30       	cpi	r20, 0x0A	; 10
    3330:	29 f4       	brne	.+10     	; 0x333c <itoa+0x1c>
    3332:	97 fb       	bst	r25, 7
    3334:	1e f4       	brtc	.+6      	; 0x333c <itoa+0x1c>
    3336:	90 95       	com	r25
    3338:	81 95       	neg	r24
    333a:	9f 4f       	sbci	r25, 0xFF	; 255
    333c:	64 2f       	mov	r22, r20
    333e:	77 27       	eor	r23, r23
    3340:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__udivmodhi4>
    3344:	80 5d       	subi	r24, 0xD0	; 208
    3346:	8a 33       	cpi	r24, 0x3A	; 58
    3348:	0c f0       	brlt	.+2      	; 0x334c <itoa+0x2c>
    334a:	89 5d       	subi	r24, 0xD9	; 217
    334c:	81 93       	st	Z+, r24
    334e:	cb 01       	movw	r24, r22
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	a1 f7       	brne	.-24     	; 0x333c <itoa+0x1c>
    3354:	16 f4       	brtc	.+4      	; 0x335a <itoa+0x3a>
    3356:	5d e2       	ldi	r21, 0x2D	; 45
    3358:	51 93       	st	Z+, r21
    335a:	10 82       	st	Z, r1
    335c:	c9 01       	movw	r24, r18
    335e:	0c 94 eb 1b 	jmp	0x37d6	; 0x37d6 <strrev>

00003362 <dtoa_prf>:
    3362:	a9 e0       	ldi	r26, 0x09	; 9
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	e7 eb       	ldi	r30, 0xB7	; 183
    3368:	f9 e1       	ldi	r31, 0x19	; 25
    336a:	0c 94 3c 19 	jmp	0x3278	; 0x3278 <__prologue_saves__+0x8>
    336e:	6a 01       	movw	r12, r20
    3370:	12 2f       	mov	r17, r18
    3372:	a0 2e       	mov	r10, r16
    3374:	be 2c       	mov	r11, r14
    3376:	2b e3       	ldi	r18, 0x3B	; 59
    3378:	20 17       	cp	r18, r16
    337a:	18 f4       	brcc	.+6      	; 0x3382 <dtoa_prf+0x20>
    337c:	2c e3       	ldi	r18, 0x3C	; 60
    337e:	92 2e       	mov	r9, r18
    3380:	02 c0       	rjmp	.+4      	; 0x3386 <dtoa_prf+0x24>
    3382:	90 2e       	mov	r9, r16
    3384:	93 94       	inc	r9
    3386:	ae 01       	movw	r20, r28
    3388:	4f 5f       	subi	r20, 0xFF	; 255
    338a:	5f 4f       	sbci	r21, 0xFF	; 255
    338c:	27 e0       	ldi	r18, 0x07	; 7
    338e:	09 2d       	mov	r16, r9
    3390:	0e 94 13 1b 	call	0x3626	; 0x3626 <__ftoa_engine>
    3394:	bc 01       	movw	r22, r24
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	e8 2e       	mov	r14, r24
    339a:	ff 24       	eor	r15, r15
    339c:	c7 01       	movw	r24, r14
    339e:	89 70       	andi	r24, 0x09	; 9
    33a0:	90 70       	andi	r25, 0x00	; 0
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	11 f4       	brne	.+4      	; 0x33aa <dtoa_prf+0x48>
    33a6:	ad e2       	ldi	r26, 0x2D	; 45
    33a8:	09 c0       	rjmp	.+18     	; 0x33bc <dtoa_prf+0x5a>
    33aa:	b1 fe       	sbrs	r11, 1
    33ac:	02 c0       	rjmp	.+4      	; 0x33b2 <dtoa_prf+0x50>
    33ae:	ab e2       	ldi	r26, 0x2B	; 43
    33b0:	05 c0       	rjmp	.+10     	; 0x33bc <dtoa_prf+0x5a>
    33b2:	b0 fc       	sbrc	r11, 0
    33b4:	02 c0       	rjmp	.+4      	; 0x33ba <dtoa_prf+0x58>
    33b6:	a0 e0       	ldi	r26, 0x00	; 0
    33b8:	01 c0       	rjmp	.+2      	; 0x33bc <dtoa_prf+0x5a>
    33ba:	a0 e2       	ldi	r26, 0x20	; 32
    33bc:	e3 fe       	sbrs	r14, 3
    33be:	3b c0       	rjmp	.+118    	; 0x3436 <dtoa_prf+0xd4>
    33c0:	aa 23       	and	r26, r26
    33c2:	11 f4       	brne	.+4      	; 0x33c8 <dtoa_prf+0x66>
    33c4:	23 e0       	ldi	r18, 0x03	; 3
    33c6:	01 c0       	rjmp	.+2      	; 0x33ca <dtoa_prf+0x68>
    33c8:	24 e0       	ldi	r18, 0x04	; 4
    33ca:	21 17       	cp	r18, r17
    33cc:	10 f0       	brcs	.+4      	; 0x33d2 <dtoa_prf+0x70>
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <dtoa_prf+0x74>
    33d2:	12 1b       	sub	r17, r18
    33d4:	21 2f       	mov	r18, r17
    33d6:	eb 2c       	mov	r14, r11
    33d8:	b4 fe       	sbrs	r11, 4
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <dtoa_prf+0x7e>
    33dc:	32 2f       	mov	r19, r18
    33de:	0a c0       	rjmp	.+20     	; 0x33f4 <dtoa_prf+0x92>
    33e0:	f6 01       	movw	r30, r12
    33e2:	32 2f       	mov	r19, r18
    33e4:	80 e2       	ldi	r24, 0x20	; 32
    33e6:	02 c0       	rjmp	.+4      	; 0x33ec <dtoa_prf+0x8a>
    33e8:	81 93       	st	Z+, r24
    33ea:	31 50       	subi	r19, 0x01	; 1
    33ec:	33 23       	and	r19, r19
    33ee:	e1 f7       	brne	.-8      	; 0x33e8 <dtoa_prf+0x86>
    33f0:	c2 0e       	add	r12, r18
    33f2:	d1 1c       	adc	r13, r1
    33f4:	aa 23       	and	r26, r26
    33f6:	19 f0       	breq	.+6      	; 0x33fe <dtoa_prf+0x9c>
    33f8:	f6 01       	movw	r30, r12
    33fa:	a1 93       	st	Z+, r26
    33fc:	6f 01       	movw	r12, r30
    33fe:	f6 01       	movw	r30, r12
    3400:	31 96       	adiw	r30, 0x01	; 1
    3402:	e2 fe       	sbrs	r14, 2
    3404:	05 c0       	rjmp	.+10     	; 0x3410 <dtoa_prf+0xae>
    3406:	9e e4       	ldi	r25, 0x4E	; 78
    3408:	d6 01       	movw	r26, r12
    340a:	9c 93       	st	X, r25
    340c:	81 e4       	ldi	r24, 0x41	; 65
    340e:	04 c0       	rjmp	.+8      	; 0x3418 <dtoa_prf+0xb6>
    3410:	9e e6       	ldi	r25, 0x6E	; 110
    3412:	d6 01       	movw	r26, r12
    3414:	9c 93       	st	X, r25
    3416:	81 e6       	ldi	r24, 0x61	; 97
    3418:	11 96       	adiw	r26, 0x01	; 1
    341a:	8c 93       	st	X, r24
    341c:	91 83       	std	Z+1, r25	; 0x01
    341e:	32 96       	adiw	r30, 0x02	; 2
    3420:	df 01       	movw	r26, r30
    3422:	83 2f       	mov	r24, r19
    3424:	90 e2       	ldi	r25, 0x20	; 32
    3426:	02 c0       	rjmp	.+4      	; 0x342c <dtoa_prf+0xca>
    3428:	9d 93       	st	X+, r25
    342a:	81 50       	subi	r24, 0x01	; 1
    342c:	88 23       	and	r24, r24
    342e:	e1 f7       	brne	.-8      	; 0x3428 <dtoa_prf+0xc6>
    3430:	e3 0f       	add	r30, r19
    3432:	f1 1d       	adc	r31, r1
    3434:	40 c0       	rjmp	.+128    	; 0x34b6 <dtoa_prf+0x154>
    3436:	e2 fe       	sbrs	r14, 2
    3438:	42 c0       	rjmp	.+132    	; 0x34be <dtoa_prf+0x15c>
    343a:	aa 23       	and	r26, r26
    343c:	11 f4       	brne	.+4      	; 0x3442 <dtoa_prf+0xe0>
    343e:	23 e0       	ldi	r18, 0x03	; 3
    3440:	01 c0       	rjmp	.+2      	; 0x3444 <dtoa_prf+0xe2>
    3442:	24 e0       	ldi	r18, 0x04	; 4
    3444:	21 17       	cp	r18, r17
    3446:	10 f0       	brcs	.+4      	; 0x344c <dtoa_prf+0xea>
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	02 c0       	rjmp	.+4      	; 0x3450 <dtoa_prf+0xee>
    344c:	12 1b       	sub	r17, r18
    344e:	21 2f       	mov	r18, r17
    3450:	eb 2c       	mov	r14, r11
    3452:	b4 fe       	sbrs	r11, 4
    3454:	02 c0       	rjmp	.+4      	; 0x345a <dtoa_prf+0xf8>
    3456:	92 2f       	mov	r25, r18
    3458:	0a c0       	rjmp	.+20     	; 0x346e <dtoa_prf+0x10c>
    345a:	f6 01       	movw	r30, r12
    345c:	92 2f       	mov	r25, r18
    345e:	80 e2       	ldi	r24, 0x20	; 32
    3460:	02 c0       	rjmp	.+4      	; 0x3466 <dtoa_prf+0x104>
    3462:	81 93       	st	Z+, r24
    3464:	91 50       	subi	r25, 0x01	; 1
    3466:	99 23       	and	r25, r25
    3468:	e1 f7       	brne	.-8      	; 0x3462 <dtoa_prf+0x100>
    346a:	c2 0e       	add	r12, r18
    346c:	d1 1c       	adc	r13, r1
    346e:	aa 23       	and	r26, r26
    3470:	19 f0       	breq	.+6      	; 0x3478 <dtoa_prf+0x116>
    3472:	f6 01       	movw	r30, r12
    3474:	a1 93       	st	Z+, r26
    3476:	6f 01       	movw	r12, r30
    3478:	f6 01       	movw	r30, r12
    347a:	31 96       	adiw	r30, 0x01	; 1
    347c:	e2 fe       	sbrs	r14, 2
    347e:	08 c0       	rjmp	.+16     	; 0x3490 <dtoa_prf+0x12e>
    3480:	89 e4       	ldi	r24, 0x49	; 73
    3482:	d6 01       	movw	r26, r12
    3484:	8c 93       	st	X, r24
    3486:	8e e4       	ldi	r24, 0x4E	; 78
    3488:	11 96       	adiw	r26, 0x01	; 1
    348a:	8c 93       	st	X, r24
    348c:	86 e4       	ldi	r24, 0x46	; 70
    348e:	07 c0       	rjmp	.+14     	; 0x349e <dtoa_prf+0x13c>
    3490:	89 e6       	ldi	r24, 0x69	; 105
    3492:	d6 01       	movw	r26, r12
    3494:	8c 93       	st	X, r24
    3496:	8e e6       	ldi	r24, 0x6E	; 110
    3498:	11 96       	adiw	r26, 0x01	; 1
    349a:	8c 93       	st	X, r24
    349c:	86 e6       	ldi	r24, 0x66	; 102
    349e:	81 83       	std	Z+1, r24	; 0x01
    34a0:	32 96       	adiw	r30, 0x02	; 2
    34a2:	df 01       	movw	r26, r30
    34a4:	89 2f       	mov	r24, r25
    34a6:	20 e2       	ldi	r18, 0x20	; 32
    34a8:	02 c0       	rjmp	.+4      	; 0x34ae <dtoa_prf+0x14c>
    34aa:	2d 93       	st	X+, r18
    34ac:	81 50       	subi	r24, 0x01	; 1
    34ae:	88 23       	and	r24, r24
    34b0:	e1 f7       	brne	.-8      	; 0x34aa <dtoa_prf+0x148>
    34b2:	e9 0f       	add	r30, r25
    34b4:	f1 1d       	adc	r31, r1
    34b6:	10 82       	st	Z, r1
    34b8:	2e ef       	ldi	r18, 0xFE	; 254
    34ba:	3f ef       	ldi	r19, 0xFF	; 255
    34bc:	af c0       	rjmp	.+350    	; 0x361c <dtoa_prf+0x2ba>
    34be:	16 16       	cp	r1, r22
    34c0:	17 06       	cpc	r1, r23
    34c2:	1c f0       	brlt	.+6      	; 0x34ca <dtoa_prf+0x168>
    34c4:	41 e0       	ldi	r20, 0x01	; 1
    34c6:	50 e0       	ldi	r21, 0x00	; 0
    34c8:	03 c0       	rjmp	.+6      	; 0x34d0 <dtoa_prf+0x16e>
    34ca:	ab 01       	movw	r20, r22
    34cc:	4f 5f       	subi	r20, 0xFF	; 255
    34ce:	5f 4f       	sbci	r21, 0xFF	; 255
    34d0:	aa 20       	and	r10, r10
    34d2:	19 f4       	brne	.+6      	; 0x34da <dtoa_prf+0x178>
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	03 c0       	rjmp	.+6      	; 0x34e0 <dtoa_prf+0x17e>
    34da:	8a 2d       	mov	r24, r10
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	01 96       	adiw	r24, 0x01	; 1
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	aa 23       	and	r26, r26
    34e6:	11 f0       	breq	.+4      	; 0x34ec <dtoa_prf+0x18a>
    34e8:	21 e0       	ldi	r18, 0x01	; 1
    34ea:	30 e0       	ldi	r19, 0x00	; 0
    34ec:	24 0f       	add	r18, r20
    34ee:	35 1f       	adc	r19, r21
    34f0:	28 0f       	add	r18, r24
    34f2:	39 1f       	adc	r19, r25
    34f4:	81 2f       	mov	r24, r17
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	28 17       	cp	r18, r24
    34fa:	39 07       	cpc	r19, r25
    34fc:	14 f0       	brlt	.+4      	; 0x3502 <dtoa_prf+0x1a0>
    34fe:	20 e0       	ldi	r18, 0x00	; 0
    3500:	02 c0       	rjmp	.+4      	; 0x3506 <dtoa_prf+0x1a4>
    3502:	12 1b       	sub	r17, r18
    3504:	21 2f       	mov	r18, r17
    3506:	4b 2d       	mov	r20, r11
    3508:	50 e0       	ldi	r21, 0x00	; 0
    350a:	ca 01       	movw	r24, r20
    350c:	80 71       	andi	r24, 0x10	; 16
    350e:	90 70       	andi	r25, 0x00	; 0
    3510:	b4 fc       	sbrc	r11, 4
    3512:	0d c0       	rjmp	.+26     	; 0x352e <dtoa_prf+0x1cc>
    3514:	b3 fc       	sbrc	r11, 3
    3516:	0b c0       	rjmp	.+22     	; 0x352e <dtoa_prf+0x1cc>
    3518:	f6 01       	movw	r30, r12
    351a:	32 2f       	mov	r19, r18
    351c:	40 e2       	ldi	r20, 0x20	; 32
    351e:	02 c0       	rjmp	.+4      	; 0x3524 <dtoa_prf+0x1c2>
    3520:	41 93       	st	Z+, r20
    3522:	31 50       	subi	r19, 0x01	; 1
    3524:	33 23       	and	r19, r19
    3526:	e1 f7       	brne	.-8      	; 0x3520 <dtoa_prf+0x1be>
    3528:	c2 0e       	add	r12, r18
    352a:	d1 1c       	adc	r13, r1
    352c:	01 c0       	rjmp	.+2      	; 0x3530 <dtoa_prf+0x1ce>
    352e:	32 2f       	mov	r19, r18
    3530:	aa 23       	and	r26, r26
    3532:	19 f0       	breq	.+6      	; 0x353a <dtoa_prf+0x1d8>
    3534:	f6 01       	movw	r30, r12
    3536:	a1 93       	st	Z+, r26
    3538:	6f 01       	movw	r12, r30
    353a:	89 2b       	or	r24, r25
    353c:	11 f0       	breq	.+4      	; 0x3542 <dtoa_prf+0x1e0>
    353e:	13 2f       	mov	r17, r19
    3540:	0a c0       	rjmp	.+20     	; 0x3556 <dtoa_prf+0x1f4>
    3542:	f6 01       	movw	r30, r12
    3544:	13 2f       	mov	r17, r19
    3546:	80 e3       	ldi	r24, 0x30	; 48
    3548:	02 c0       	rjmp	.+4      	; 0x354e <dtoa_prf+0x1ec>
    354a:	81 93       	st	Z+, r24
    354c:	11 50       	subi	r17, 0x01	; 1
    354e:	11 23       	and	r17, r17
    3550:	e1 f7       	brne	.-8      	; 0x354a <dtoa_prf+0x1e8>
    3552:	c3 0e       	add	r12, r19
    3554:	d1 1c       	adc	r13, r1
    3556:	09 2d       	mov	r16, r9
    3558:	06 0f       	add	r16, r22
    355a:	ba 80       	ldd	r11, Y+2	; 0x02
    355c:	90 e1       	ldi	r25, 0x10	; 16
    355e:	89 2e       	mov	r8, r25
    3560:	91 2c       	mov	r9, r1
    3562:	8e 20       	and	r8, r14
    3564:	9f 20       	and	r9, r15
    3566:	e4 fe       	sbrs	r14, 4
    3568:	04 c0       	rjmp	.+8      	; 0x3572 <dtoa_prf+0x210>
    356a:	f1 e3       	ldi	r31, 0x31	; 49
    356c:	bf 16       	cp	r11, r31
    356e:	09 f4       	brne	.+2      	; 0x3572 <dtoa_prf+0x210>
    3570:	01 50       	subi	r16, 0x01	; 1
    3572:	10 16       	cp	r1, r16
    3574:	14 f0       	brlt	.+4      	; 0x357a <dtoa_prf+0x218>
    3576:	01 e0       	ldi	r16, 0x01	; 1
    3578:	03 c0       	rjmp	.+6      	; 0x3580 <dtoa_prf+0x21e>
    357a:	09 30       	cpi	r16, 0x09	; 9
    357c:	08 f0       	brcs	.+2      	; 0x3580 <dtoa_prf+0x21e>
    357e:	08 e0       	ldi	r16, 0x08	; 8
    3580:	9b 01       	movw	r18, r22
    3582:	77 ff       	sbrs	r23, 7
    3584:	02 c0       	rjmp	.+4      	; 0x358a <dtoa_prf+0x228>
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	cb 01       	movw	r24, r22
    358c:	01 96       	adiw	r24, 0x01	; 1
    358e:	82 1b       	sub	r24, r18
    3590:	93 0b       	sbc	r25, r19
    3592:	fe 01       	movw	r30, r28
    3594:	31 96       	adiw	r30, 0x01	; 1
    3596:	e8 0f       	add	r30, r24
    3598:	f9 1f       	adc	r31, r25
    359a:	8e e2       	ldi	r24, 0x2E	; 46
    359c:	f8 2e       	mov	r15, r24
    359e:	3b 01       	movw	r6, r22
    35a0:	60 1a       	sub	r6, r16
    35a2:	71 08       	sbc	r7, r1
    35a4:	8a 2d       	mov	r24, r10
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	44 27       	eor	r20, r20
    35aa:	55 27       	eor	r21, r21
    35ac:	48 1b       	sub	r20, r24
    35ae:	59 0b       	sbc	r21, r25
    35b0:	8f ef       	ldi	r24, 0xFF	; 255
    35b2:	2f 3f       	cpi	r18, 0xFF	; 255
    35b4:	38 07       	cpc	r19, r24
    35b6:	19 f4       	brne	.+6      	; 0x35be <dtoa_prf+0x25c>
    35b8:	d6 01       	movw	r26, r12
    35ba:	fd 92       	st	X+, r15
    35bc:	6d 01       	movw	r12, r26
    35be:	62 17       	cp	r22, r18
    35c0:	73 07       	cpc	r23, r19
    35c2:	2c f0       	brlt	.+10     	; 0x35ce <dtoa_prf+0x26c>
    35c4:	62 16       	cp	r6, r18
    35c6:	73 06       	cpc	r7, r19
    35c8:	14 f4       	brge	.+4      	; 0x35ce <dtoa_prf+0x26c>
    35ca:	80 81       	ld	r24, Z
    35cc:	01 c0       	rjmp	.+2      	; 0x35d0 <dtoa_prf+0x26e>
    35ce:	80 e3       	ldi	r24, 0x30	; 48
    35d0:	21 50       	subi	r18, 0x01	; 1
    35d2:	30 40       	sbci	r19, 0x00	; 0
    35d4:	31 96       	adiw	r30, 0x01	; 1
    35d6:	24 17       	cp	r18, r20
    35d8:	35 07       	cpc	r19, r21
    35da:	24 f0       	brlt	.+8      	; 0x35e4 <dtoa_prf+0x282>
    35dc:	d6 01       	movw	r26, r12
    35de:	8d 93       	st	X+, r24
    35e0:	6d 01       	movw	r12, r26
    35e2:	e6 cf       	rjmp	.-52     	; 0x35b0 <dtoa_prf+0x24e>
    35e4:	26 17       	cp	r18, r22
    35e6:	37 07       	cpc	r19, r23
    35e8:	49 f4       	brne	.+18     	; 0x35fc <dtoa_prf+0x29a>
    35ea:	b5 e3       	ldi	r27, 0x35	; 53
    35ec:	bb 15       	cp	r27, r11
    35ee:	28 f0       	brcs	.+10     	; 0x35fa <dtoa_prf+0x298>
    35f0:	bb 16       	cp	r11, r27
    35f2:	21 f4       	brne	.+8      	; 0x35fc <dtoa_prf+0x29a>
    35f4:	81 14       	cp	r8, r1
    35f6:	91 04       	cpc	r9, r1
    35f8:	09 f4       	brne	.+2      	; 0x35fc <dtoa_prf+0x29a>
    35fa:	81 e3       	ldi	r24, 0x31	; 49
    35fc:	f6 01       	movw	r30, r12
    35fe:	81 93       	st	Z+, r24
    3600:	d6 01       	movw	r26, r12
    3602:	81 2f       	mov	r24, r17
    3604:	90 e2       	ldi	r25, 0x20	; 32
    3606:	02 c0       	rjmp	.+4      	; 0x360c <dtoa_prf+0x2aa>
    3608:	9c 93       	st	X, r25
    360a:	81 50       	subi	r24, 0x01	; 1
    360c:	11 96       	adiw	r26, 0x01	; 1
    360e:	88 23       	and	r24, r24
    3610:	d9 f7       	brne	.-10     	; 0x3608 <dtoa_prf+0x2a6>
    3612:	e1 0f       	add	r30, r17
    3614:	f1 1d       	adc	r31, r1
    3616:	10 82       	st	Z, r1
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	c9 01       	movw	r24, r18
    361e:	29 96       	adiw	r28, 0x09	; 9
    3620:	ee e0       	ldi	r30, 0x0E	; 14
    3622:	0c 94 58 19 	jmp	0x32b0	; 0x32b0 <__epilogue_restores__+0x8>

00003626 <__ftoa_engine>:
    3626:	28 30       	cpi	r18, 0x08	; 8
    3628:	08 f0       	brcs	.+2      	; 0x362c <__ftoa_engine+0x6>
    362a:	27 e0       	ldi	r18, 0x07	; 7
    362c:	33 27       	eor	r19, r19
    362e:	da 01       	movw	r26, r20
    3630:	99 0f       	add	r25, r25
    3632:	31 1d       	adc	r19, r1
    3634:	87 fd       	sbrc	r24, 7
    3636:	91 60       	ori	r25, 0x01	; 1
    3638:	00 96       	adiw	r24, 0x00	; 0
    363a:	61 05       	cpc	r22, r1
    363c:	71 05       	cpc	r23, r1
    363e:	39 f4       	brne	.+14     	; 0x364e <__ftoa_engine+0x28>
    3640:	32 60       	ori	r19, 0x02	; 2
    3642:	2e 5f       	subi	r18, 0xFE	; 254
    3644:	3d 93       	st	X+, r19
    3646:	30 e3       	ldi	r19, 0x30	; 48
    3648:	2a 95       	dec	r18
    364a:	e1 f7       	brne	.-8      	; 0x3644 <__ftoa_engine+0x1e>
    364c:	08 95       	ret
    364e:	9f 3f       	cpi	r25, 0xFF	; 255
    3650:	30 f0       	brcs	.+12     	; 0x365e <__ftoa_engine+0x38>
    3652:	80 38       	cpi	r24, 0x80	; 128
    3654:	71 05       	cpc	r23, r1
    3656:	61 05       	cpc	r22, r1
    3658:	09 f0       	breq	.+2      	; 0x365c <__ftoa_engine+0x36>
    365a:	3c 5f       	subi	r19, 0xFC	; 252
    365c:	3c 5f       	subi	r19, 0xFC	; 252
    365e:	3d 93       	st	X+, r19
    3660:	91 30       	cpi	r25, 0x01	; 1
    3662:	08 f0       	brcs	.+2      	; 0x3666 <__ftoa_engine+0x40>
    3664:	80 68       	ori	r24, 0x80	; 128
    3666:	91 1d       	adc	r25, r1
    3668:	df 93       	push	r29
    366a:	cf 93       	push	r28
    366c:	1f 93       	push	r17
    366e:	0f 93       	push	r16
    3670:	ff 92       	push	r15
    3672:	ef 92       	push	r14
    3674:	19 2f       	mov	r17, r25
    3676:	98 7f       	andi	r25, 0xF8	; 248
    3678:	96 95       	lsr	r25
    367a:	e9 2f       	mov	r30, r25
    367c:	96 95       	lsr	r25
    367e:	96 95       	lsr	r25
    3680:	e9 0f       	add	r30, r25
    3682:	ff 27       	eor	r31, r31
    3684:	e2 55       	subi	r30, 0x52	; 82
    3686:	ff 4f       	sbci	r31, 0xFF	; 255
    3688:	99 27       	eor	r25, r25
    368a:	33 27       	eor	r19, r19
    368c:	ee 24       	eor	r14, r14
    368e:	ff 24       	eor	r15, r15
    3690:	a7 01       	movw	r20, r14
    3692:	e7 01       	movw	r28, r14
    3694:	05 90       	lpm	r0, Z+
    3696:	08 94       	sec
    3698:	07 94       	ror	r0
    369a:	28 f4       	brcc	.+10     	; 0x36a6 <__ftoa_engine+0x80>
    369c:	36 0f       	add	r19, r22
    369e:	e7 1e       	adc	r14, r23
    36a0:	f8 1e       	adc	r15, r24
    36a2:	49 1f       	adc	r20, r25
    36a4:	51 1d       	adc	r21, r1
    36a6:	66 0f       	add	r22, r22
    36a8:	77 1f       	adc	r23, r23
    36aa:	88 1f       	adc	r24, r24
    36ac:	99 1f       	adc	r25, r25
    36ae:	06 94       	lsr	r0
    36b0:	a1 f7       	brne	.-24     	; 0x369a <__ftoa_engine+0x74>
    36b2:	05 90       	lpm	r0, Z+
    36b4:	07 94       	ror	r0
    36b6:	28 f4       	brcc	.+10     	; 0x36c2 <__ftoa_engine+0x9c>
    36b8:	e7 0e       	add	r14, r23
    36ba:	f8 1e       	adc	r15, r24
    36bc:	49 1f       	adc	r20, r25
    36be:	56 1f       	adc	r21, r22
    36c0:	c1 1d       	adc	r28, r1
    36c2:	77 0f       	add	r23, r23
    36c4:	88 1f       	adc	r24, r24
    36c6:	99 1f       	adc	r25, r25
    36c8:	66 1f       	adc	r22, r22
    36ca:	06 94       	lsr	r0
    36cc:	a1 f7       	brne	.-24     	; 0x36b6 <__ftoa_engine+0x90>
    36ce:	05 90       	lpm	r0, Z+
    36d0:	07 94       	ror	r0
    36d2:	28 f4       	brcc	.+10     	; 0x36de <__ftoa_engine+0xb8>
    36d4:	f8 0e       	add	r15, r24
    36d6:	49 1f       	adc	r20, r25
    36d8:	56 1f       	adc	r21, r22
    36da:	c7 1f       	adc	r28, r23
    36dc:	d1 1d       	adc	r29, r1
    36de:	88 0f       	add	r24, r24
    36e0:	99 1f       	adc	r25, r25
    36e2:	66 1f       	adc	r22, r22
    36e4:	77 1f       	adc	r23, r23
    36e6:	06 94       	lsr	r0
    36e8:	a1 f7       	brne	.-24     	; 0x36d2 <__ftoa_engine+0xac>
    36ea:	05 90       	lpm	r0, Z+
    36ec:	07 94       	ror	r0
    36ee:	20 f4       	brcc	.+8      	; 0x36f8 <__ftoa_engine+0xd2>
    36f0:	49 0f       	add	r20, r25
    36f2:	56 1f       	adc	r21, r22
    36f4:	c7 1f       	adc	r28, r23
    36f6:	d8 1f       	adc	r29, r24
    36f8:	99 0f       	add	r25, r25
    36fa:	66 1f       	adc	r22, r22
    36fc:	77 1f       	adc	r23, r23
    36fe:	88 1f       	adc	r24, r24
    3700:	06 94       	lsr	r0
    3702:	a9 f7       	brne	.-22     	; 0x36ee <__ftoa_engine+0xc8>
    3704:	84 91       	lpm	r24, Z+
    3706:	10 95       	com	r17
    3708:	17 70       	andi	r17, 0x07	; 7
    370a:	41 f0       	breq	.+16     	; 0x371c <__ftoa_engine+0xf6>
    370c:	d6 95       	lsr	r29
    370e:	c7 95       	ror	r28
    3710:	57 95       	ror	r21
    3712:	47 95       	ror	r20
    3714:	f7 94       	ror	r15
    3716:	e7 94       	ror	r14
    3718:	1a 95       	dec	r17
    371a:	c1 f7       	brne	.-16     	; 0x370c <__ftoa_engine+0xe6>
    371c:	e4 e5       	ldi	r30, 0x54	; 84
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	68 94       	set
    3722:	15 90       	lpm	r1, Z+
    3724:	15 91       	lpm	r17, Z+
    3726:	35 91       	lpm	r19, Z+
    3728:	65 91       	lpm	r22, Z+
    372a:	95 91       	lpm	r25, Z+
    372c:	05 90       	lpm	r0, Z+
    372e:	7f e2       	ldi	r23, 0x2F	; 47
    3730:	73 95       	inc	r23
    3732:	e1 18       	sub	r14, r1
    3734:	f1 0a       	sbc	r15, r17
    3736:	43 0b       	sbc	r20, r19
    3738:	56 0b       	sbc	r21, r22
    373a:	c9 0b       	sbc	r28, r25
    373c:	d0 09       	sbc	r29, r0
    373e:	c0 f7       	brcc	.-16     	; 0x3730 <__ftoa_engine+0x10a>
    3740:	e1 0c       	add	r14, r1
    3742:	f1 1e       	adc	r15, r17
    3744:	43 1f       	adc	r20, r19
    3746:	56 1f       	adc	r21, r22
    3748:	c9 1f       	adc	r28, r25
    374a:	d0 1d       	adc	r29, r0
    374c:	7e f4       	brtc	.+30     	; 0x376c <__ftoa_engine+0x146>
    374e:	70 33       	cpi	r23, 0x30	; 48
    3750:	11 f4       	brne	.+4      	; 0x3756 <__ftoa_engine+0x130>
    3752:	8a 95       	dec	r24
    3754:	e6 cf       	rjmp	.-52     	; 0x3722 <__ftoa_engine+0xfc>
    3756:	e8 94       	clt
    3758:	01 50       	subi	r16, 0x01	; 1
    375a:	30 f0       	brcs	.+12     	; 0x3768 <__ftoa_engine+0x142>
    375c:	08 0f       	add	r16, r24
    375e:	0a f4       	brpl	.+2      	; 0x3762 <__ftoa_engine+0x13c>
    3760:	00 27       	eor	r16, r16
    3762:	02 17       	cp	r16, r18
    3764:	08 f4       	brcc	.+2      	; 0x3768 <__ftoa_engine+0x142>
    3766:	20 2f       	mov	r18, r16
    3768:	23 95       	inc	r18
    376a:	02 2f       	mov	r16, r18
    376c:	7a 33       	cpi	r23, 0x3A	; 58
    376e:	28 f0       	brcs	.+10     	; 0x377a <__ftoa_engine+0x154>
    3770:	79 e3       	ldi	r23, 0x39	; 57
    3772:	7d 93       	st	X+, r23
    3774:	2a 95       	dec	r18
    3776:	e9 f7       	brne	.-6      	; 0x3772 <__ftoa_engine+0x14c>
    3778:	10 c0       	rjmp	.+32     	; 0x379a <__ftoa_engine+0x174>
    377a:	7d 93       	st	X+, r23
    377c:	2a 95       	dec	r18
    377e:	89 f6       	brne	.-94     	; 0x3722 <__ftoa_engine+0xfc>
    3780:	06 94       	lsr	r0
    3782:	97 95       	ror	r25
    3784:	67 95       	ror	r22
    3786:	37 95       	ror	r19
    3788:	17 95       	ror	r17
    378a:	17 94       	ror	r1
    378c:	e1 18       	sub	r14, r1
    378e:	f1 0a       	sbc	r15, r17
    3790:	43 0b       	sbc	r20, r19
    3792:	56 0b       	sbc	r21, r22
    3794:	c9 0b       	sbc	r28, r25
    3796:	d0 09       	sbc	r29, r0
    3798:	98 f0       	brcs	.+38     	; 0x37c0 <__ftoa_engine+0x19a>
    379a:	23 95       	inc	r18
    379c:	7e 91       	ld	r23, -X
    379e:	73 95       	inc	r23
    37a0:	7a 33       	cpi	r23, 0x3A	; 58
    37a2:	08 f0       	brcs	.+2      	; 0x37a6 <__ftoa_engine+0x180>
    37a4:	70 e3       	ldi	r23, 0x30	; 48
    37a6:	7c 93       	st	X, r23
    37a8:	20 13       	cpse	r18, r16
    37aa:	b8 f7       	brcc	.-18     	; 0x379a <__ftoa_engine+0x174>
    37ac:	7e 91       	ld	r23, -X
    37ae:	70 61       	ori	r23, 0x10	; 16
    37b0:	7d 93       	st	X+, r23
    37b2:	30 f0       	brcs	.+12     	; 0x37c0 <__ftoa_engine+0x19a>
    37b4:	83 95       	inc	r24
    37b6:	71 e3       	ldi	r23, 0x31	; 49
    37b8:	7d 93       	st	X+, r23
    37ba:	70 e3       	ldi	r23, 0x30	; 48
    37bc:	2a 95       	dec	r18
    37be:	e1 f7       	brne	.-8      	; 0x37b8 <__ftoa_engine+0x192>
    37c0:	11 24       	eor	r1, r1
    37c2:	ef 90       	pop	r14
    37c4:	ff 90       	pop	r15
    37c6:	0f 91       	pop	r16
    37c8:	1f 91       	pop	r17
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	99 27       	eor	r25, r25
    37d0:	87 fd       	sbrc	r24, 7
    37d2:	90 95       	com	r25
    37d4:	08 95       	ret

000037d6 <strrev>:
    37d6:	dc 01       	movw	r26, r24
    37d8:	fc 01       	movw	r30, r24
    37da:	67 2f       	mov	r22, r23
    37dc:	71 91       	ld	r23, Z+
    37de:	77 23       	and	r23, r23
    37e0:	e1 f7       	brne	.-8      	; 0x37da <strrev+0x4>
    37e2:	32 97       	sbiw	r30, 0x02	; 2
    37e4:	04 c0       	rjmp	.+8      	; 0x37ee <strrev+0x18>
    37e6:	7c 91       	ld	r23, X
    37e8:	6d 93       	st	X+, r22
    37ea:	70 83       	st	Z, r23
    37ec:	62 91       	ld	r22, -Z
    37ee:	ae 17       	cp	r26, r30
    37f0:	bf 07       	cpc	r27, r31
    37f2:	c8 f3       	brcs	.-14     	; 0x37e6 <strrev+0x10>
    37f4:	08 95       	ret

000037f6 <__udivmodhi4>:
    37f6:	aa 1b       	sub	r26, r26
    37f8:	bb 1b       	sub	r27, r27
    37fa:	51 e1       	ldi	r21, 0x11	; 17
    37fc:	07 c0       	rjmp	.+14     	; 0x380c <__udivmodhi4_ep>

000037fe <__udivmodhi4_loop>:
    37fe:	aa 1f       	adc	r26, r26
    3800:	bb 1f       	adc	r27, r27
    3802:	a6 17       	cp	r26, r22
    3804:	b7 07       	cpc	r27, r23
    3806:	10 f0       	brcs	.+4      	; 0x380c <__udivmodhi4_ep>
    3808:	a6 1b       	sub	r26, r22
    380a:	b7 0b       	sbc	r27, r23

0000380c <__udivmodhi4_ep>:
    380c:	88 1f       	adc	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	5a 95       	dec	r21
    3812:	a9 f7       	brne	.-22     	; 0x37fe <__udivmodhi4_loop>
    3814:	80 95       	com	r24
    3816:	90 95       	com	r25
    3818:	bc 01       	movw	r22, r24
    381a:	cd 01       	movw	r24, r26
    381c:	08 95       	ret

0000381e <_exit>:
    381e:	f8 94       	cli

00003820 <__stop_program>:
    3820:	ff cf       	rjmp	.-2      	; 0x3820 <__stop_program>
